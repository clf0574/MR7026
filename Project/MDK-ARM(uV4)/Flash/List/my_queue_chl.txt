; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\outupt\my_queue_chl.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=..\outupt\my_queue_chl.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\outupt\my_queue_chl.crf ..\..\User\my_queue_chl.c]
                          THUMB

                          AREA ||i.ClrChannelBIT||, CODE, READONLY, ALIGN=1

                  ClrChannelBIT PROC
;;;122    
;;;123    static unsigned int ClrChannelBIT(unsigned int count,unsigned char channel)
000000  b911              CBNZ     r1,|L1.8|
;;;124    {
;;;125    		if     (channel==0)    count &= ~USE_CHL_0;
000002  f0200001          BIC      r0,r0,#1
000006  e04b              B        |L1.160|
                  |L1.8|
;;;126    	  else if(channel==1)    count &= ~USE_CHL_1;
000008  2901              CMP      r1,#1
00000a  d102              BNE      |L1.18|
00000c  f0200002          BIC      r0,r0,#2
000010  e046              B        |L1.160|
                  |L1.18|
;;;127    	  else if(channel==2)    count &= ~USE_CHL_2;
000012  2902              CMP      r1,#2
000014  d102              BNE      |L1.28|
000016  f0200004          BIC      r0,r0,#4
00001a  e041              B        |L1.160|
                  |L1.28|
;;;128    	  else if(channel==3)    count &= ~USE_CHL_3;
00001c  2903              CMP      r1,#3
00001e  d102              BNE      |L1.38|
000020  f0200008          BIC      r0,r0,#8
000024  e03c              B        |L1.160|
                  |L1.38|
;;;129    	  else if(channel==4)    count &= ~USE_CHL_4;
000026  2904              CMP      r1,#4
000028  d102              BNE      |L1.48|
00002a  f0200010          BIC      r0,r0,#0x10
00002e  e037              B        |L1.160|
                  |L1.48|
;;;130    	  else if(channel==5)    count &= ~USE_CHL_5;
000030  2905              CMP      r1,#5
000032  d102              BNE      |L1.58|
000034  f0200020          BIC      r0,r0,#0x20
000038  e032              B        |L1.160|
                  |L1.58|
;;;131    	  else if(channel==6)    count &= ~USE_CHL_6;
00003a  2906              CMP      r1,#6
00003c  d102              BNE      |L1.68|
00003e  f0200040          BIC      r0,r0,#0x40
000042  e02d              B        |L1.160|
                  |L1.68|
;;;132    	  else if(channel==7)    count &= ~USE_CHL_7;
000044  2907              CMP      r1,#7
000046  d102              BNE      |L1.78|
000048  f0200080          BIC      r0,r0,#0x80
00004c  e028              B        |L1.160|
                  |L1.78|
;;;133    	  else if(channel==8)    count &= ~USE_CHL_8;
00004e  2908              CMP      r1,#8
000050  d102              BNE      |L1.88|
000052  f4207080          BIC      r0,r0,#0x100
000056  e023              B        |L1.160|
                  |L1.88|
;;;134    	  else if(channel==9)    count &= ~USE_CHL_9;
000058  2909              CMP      r1,#9
00005a  d102              BNE      |L1.98|
00005c  f4207000          BIC      r0,r0,#0x200
000060  e01e              B        |L1.160|
                  |L1.98|
;;;135    	  else if(channel==10)   count &= ~USE_CHL_10;
000062  290a              CMP      r1,#0xa
000064  d102              BNE      |L1.108|
000066  f4206080          BIC      r0,r0,#0x400
00006a  e019              B        |L1.160|
                  |L1.108|
;;;136    	  else if(channel==11)   count &= ~USE_CHL_11;
00006c  290b              CMP      r1,#0xb
00006e  d102              BNE      |L1.118|
000070  f4206000          BIC      r0,r0,#0x800
000074  e014              B        |L1.160|
                  |L1.118|
;;;137    	  else if(channel==12)   count &= ~USE_CHL_12;
000076  290c              CMP      r1,#0xc
000078  d102              BNE      |L1.128|
00007a  f4205080          BIC      r0,r0,#0x1000
00007e  e00f              B        |L1.160|
                  |L1.128|
;;;138    	  else if(channel==13)   count &= ~USE_CHL_13;
000080  290d              CMP      r1,#0xd
000082  d102              BNE      |L1.138|
000084  f4205000          BIC      r0,r0,#0x2000
000088  e00a              B        |L1.160|
                  |L1.138|
;;;139    	  else if(channel==14)   count &= ~USE_CHL_14;
00008a  290e              CMP      r1,#0xe
00008c  d102              BNE      |L1.148|
00008e  f4204080          BIC      r0,r0,#0x4000
000092  e005              B        |L1.160|
                  |L1.148|
;;;140    	  else if(channel==15)   count &= ~USE_CHL_15;
000094  290f              CMP      r1,#0xf
000096  d102              BNE      |L1.158|
000098  f4204000          BIC      r0,r0,#0x8000
00009c  e000              B        |L1.160|
                  |L1.158|
;;;141    	  else                   count = count ;
00009e  bf00              NOP      
                  |L1.160|
;;;142    	
;;;143    	  return count;
;;;144    }
0000a0  4770              BX       lr
;;;145    
                          ENDP


                          AREA ||i.DeQueueBuf||, CODE, READONLY, ALIGN=1

                  DeQueueBuf PROC
;;;92     //出队
;;;93     unsigned char DeQueueBuf(QueueBUF *queueBuf,unsigned char channel)
000000  b570              PUSH     {r4-r6,lr}
;;;94     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;95     		queueBuf->count =ClrChannelBIT(queueBuf->count,channel);	
000006  4629              MOV      r1,r5
000008  6860              LDR      r0,[r4,#4]
00000a  f7fffffe          BL       ClrChannelBIT
00000e  6060              STR      r0,[r4,#4]
;;;96     		return TRUE;
000010  2001              MOVS     r0,#1
;;;97     	
;;;98     }
000012  bd70              POP      {r4-r6,pc}
;;;99     
                          ENDP


                          AREA ||i.EnQueueBuf||, CODE, READONLY, ALIGN=1

                  EnQueueBuf PROC
;;;85     //入队，TRUE表示成功
;;;86     unsigned char EnQueueBuf(QueueBUF *queueBuf,unsigned char channel)
000000  b570              PUSH     {r4-r6,lr}
;;;87     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;88     		queueBuf->count =SetChannelBIT(queueBuf->count,channel);
000006  4629              MOV      r1,r5
000008  6860              LDR      r0,[r4,#4]
00000a  f7fffffe          BL       SetChannelBIT
00000e  6060              STR      r0,[r4,#4]
;;;89     	  return TRUE;
000010  2001              MOVS     r0,#1
;;;90     }
000012  bd70              POP      {r4-r6,pc}
;;;91     
                          ENDP


                          AREA ||i.FoundChannelBIT||, CODE, READONLY, ALIGN=1

                  FoundChannelBIT PROC
;;;145    
;;;146    static unsigned int FoundChannelBIT(unsigned int count,unsigned char channel)
000000  4602              MOV      r2,r0
;;;147    {
;;;148    	unsigned int rt;
;;;149    	
;;;150    	if(channel==0)		rt=count&USE_CHL_0;
000002  b911              CBNZ     r1,|L4.10|
000004  f0020001          AND      r0,r2,#1
000008  e04b              B        |L4.162|
                  |L4.10|
;;;151    	else if(channel==1)	rt=count&USE_CHL_1;
00000a  2901              CMP      r1,#1
00000c  d102              BNE      |L4.20|
00000e  f0020002          AND      r0,r2,#2
000012  e046              B        |L4.162|
                  |L4.20|
;;;152    	else if(channel==2)	rt=count&USE_CHL_2;
000014  2902              CMP      r1,#2
000016  d102              BNE      |L4.30|
000018  f0020004          AND      r0,r2,#4
00001c  e041              B        |L4.162|
                  |L4.30|
;;;153    	else if(channel==3)	rt=count&USE_CHL_3;
00001e  2903              CMP      r1,#3
000020  d102              BNE      |L4.40|
000022  f0020008          AND      r0,r2,#8
000026  e03c              B        |L4.162|
                  |L4.40|
;;;154    	else if(channel==4)	rt=count&USE_CHL_4;
000028  2904              CMP      r1,#4
00002a  d102              BNE      |L4.50|
00002c  f0020010          AND      r0,r2,#0x10
000030  e037              B        |L4.162|
                  |L4.50|
;;;155    	else if(channel==5)	rt=count&USE_CHL_5;
000032  2905              CMP      r1,#5
000034  d102              BNE      |L4.60|
000036  f0020020          AND      r0,r2,#0x20
00003a  e032              B        |L4.162|
                  |L4.60|
;;;156    	else if(channel==6)	rt=count&USE_CHL_6;
00003c  2906              CMP      r1,#6
00003e  d102              BNE      |L4.70|
000040  f0020040          AND      r0,r2,#0x40
000044  e02d              B        |L4.162|
                  |L4.70|
;;;157    	else if(channel==7)	rt=count&USE_CHL_7;
000046  2907              CMP      r1,#7
000048  d102              BNE      |L4.80|
00004a  f0020080          AND      r0,r2,#0x80
00004e  e028              B        |L4.162|
                  |L4.80|
;;;158    	else if(channel==8)	rt=count&USE_CHL_8;
000050  2908              CMP      r1,#8
000052  d102              BNE      |L4.90|
000054  f4027080          AND      r0,r2,#0x100
000058  e023              B        |L4.162|
                  |L4.90|
;;;159    	else if(channel==9)	rt=count&USE_CHL_9;
00005a  2909              CMP      r1,#9
00005c  d102              BNE      |L4.100|
00005e  f4027000          AND      r0,r2,#0x200
000062  e01e              B        |L4.162|
                  |L4.100|
;;;160    	else if(channel==10)	rt=count&USE_CHL_10;
000064  290a              CMP      r1,#0xa
000066  d102              BNE      |L4.110|
000068  f4026080          AND      r0,r2,#0x400
00006c  e019              B        |L4.162|
                  |L4.110|
;;;161    	else if(channel==11)	rt=count&USE_CHL_11;
00006e  290b              CMP      r1,#0xb
000070  d102              BNE      |L4.120|
000072  f4026000          AND      r0,r2,#0x800
000076  e014              B        |L4.162|
                  |L4.120|
;;;162    	else if(channel==12)	rt=count&USE_CHL_12;
000078  290c              CMP      r1,#0xc
00007a  d102              BNE      |L4.130|
00007c  f4025080          AND      r0,r2,#0x1000
000080  e00f              B        |L4.162|
                  |L4.130|
;;;163    	else if(channel==13)	rt=count&USE_CHL_13;
000082  290d              CMP      r1,#0xd
000084  d102              BNE      |L4.140|
000086  f4025000          AND      r0,r2,#0x2000
00008a  e00a              B        |L4.162|
                  |L4.140|
;;;164    	else if(channel==14)	rt=count&USE_CHL_14;
00008c  290e              CMP      r1,#0xe
00008e  d102              BNE      |L4.150|
000090  f4024080          AND      r0,r2,#0x4000
000094  e005              B        |L4.162|
                  |L4.150|
;;;165    	else if(channel==15)	rt=count&USE_CHL_15;
000096  290f              CMP      r1,#0xf
000098  d102              BNE      |L4.160|
00009a  f4024000          AND      r0,r2,#0x8000
00009e  e000              B        |L4.162|
                  |L4.160|
;;;166    	else                    rt=0;
0000a0  2000              MOVS     r0,#0
                  |L4.162|
;;;167    	
;;;168    	return rt;
;;;169    }
0000a2  4770              BX       lr
;;;170    
                          ENDP


                          AREA ||i.GetQueue_InQ||, CODE, READONLY, ALIGN=1

                  GetQueue_InQ PROC
;;;32     //获取队列进栈指针
;;;33     _Frame* GetQueue_InQ(QueueBUF *queueBuf,unsigned char channel)
000000  4602              MOV      r2,r0
;;;34     {
;;;35     	if(channel>QUEUE_BUF_SIZE)
000002  290c              CMP      r1,#0xc
000004  dd01              BLE      |L5.10|
;;;36     	{
;;;37     		return NULL;
000006  2000              MOVS     r0,#0
                  |L5.8|
;;;38     	}
;;;39     	return &queueBuf->Data[channel];  	
;;;40     }
000008  4770              BX       lr
                  |L5.10|
00000a  2067              MOVS     r0,#0x67              ;39
00000c  4348              MULS     r0,r1,r0              ;39
00000e  f1020308          ADD      r3,r2,#8              ;39
000012  eb030040          ADD      r0,r3,r0,LSL #1       ;39
000016  e7f7              B        |L5.8|
;;;41     
                          ENDP


                          AREA ||i.GetQueue_OutQ||, CODE, READONLY, ALIGN=1

                  GetQueue_OutQ PROC
;;;42     //获取队列出栈指针
;;;43     _Frame* GetQueue_OutQ(QueueBUF *queueBuf,unsigned char *pindex)
000000  b570              PUSH     {r4-r6,lr}
;;;44     {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;45     	unsigned char i;
;;;46     	
;;;47     	//队列为空，直接返回
;;;48     	if(IsQueueBufEmpty(queueBuf))
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       IsQueueBufEmpty
00000c  b108              CBZ      r0,|L6.18|
;;;49     	{
;;;50     			return NULL;
00000e  2000              MOVS     r0,#0
                  |L6.16|
;;;51     	}
;;;52     	
;;;53     	for(i=0;i<QUEUE_BUF_SIZE;i++)
;;;54     	{
;;;55     			queueBuf->index++;
;;;56     			if(queueBuf->index>=QUEUE_BUF_SIZE)queueBuf->index=0;
;;;57     			
;;;58     			if(0!=FoundChannelBIT(queueBuf->count,queueBuf->index))
;;;59     			{
;;;60     				*pindex=queueBuf->index;
;;;61     				return &queueBuf->Data[queueBuf->index];
;;;62     			}
;;;63     			
;;;64     		        /*
;;;65     			if(queueBuf->Data[queueBuf->index].flag==1)
;;;66     			{
;;;67     				rt=queueBuf->index;
;;;68     				queueBuf->index++;
;;;69     				if(queueBuf->index>=QUEUE_BUF_SIZE)queueBuf->index=0;
;;;70     				
;;;71     				return &queueBuf->Data[rt];
;;;72     			}
;;;73     			else
;;;74     			{
;;;75     				queueBuf->index++;
;;;76     				if(queueBuf->index>=QUEUE_BUF_SIZE)queueBuf->index=0;
;;;77     			}
;;;78     			*/
;;;79     	}
;;;80     	
;;;81     	return NULL;	
;;;82     }
000010  bd70              POP      {r4-r6,pc}
                  |L6.18|
000012  2500              MOVS     r5,#0                 ;53
000014  e018              B        |L6.72|
                  |L6.22|
000016  7820              LDRB     r0,[r4,#0]            ;55
000018  1c40              ADDS     r0,r0,#1              ;55
00001a  7020              STRB     r0,[r4,#0]            ;55
00001c  7820              LDRB     r0,[r4,#0]            ;56
00001e  280c              CMP      r0,#0xc               ;56
000020  db01              BLT      |L6.38|
000022  2000              MOVS     r0,#0                 ;56
000024  7020              STRB     r0,[r4,#0]            ;56
                  |L6.38|
000026  7821              LDRB     r1,[r4,#0]            ;58
000028  6860              LDR      r0,[r4,#4]            ;58
00002a  f7fffffe          BL       FoundChannelBIT
00002e  b148              CBZ      r0,|L6.68|
000030  7820              LDRB     r0,[r4,#0]            ;60
000032  7030              STRB     r0,[r6,#0]            ;60
000034  7820              LDRB     r0,[r4,#0]            ;61
000036  2167              MOVS     r1,#0x67              ;61
000038  4348              MULS     r0,r1,r0              ;61
00003a  f1040108          ADD      r1,r4,#8              ;61
00003e  eb010040          ADD      r0,r1,r0,LSL #1       ;61
000042  e7e5              B        |L6.16|
                  |L6.68|
000044  1c68              ADDS     r0,r5,#1              ;53
000046  b2c5              UXTB     r5,r0                 ;53
                  |L6.72|
000048  2d0c              CMP      r5,#0xc               ;53
00004a  dbe4              BLT      |L6.22|
00004c  2000              MOVS     r0,#0                 ;81
00004e  e7df              B        |L6.16|
;;;83     
                          ENDP


                          AREA ||i.InitQueueBUF||, CODE, READONLY, ALIGN=1

                  InitQueueBUF PROC
;;;11     //初始化队列
;;;12     void InitQueueBUF(QueueBUF *queueBuf)
000000  2100              MOVS     r1,#0
;;;13     {
;;;14     	queueBuf->index=0;
000002  7001              STRB     r1,[r0,#0]
;;;15     	queueBuf->count=0;	
000004  6041              STR      r1,[r0,#4]
;;;16     }
000006  4770              BX       lr
;;;17     
                          ENDP


                          AREA ||i.IsQueueBufEmpty||, CODE, READONLY, ALIGN=1

                  IsQueueBufEmpty PROC
;;;18     //队列是否为空
;;;19     unsigned char IsQueueBufEmpty(QueueBUF *queueBuf)
000000  4601              MOV      r1,r0
;;;20     {
;;;21     	return queueBuf->count == 0;  /*队列无元素为空*/
000002  6848              LDR      r0,[r1,#4]
000004  b908              CBNZ     r0,|L8.10|
000006  2001              MOVS     r0,#1
                  |L8.8|
;;;22     }
000008  4770              BX       lr
                  |L8.10|
00000a  2000              MOVS     r0,#0                 ;21
00000c  e7fc              B        |L8.8|
;;;23     
                          ENDP


                          AREA ||i.IsQueueBufFull||, CODE, READONLY, ALIGN=1

                  IsQueueBufFull PROC
;;;24     //队列是否满
;;;25     unsigned char IsQueueBufFull(QueueBUF *queueBuf)
000000  4601              MOV      r1,r0
;;;26     {
;;;27     	//return queueBuf->count == QUEUE_BUF_SIZE;
;;;28     	return 0;
000002  2000              MOVS     r0,#0
;;;29     }
000004  4770              BX       lr
;;;30     
                          ENDP


                          AREA ||i.SetChannelBIT||, CODE, READONLY, ALIGN=1

                  SetChannelBIT PROC
;;;99     
;;;100    static unsigned int SetChannelBIT(unsigned int count,unsigned char channel)
000000  b911              CBNZ     r1,|L10.8|
;;;101    {
;;;102    		if     (channel==0)    count |= USE_CHL_0;
000002  f0400001          ORR      r0,r0,#1
000006  e04b              B        |L10.160|
                  |L10.8|
;;;103    	  else if(channel==1)    count |= USE_CHL_1;
000008  2901              CMP      r1,#1
00000a  d102              BNE      |L10.18|
00000c  f0400002          ORR      r0,r0,#2
000010  e046              B        |L10.160|
                  |L10.18|
;;;104    	  else if(channel==2)    count |= USE_CHL_2;
000012  2902              CMP      r1,#2
000014  d102              BNE      |L10.28|
000016  f0400004          ORR      r0,r0,#4
00001a  e041              B        |L10.160|
                  |L10.28|
;;;105    	  else if(channel==3)    count |= USE_CHL_3;
00001c  2903              CMP      r1,#3
00001e  d102              BNE      |L10.38|
000020  f0400008          ORR      r0,r0,#8
000024  e03c              B        |L10.160|
                  |L10.38|
;;;106    	  else if(channel==4)    count |= USE_CHL_4;
000026  2904              CMP      r1,#4
000028  d102              BNE      |L10.48|
00002a  f0400010          ORR      r0,r0,#0x10
00002e  e037              B        |L10.160|
                  |L10.48|
;;;107    	  else if(channel==5)    count |= USE_CHL_5;
000030  2905              CMP      r1,#5
000032  d102              BNE      |L10.58|
000034  f0400020          ORR      r0,r0,#0x20
000038  e032              B        |L10.160|
                  |L10.58|
;;;108    	  else if(channel==6)    count |= USE_CHL_6;
00003a  2906              CMP      r1,#6
00003c  d102              BNE      |L10.68|
00003e  f0400040          ORR      r0,r0,#0x40
000042  e02d              B        |L10.160|
                  |L10.68|
;;;109    	  else if(channel==7)    count |= USE_CHL_7;
000044  2907              CMP      r1,#7
000046  d102              BNE      |L10.78|
000048  f0400080          ORR      r0,r0,#0x80
00004c  e028              B        |L10.160|
                  |L10.78|
;;;110    	  else if(channel==8)    count |= USE_CHL_8;
00004e  2908              CMP      r1,#8
000050  d102              BNE      |L10.88|
000052  f4407080          ORR      r0,r0,#0x100
000056  e023              B        |L10.160|
                  |L10.88|
;;;111    	  else if(channel==9)    count |= USE_CHL_9;
000058  2909              CMP      r1,#9
00005a  d102              BNE      |L10.98|
00005c  f4407000          ORR      r0,r0,#0x200
000060  e01e              B        |L10.160|
                  |L10.98|
;;;112    	  else if(channel==10)   count |= USE_CHL_10;
000062  290a              CMP      r1,#0xa
000064  d102              BNE      |L10.108|
000066  f4406080          ORR      r0,r0,#0x400
00006a  e019              B        |L10.160|
                  |L10.108|
;;;113    	  else if(channel==11)   count |= USE_CHL_11;
00006c  290b              CMP      r1,#0xb
00006e  d102              BNE      |L10.118|
000070  f4406000          ORR      r0,r0,#0x800
000074  e014              B        |L10.160|
                  |L10.118|
;;;114    	  else if(channel==12)   count |= USE_CHL_12;
000076  290c              CMP      r1,#0xc
000078  d102              BNE      |L10.128|
00007a  f4405080          ORR      r0,r0,#0x1000
00007e  e00f              B        |L10.160|
                  |L10.128|
;;;115    	  else if(channel==13)   count |= USE_CHL_13;
000080  290d              CMP      r1,#0xd
000082  d102              BNE      |L10.138|
000084  f4405000          ORR      r0,r0,#0x2000
000088  e00a              B        |L10.160|
                  |L10.138|
;;;116    	  else if(channel==14)   count |= USE_CHL_14;
00008a  290e              CMP      r1,#0xe
00008c  d102              BNE      |L10.148|
00008e  f4404080          ORR      r0,r0,#0x4000
000092  e005              B        |L10.160|
                  |L10.148|
;;;117    	  else if(channel==15)   count |= USE_CHL_15;
000094  290f              CMP      r1,#0xf
000096  d102              BNE      |L10.158|
000098  f4404000          ORR      r0,r0,#0x8000
00009c  e000              B        |L10.160|
                  |L10.158|
;;;118    	  else                   count = count ;
00009e  bf00              NOP      
                  |L10.160|
;;;119    	
;;;120    	  return count;
;;;121    }
0000a0  4770              BX       lr
;;;122    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\User\\my_queue_chl.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_my_queue_chl_c_3d42a5fa____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_my_queue_chl_c_3d42a5fa____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_my_queue_chl_c_3d42a5fa____REVSH|
#line 128
|__asm___14_my_queue_chl_c_3d42a5fa____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
