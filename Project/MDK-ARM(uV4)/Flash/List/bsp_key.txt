; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\outupt\bsp_key.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=..\outupt\bsp_key.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\outupt\bsp_key.crf ..\..\User\bsp\src\bsp_key.c]
                          THUMB

                          AREA ||i.IsKeyDown1||, CODE, READONLY, ALIGN=2

                  IsKeyDown1 PROC
;;;48     */
;;;49     static uint8_t IsKeyDown1(void)
000000  b510              PUSH     {r4,lr}
;;;50     {
;;;51     	if((GPIO_ReadInputDataBit(GPIO_PORT_KEY1,GPIO_PIN_KEY1)) == 0)
000002  f44f4100          MOV      r1,#0x8000
000006  4804              LDR      r0,|L1.24|
000008  f7fffffe          BL       GPIO_ReadInputDataBit
00000c  b908              CBNZ     r0,|L1.18|
;;;52     	{
;;;53     		return 1;
00000e  2001              MOVS     r0,#1
                  |L1.16|
;;;54     	}
;;;55     	else
;;;56     	{
;;;57     		return 0;
;;;58     	}
;;;59     }
000010  bd10              POP      {r4,pc}
                  |L1.18|
000012  2000              MOVS     r0,#0                 ;57
000014  e7fc              B        |L1.16|
;;;60     	
                          ENDP

000016  0000              DCW      0x0000
                  |L1.24|
                          DCD      0x40010800

                          AREA ||i.bsp_ClearKey||, CODE, READONLY, ALIGN=2

                  bsp_ClearKey PROC
;;;188    */
;;;189    void bsp_ClearKey(void)
000000  4802              LDR      r0,|L2.12|
;;;190    {
;;;191    	s_tKey.Read = s_tKey.Write;
000002  7a40              LDRB     r0,[r0,#9]  ; s_tKey
000004  4901              LDR      r1,|L2.12|
000006  7208              STRB     r0,[r1,#8]
;;;192    }
000008  4770              BX       lr
;;;193    
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      s_tKey

                          AREA ||i.bsp_DetectKey||, CODE, READONLY, ALIGN=2

                  bsp_DetectKey PROC
;;;262    */
;;;263    static void bsp_DetectKey(uint8_t i)
000000  b570              PUSH     {r4-r6,lr}
;;;264    {
000002  4605              MOV      r5,r0
;;;265    	KEY_T *pBtn;
;;;266    
;;;267    	/*
;;;268    		如果没有初始化按键函数，则报错
;;;269    		if (s_tBtn[i].IsKeyDownFunc == 0)
;;;270    		{
;;;271    			while(1);												//等待看门狗复位
;;;272    		}
;;;273    	*/
;;;274    
;;;275    	pBtn = &s_tBtn[i];
000004  4830              LDR      r0,|L3.200|
000006  eb001405          ADD      r4,r0,r5,LSL #4
;;;276    	if (pBtn->IsKeyDownFunc())
00000a  6820              LDR      r0,[r4,#0]
00000c  4780              BLX      r0
00000e  2800              CMP      r0,#0
000010  d03e              BEQ      |L3.144|
;;;277    	{
;;;278    		if (pBtn->Count < KEY_FILTER_TIME)
000012  7920              LDRB     r0,[r4,#4]
000014  280c              CMP      r0,#0xc
000016  da02              BGE      |L3.30|
;;;279    		{
;;;280    			pBtn->Count = KEY_FILTER_TIME;
000018  200c              MOVS     r0,#0xc
00001a  7120              STRB     r0,[r4,#4]
00001c  e052              B        |L3.196|
                  |L3.30|
;;;281    		}
;;;282    		else if(pBtn->Count < 2 * KEY_FILTER_TIME)
00001e  7920              LDRB     r0,[r4,#4]
000020  2818              CMP      r0,#0x18
000022  da03              BGE      |L3.44|
;;;283    		{
;;;284    			pBtn->Count++;
000024  7920              LDRB     r0,[r4,#4]
000026  1c40              ADDS     r0,r0,#1
000028  7120              STRB     r0,[r4,#4]
00002a  e04b              B        |L3.196|
                  |L3.44|
;;;285    		}
;;;286    		else
;;;287    		{
;;;288    			if (pBtn->State == 0)
00002c  7aa0              LDRB     r0,[r4,#0xa]
00002e  b938              CBNZ     r0,|L3.64|
;;;289    			{
;;;290    				pBtn->State = 1;
000030  2001              MOVS     r0,#1
000032  72a0              STRB     r0,[r4,#0xa]
;;;291    
;;;292    				/* 发送按钮按下的消息 */
;;;293    				bsp_PutKey((uint8_t)(3 * i + 1));
000034  eb050145          ADD      r1,r5,r5,LSL #1
000038  1c49              ADDS     r1,r1,#1
00003a  b2c8              UXTB     r0,r1
00003c  f7fffffe          BL       bsp_PutKey
                  |L3.64|
;;;294    			}
;;;295    
;;;296    			if (pBtn->LongTime > 0)
000040  8920              LDRH     r0,[r4,#8]
000042  2800              CMP      r0,#0
000044  dd3e              BLE      |L3.196|
;;;297    			{
;;;298    				if (pBtn->LongCount < pBtn->LongTime)
000046  88e0              LDRH     r0,[r4,#6]
000048  8921              LDRH     r1,[r4,#8]
00004a  4288              CMP      r0,r1
00004c  da0d              BGE      |L3.106|
;;;299    				{
;;;300    					/* 发送按钮持续按下的消息 */
;;;301    					if (++pBtn->LongCount == pBtn->LongTime)
00004e  88e0              LDRH     r0,[r4,#6]
000050  1c40              ADDS     r0,r0,#1
000052  b280              UXTH     r0,r0
000054  80e0              STRH     r0,[r4,#6]
000056  8921              LDRH     r1,[r4,#8]
000058  4288              CMP      r0,r1
00005a  d133              BNE      |L3.196|
;;;302    					{
;;;303    						/* 键值放入按键FIFO */
;;;304    						bsp_PutKey((uint8_t)(3 * i + 3));
00005c  eb050145          ADD      r1,r5,r5,LSL #1
000060  1cc9              ADDS     r1,r1,#3
000062  b2c8              UXTB     r0,r1
000064  f7fffffe          BL       bsp_PutKey
000068  e02c              B        |L3.196|
                  |L3.106|
;;;305    					}
;;;306    				}
;;;307    				else
;;;308    				{
;;;309    					if (pBtn->RepeatSpeed > 0)
00006a  7ae0              LDRB     r0,[r4,#0xb]
00006c  2800              CMP      r0,#0
00006e  dd29              BLE      |L3.196|
;;;310    					{
;;;311    						if (++pBtn->RepeatCount >= pBtn->RepeatSpeed)
000070  7b20              LDRB     r0,[r4,#0xc]
000072  1c40              ADDS     r0,r0,#1
000074  b2c0              UXTB     r0,r0
000076  7320              STRB     r0,[r4,#0xc]
000078  7ae1              LDRB     r1,[r4,#0xb]
00007a  4288              CMP      r0,r1
00007c  db22              BLT      |L3.196|
;;;312    						{
;;;313    							pBtn->RepeatCount = 0;
00007e  2000              MOVS     r0,#0
000080  7320              STRB     r0,[r4,#0xc]
;;;314    							/* 常按键后，每隔10ms发送1个按键 */
;;;315    							bsp_PutKey((uint8_t)(3 * i + 1));
000082  eb050145          ADD      r1,r5,r5,LSL #1
000086  1c49              ADDS     r1,r1,#1
000088  b2c8              UXTB     r0,r1
00008a  f7fffffe          BL       bsp_PutKey
00008e  e019              B        |L3.196|
                  |L3.144|
;;;316    						}
;;;317    					}
;;;318    				}
;;;319    			}
;;;320    		}
;;;321    	}
;;;322    	else
;;;323    	{
;;;324    		if(pBtn->Count > KEY_FILTER_TIME)
000090  7920              LDRB     r0,[r4,#4]
000092  280c              CMP      r0,#0xc
000094  dd02              BLE      |L3.156|
;;;325    		{
;;;326    			pBtn->Count = KEY_FILTER_TIME;
000096  200c              MOVS     r0,#0xc
000098  7120              STRB     r0,[r4,#4]
00009a  e010              B        |L3.190|
                  |L3.156|
;;;327    		}
;;;328    		else if(pBtn->Count != 0)
00009c  7920              LDRB     r0,[r4,#4]
00009e  b118              CBZ      r0,|L3.168|
;;;329    		{
;;;330    			pBtn->Count--;
0000a0  7920              LDRB     r0,[r4,#4]
0000a2  1e40              SUBS     r0,r0,#1
0000a4  7120              STRB     r0,[r4,#4]
0000a6  e00a              B        |L3.190|
                  |L3.168|
;;;331    		}
;;;332    		else
;;;333    		{
;;;334    			if (pBtn->State == 1)
0000a8  7aa0              LDRB     r0,[r4,#0xa]
0000aa  2801              CMP      r0,#1
0000ac  d107              BNE      |L3.190|
;;;335    			{
;;;336    				pBtn->State = 0;
0000ae  2000              MOVS     r0,#0
0000b0  72a0              STRB     r0,[r4,#0xa]
;;;337    
;;;338    				/* 发送按钮弹起的消息 */
;;;339    				bsp_PutKey((uint8_t)(3 * i + 2));
0000b2  eb050145          ADD      r1,r5,r5,LSL #1
0000b6  1c89              ADDS     r1,r1,#2
0000b8  b2c8              UXTB     r0,r1
0000ba  f7fffffe          BL       bsp_PutKey
                  |L3.190|
;;;340    			}
;;;341    		}
;;;342    
;;;343    		pBtn->LongCount = 0;
0000be  2000              MOVS     r0,#0
0000c0  80e0              STRH     r0,[r4,#6]
;;;344    		pBtn->RepeatCount = 0;
0000c2  7320              STRB     r0,[r4,#0xc]
                  |L3.196|
;;;345    	}
;;;346    }
0000c4  bd70              POP      {r4-r6,pc}
;;;347    
                          ENDP

0000c6  0000              DCW      0x0000
                  |L3.200|
                          DCD      s_tBtn

                          AREA ||i.bsp_GetKey||, CODE, READONLY, ALIGN=2

                  bsp_GetKey PROC
;;;101    */
;;;102    uint8_t bsp_GetKey(void)
000000  480b              LDR      r0,|L4.48|
;;;103    {
;;;104    	uint8_t ret;
;;;105    
;;;106    	if (s_tKey.Read == s_tKey.Write)
000002  7a00              LDRB     r0,[r0,#8]  ; s_tKey
000004  4a0a              LDR      r2,|L4.48|
000006  7a52              LDRB     r2,[r2,#9]  ; s_tKey
000008  4290              CMP      r0,r2
00000a  d101              BNE      |L4.16|
;;;107    	{
;;;108    		return KEY_NONE;
00000c  2000              MOVS     r0,#0
                  |L4.14|
;;;109    	}
;;;110    	else
;;;111    	{
;;;112    		ret = s_tKey.Buf[s_tKey.Read];
;;;113    
;;;114    		if (++s_tKey.Read >= KEY_FIFO_SIZE)
;;;115    		{
;;;116    			s_tKey.Read = 0;
;;;117    		}
;;;118    		return ret;
;;;119    	}
;;;120    }
00000e  4770              BX       lr
                  |L4.16|
000010  4807              LDR      r0,|L4.48|
000012  7a00              LDRB     r0,[r0,#8]            ;112  ; s_tKey
000014  4a06              LDR      r2,|L4.48|
000016  5c11              LDRB     r1,[r2,r0]            ;112
000018  4610              MOV      r0,r2                 ;114
00001a  7a00              LDRB     r0,[r0,#8]            ;114  ; s_tKey
00001c  1c40              ADDS     r0,r0,#1              ;114
00001e  b2c0              UXTB     r0,r0                 ;114
000020  7210              STRB     r0,[r2,#8]            ;114
000022  2808              CMP      r0,#8                 ;114
000024  db01              BLT      |L4.42|
000026  2000              MOVS     r0,#0                 ;116
000028  7210              STRB     r0,[r2,#8]            ;116
                  |L4.42|
00002a  4608              MOV      r0,r1                 ;118
00002c  e7ef              B        |L4.14|
;;;121    
                          ENDP

00002e  0000              DCW      0x0000
                  |L4.48|
                          DCD      s_tKey

                          AREA ||i.bsp_GetKey2||, CODE, READONLY, ALIGN=2

                  bsp_GetKey2 PROC
;;;129    */
;;;130    uint8_t bsp_GetKey2(void)
000000  480b              LDR      r0,|L5.48|
;;;131    {
;;;132    	uint8_t ret;
;;;133    
;;;134    	if (s_tKey.Read2 == s_tKey.Write)
000002  7a80              LDRB     r0,[r0,#0xa]  ; s_tKey
000004  4a0a              LDR      r2,|L5.48|
000006  7a52              LDRB     r2,[r2,#9]  ; s_tKey
000008  4290              CMP      r0,r2
00000a  d101              BNE      |L5.16|
;;;135    	{
;;;136    		return KEY_NONE;
00000c  2000              MOVS     r0,#0
                  |L5.14|
;;;137    	}
;;;138    	else
;;;139    	{
;;;140    		ret = s_tKey.Buf[s_tKey.Read2];
;;;141    
;;;142    		if (++s_tKey.Read2 >= KEY_FIFO_SIZE)
;;;143    		{
;;;144    			s_tKey.Read2 = 0;
;;;145    		}
;;;146    		return ret;
;;;147    	}
;;;148    }
00000e  4770              BX       lr
                  |L5.16|
000010  4807              LDR      r0,|L5.48|
000012  7a80              LDRB     r0,[r0,#0xa]          ;140  ; s_tKey
000014  4a06              LDR      r2,|L5.48|
000016  5c11              LDRB     r1,[r2,r0]            ;140
000018  4610              MOV      r0,r2                 ;142
00001a  7a80              LDRB     r0,[r0,#0xa]          ;142  ; s_tKey
00001c  1c40              ADDS     r0,r0,#1              ;142
00001e  b2c0              UXTB     r0,r0                 ;142
000020  7290              STRB     r0,[r2,#0xa]          ;142
000022  2808              CMP      r0,#8                 ;142
000024  db01              BLT      |L5.42|
000026  2000              MOVS     r0,#0                 ;144
000028  7290              STRB     r0,[r2,#0xa]          ;144
                  |L5.42|
00002a  4608              MOV      r0,r1                 ;146
00002c  e7ef              B        |L5.14|
;;;149    
                          ENDP

00002e  0000              DCW      0x0000
                  |L5.48|
                          DCD      s_tKey

                          AREA ||i.bsp_GetKeyState||, CODE, READONLY, ALIGN=2

                  bsp_GetKeyState PROC
;;;157    */
;;;158    uint8_t bsp_GetKeyState(KEY_ID_E _ucKeyID)
000000  4601              MOV      r1,r0
;;;159    {
;;;160    	return s_tBtn[_ucKeyID].State;
000002  4802              LDR      r0,|L6.12|
000004  eb001001          ADD      r0,r0,r1,LSL #4
000008  7a80              LDRB     r0,[r0,#0xa]
;;;161    }
00000a  4770              BX       lr
;;;162    
                          ENDP

                  |L6.12|
                          DCD      s_tBtn

                          AREA ||i.bsp_InitKey||, CODE, READONLY, ALIGN=1

                  bsp_InitKey PROC
;;;69     */
;;;70     void bsp_InitKey(void)
000000  b510              PUSH     {r4,lr}
;;;71     {
;;;72     	bsp_InitKeyVar();		/* 初始化按键变量 */
000002  f7fffffe          BL       bsp_InitKeyVar
;;;73     	bsp_InitKeyHard();		/* 初始化按键硬件 */
000006  f7fffffe          BL       bsp_InitKeyHard
;;;74     }
00000a  bd10              POP      {r4,pc}
;;;75     
                          ENDP


                          AREA ||i.bsp_InitKeyHard||, CODE, READONLY, ALIGN=2

                  bsp_InitKeyHard PROC
;;;201    */
;;;202    static void bsp_InitKeyHard(void)
000000  b508              PUSH     {r3,lr}
;;;203    {
;;;204    	GPIO_InitTypeDef GPIO_InitStructure;
;;;205    
;;;206    	// 第1步：打开GPIO时钟 
;;;207    	RCC_APB2PeriphClockCmd(RCC_GPIO_ALL, ENABLE);
000002  2101              MOVS     r1,#1
000004  2004              MOVS     r0,#4
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;208    	
;;;209    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00000a  2003              MOVS     r0,#3
00000c  f88d0002          STRB     r0,[sp,#2]
;;;210    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;	// 输入浮空模式 
000010  2004              MOVS     r0,#4
000012  f88d0003          STRB     r0,[sp,#3]
;;;211    	
;;;212    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_KEY1;
000016  0340              LSLS     r0,r0,#13
000018  f8ad0000          STRH     r0,[sp,#0]
;;;213    	GPIO_Init(GPIO_PORT_KEY1, &GPIO_InitStructure);
00001c  4669              MOV      r1,sp
00001e  4802              LDR      r0,|L8.40|
000020  f7fffffe          BL       GPIO_Init
;;;214    }
000024  bd08              POP      {r3,pc}
;;;215    
                          ENDP

000026  0000              DCW      0x0000
                  |L8.40|
                          DCD      0x40010800

                          AREA ||i.bsp_InitKeyVar||, CODE, READONLY, ALIGN=2

                  bsp_InitKeyVar PROC
;;;223    */
;;;224    static void bsp_InitKeyVar(void)
000000  2100              MOVS     r1,#0
;;;225    {
;;;226    	uint8_t i;
;;;227    
;;;228    	/* 对按键FIFO读写指针清零 */
;;;229    	s_tKey.Read = 0;
000002  4a14              LDR      r2,|L9.84|
000004  7211              STRB     r1,[r2,#8]
;;;230    	s_tKey.Write = 0;
000006  7251              STRB     r1,[r2,#9]
;;;231    	s_tKey.Read2 = 0;
000008  7291              STRB     r1,[r2,#0xa]
;;;232    
;;;233    	/* 给每个按键结构体成员变量赋一组缺省值 */
;;;234    	for (i = 0; i < KEY_COUNT; i++)
00000a  2000              MOVS     r0,#0
00000c  e019              B        |L9.66|
                  |L9.14|
;;;235    	{
;;;236    		s_tBtn[i].LongTime = KEY_LONG_TIME;			/* 长按时间 0 表示不检测长按键事件 */
00000e  f44f7148          MOV      r1,#0x320
000012  4a11              LDR      r2,|L9.88|
000014  eb021200          ADD      r2,r2,r0,LSL #4
000018  8111              STRH     r1,[r2,#8]
;;;237    		s_tBtn[i].Count = KEY_FILTER_TIME / 2;		/* 计数器设置为滤波时间的一半 */
00001a  2106              MOVS     r1,#6
00001c  4a0e              LDR      r2,|L9.88|
00001e  eb021200          ADD      r2,r2,r0,LSL #4
000022  7111              STRB     r1,[r2,#4]
;;;238    		s_tBtn[i].State = 0;							/* 按键缺省状态，0为未按下 */
000024  2100              MOVS     r1,#0
000026  4a0c              LDR      r2,|L9.88|
000028  eb021200          ADD      r2,r2,r0,LSL #4
00002c  7291              STRB     r1,[r2,#0xa]
;;;239    		//s_tBtn[i].KeyCodeDown = 3 * i + 1;				/* 按键按下的键值代码 */
;;;240    		//s_tBtn[i].KeyCodeUp   = 3 * i + 2;				/* 按键弹起的键值代码 */
;;;241    		//s_tBtn[i].KeyCodeLong = 3 * i + 3;				/* 按键被持续按下的键值代码 */
;;;242    		s_tBtn[i].RepeatSpeed = 0;						/* 按键连发的速度，0表示不支持连发 */
00002e  4a0a              LDR      r2,|L9.88|
000030  eb021200          ADD      r2,r2,r0,LSL #4
000034  72d1              STRB     r1,[r2,#0xb]
;;;243    		s_tBtn[i].RepeatCount = 0;						/* 连发计数器 */
000036  4a08              LDR      r2,|L9.88|
000038  eb021200          ADD      r2,r2,r0,LSL #4
00003c  7311              STRB     r1,[r2,#0xc]
00003e  1c41              ADDS     r1,r0,#1              ;234
000040  b2c8              UXTB     r0,r1                 ;234
                  |L9.66|
000042  2801              CMP      r0,#1                 ;234
000044  dbe3              BLT      |L9.14|
;;;244    	}
;;;245    
;;;246    	/* 如果需要单独更改某个按键的参数，可以在此单独重新赋值 */
;;;247    	/* 比如，我们希望按键1按下超过1秒后，自动重发相同键值 */
;;;248    	//s_tBtn[0].LongTime = 200;
;;;249      s_tBtn[0].RepeatSpeed = 0;	/* 每隔50ms自动发送键值 */
000046  2100              MOVS     r1,#0
000048  4a03              LDR      r2,|L9.88|
00004a  72d1              STRB     r1,[r2,#0xb]
;;;250    
;;;251    	s_tBtn[0].IsKeyDownFunc = IsKeyDown1;
00004c  4903              LDR      r1,|L9.92|
00004e  6011              STR      r1,[r2,#0]  ; s_tBtn
;;;252    
;;;253    }
000050  4770              BX       lr
;;;254    
                          ENDP

000052  0000              DCW      0x0000
                  |L9.84|
                          DCD      s_tKey
                  |L9.88|
                          DCD      s_tBtn
                  |L9.92|
                          DCD      IsKeyDown1

                          AREA ||i.bsp_KeyScan||, CODE, READONLY, ALIGN=1

                  bsp_KeyScan PROC
;;;355    */
;;;356    void bsp_KeyScan(void)
000000  b510              PUSH     {r4,lr}
;;;357    {
;;;358    	uint8_t i;
;;;359    
;;;360    	for (i = 0; i < KEY_COUNT; i++)
000002  2400              MOVS     r4,#0
000004  e004              B        |L10.16|
                  |L10.6|
;;;361    	{
;;;362    		bsp_DetectKey(i);
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       bsp_DetectKey
00000c  1c60              ADDS     r0,r4,#1              ;360
00000e  b2c4              UXTB     r4,r0                 ;360
                  |L10.16|
000010  2c01              CMP      r4,#1                 ;360
000012  dbf8              BLT      |L10.6|
;;;363    	}
;;;364    }
000014  bd10              POP      {r4,pc}
;;;365    
                          ENDP


                          AREA ||i.bsp_PutKey||, CODE, READONLY, ALIGN=2

                  bsp_PutKey PROC
;;;83     */
;;;84     void bsp_PutKey(uint8_t _KeyCode)
000000  4906              LDR      r1,|L11.28|
;;;85     {
;;;86     	s_tKey.Buf[s_tKey.Write] = _KeyCode;
000002  7a49              LDRB     r1,[r1,#9]  ; s_tKey
000004  4a05              LDR      r2,|L11.28|
000006  5450              STRB     r0,[r2,r1]
;;;87     
;;;88     	if (++s_tKey.Write  >= KEY_FIFO_SIZE)
000008  4611              MOV      r1,r2
00000a  7a49              LDRB     r1,[r1,#9]  ; s_tKey
00000c  1c49              ADDS     r1,r1,#1
00000e  b2c9              UXTB     r1,r1
000010  7251              STRB     r1,[r2,#9]
000012  2908              CMP      r1,#8
000014  db01              BLT      |L11.26|
;;;89     	{
;;;90     		s_tKey.Write = 0;
000016  2100              MOVS     r1,#0
000018  7251              STRB     r1,[r2,#9]
                  |L11.26|
;;;91     	}
;;;92     }
00001a  4770              BX       lr
;;;93     
                          ENDP

                  |L11.28|
                          DCD      s_tKey

                          AREA ||i.bsp_SetKeyParam||, CODE, READONLY, ALIGN=2

                  bsp_SetKeyParam PROC
;;;172    */
;;;173    void bsp_SetKeyParam(uint8_t _ucKeyID, uint16_t _LongTime, uint8_t  _RepeatSpeed)
000000  b510              PUSH     {r4,lr}
;;;174    {
;;;175    	s_tBtn[_ucKeyID].LongTime = _LongTime;			/* 长按时间 0 表示不检测长按键事件 */
000002  4b07              LDR      r3,|L12.32|
000004  eb031300          ADD      r3,r3,r0,LSL #4
000008  8119              STRH     r1,[r3,#8]
;;;176    	s_tBtn[_ucKeyID].RepeatSpeed = _RepeatSpeed;			/* 按键连发的速度，0表示不支持连发 */
00000a  4b05              LDR      r3,|L12.32|
00000c  eb031300          ADD      r3,r3,r0,LSL #4
000010  72da              STRB     r2,[r3,#0xb]
;;;177    	s_tBtn[_ucKeyID].RepeatCount = 0;						/* 连发计数器 */
000012  2300              MOVS     r3,#0
000014  4c02              LDR      r4,|L12.32|
000016  eb041400          ADD      r4,r4,r0,LSL #4
00001a  7323              STRB     r3,[r4,#0xc]
;;;178    }
00001c  bd10              POP      {r4,pc}
;;;179    
                          ENDP

00001e  0000              DCW      0x0000
                  |L12.32|
                          DCD      s_tBtn

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  s_tBtn
                          %        16
                  s_tKey
                          %        11

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_key.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_bsp_key_c_dc6aca1d____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_bsp_key_c_dc6aca1d____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_bsp_key_c_dc6aca1d____REVSH|
#line 128
|__asm___9_bsp_key_c_dc6aca1d____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
