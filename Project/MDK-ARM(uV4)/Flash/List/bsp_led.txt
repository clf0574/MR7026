; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\outupt\bsp_led.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=..\outupt\bsp_led.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\outupt\bsp_led.crf ..\..\User\bsp\src\bsp_led.C]
                          THUMB

                          AREA ||i.Led_set||, CODE, READONLY, ALIGN=2

                  Led_set PROC
;;;191    ******************************************************************/
;;;192    void Led_set(unsigned char index,unsigned char ON_t,unsigned char OFF_t,unsigned char cnt,unsigned char type)
000000  b570              PUSH     {r4-r6,lr}
;;;193    {
000002  9c04              LDR      r4,[sp,#0x10]
;;;194    	if(index>=LED_NUM)return;
000004  2802              CMP      r0,#2
000006  db00              BLT      |L1.10|
                  |L1.8|
;;;195    
;;;196    	 LED[index].ON_time=ON_t;
;;;197    	 LED[index].OFF_time=OFF_t;
;;;198      	 LED[index].back_ON_time=ON_t;
;;;199      	 LED[index].back_OFF_time=OFF_t;
;;;200      	 LED[index].count=cnt;
;;;201    	LED[index].ON_OFF=1;
;;;202    	LED[index].half=0;
;;;203    
;;;204    	 if(type==0)LED[index].stu=LED[index].ON_OFF;
;;;205    	 else if(type==1)LED[index].stu=1;
;;;206    	 else if(type==2)LED[index].stu=0;
;;;207    }
000008  bd70              POP      {r4-r6,pc}
                  |L1.10|
00000a  4d1b              LDR      r5,|L1.120|
00000c  f8051030          STRB     r1,[r5,r0,LSL #3]     ;196
000010  eb0505c0          ADD      r5,r5,r0,LSL #3       ;197
000014  706a              STRB     r2,[r5,#1]            ;197
000016  4d18              LDR      r5,|L1.120|
000018  eb0505c0          ADD      r5,r5,r0,LSL #3       ;198
00001c  70e9              STRB     r1,[r5,#3]            ;198
00001e  4d16              LDR      r5,|L1.120|
000020  eb0505c0          ADD      r5,r5,r0,LSL #3       ;199
000024  712a              STRB     r2,[r5,#4]            ;199
000026  4d14              LDR      r5,|L1.120|
000028  eb0505c0          ADD      r5,r5,r0,LSL #3       ;200
00002c  70ab              STRB     r3,[r5,#2]            ;200
00002e  2501              MOVS     r5,#1                 ;201
000030  4e11              LDR      r6,|L1.120|
000032  eb0606c0          ADD      r6,r6,r0,LSL #3       ;201
000036  7175              STRB     r5,[r6,#5]            ;201
000038  2500              MOVS     r5,#0                 ;202
00003a  4e0f              LDR      r6,|L1.120|
00003c  eb0606c0          ADD      r6,r6,r0,LSL #3       ;202
000040  71f5              STRB     r5,[r6,#7]            ;202
000042  b944              CBNZ     r4,|L1.86|
000044  4d0c              LDR      r5,|L1.120|
000046  eb0505c0          ADD      r5,r5,r0,LSL #3       ;204
00004a  796d              LDRB     r5,[r5,#5]            ;204
00004c  4e0a              LDR      r6,|L1.120|
00004e  eb0606c0          ADD      r6,r6,r0,LSL #3       ;204
000052  71b5              STRB     r5,[r6,#6]            ;204
000054  e00e              B        |L1.116|
                  |L1.86|
000056  2c01              CMP      r4,#1                 ;205
000058  d105              BNE      |L1.102|
00005a  2501              MOVS     r5,#1                 ;205
00005c  4e06              LDR      r6,|L1.120|
00005e  eb0606c0          ADD      r6,r6,r0,LSL #3       ;205
000062  71b5              STRB     r5,[r6,#6]            ;205
000064  e006              B        |L1.116|
                  |L1.102|
000066  2c02              CMP      r4,#2                 ;206
000068  d104              BNE      |L1.116|
00006a  2500              MOVS     r5,#0                 ;206
00006c  4e02              LDR      r6,|L1.120|
00006e  eb0606c0          ADD      r6,r6,r0,LSL #3       ;206
000072  71b5              STRB     r5,[r6,#6]            ;206
                  |L1.116|
000074  bf00              NOP      
000076  e7c7              B        |L1.8|
;;;208    /*********************************dooya****************************
                          ENDP

                  |L1.120|
                          DCD      LED

                          AREA ||i.bsp_InitLed||, CODE, READONLY, ALIGN=2

                  bsp_InitLed PROC
;;;47     */
;;;48     void bsp_InitLed(void)
000000  b538              PUSH     {r3-r5,lr}
;;;49     {
;;;50     	GPIO_InitTypeDef GPIO_InitStructure;
;;;51     	uint8_t i;
;;;52     
;;;53     	/* 打开GPIO时钟 */
;;;54     	RCC_APB2PeriphClockCmd(RCC_ALL_LED, ENABLE);
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;55     
;;;56     	/*
;;;57     		配置所有的LED指示灯GPIO为推挽输出模式
;;;58     		由于将GPIO设置为输出时，GPIO输出寄存器的值缺省是0，因此会驱动LED点亮.
;;;59     		这是我不希望的，因此在改变GPIO为输出前，先关闭LED指示灯
;;;60     	*/
;;;61     
;;;62     // 		  //屏蔽JTAG功能，使用对应IO,SW正常使用
;;;63     // 	DBGMCU->CR = DBGMCU->CR & ~((unsigned int)1<<5);
;;;64     // 	GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable,ENABLE);
;;;65     
;;;66     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;		/* 设为输出口 */
00000a  2010              MOVS     r0,#0x10
00000c  f88d0003          STRB     r0,[sp,#3]
;;;67     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	/* IO口最大速度 */
000010  2003              MOVS     r0,#3
000012  f88d0002          STRB     r0,[sp,#2]
;;;68     
;;;69     	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LED1;
000016  2010              MOVS     r0,#0x10
000018  f8ad0000          STRH     r0,[sp,#0]
;;;70     	GPIO_Init(GPIO_PORT_LED1, &GPIO_InitStructure);
00001c  4669              MOV      r1,sp
00001e  4818              LDR      r0,|L2.128|
000020  f7fffffe          BL       GPIO_Init
;;;71     
;;;72       GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LED2;
000024  2008              MOVS     r0,#8
000026  f8ad0000          STRH     r0,[sp,#0]
;;;73     	GPIO_Init(GPIO_PORT_LED2, &GPIO_InitStructure);
00002a  4669              MOV      r1,sp
00002c  4814              LDR      r0,|L2.128|
00002e  f7fffffe          BL       GPIO_Init
;;;74     	
;;;75     	for(i=0;i<LED_NUM;i++)
000032  2400              MOVS     r4,#0
000034  e020              B        |L2.120|
                  |L2.54|
;;;76     	 {
;;;77     		  LED[i].ON_time=0;
000036  2000              MOVS     r0,#0
000038  4912              LDR      r1,|L2.132|
00003a  f8010034          STRB     r0,[r1,r4,LSL #3]
;;;78     		  LED[i].OFF_time=0;
00003e  eb0101c4          ADD      r1,r1,r4,LSL #3
000042  7048              STRB     r0,[r1,#1]
;;;79     		  LED[i].count=0;
000044  490f              LDR      r1,|L2.132|
000046  eb0101c4          ADD      r1,r1,r4,LSL #3
00004a  7088              STRB     r0,[r1,#2]
;;;80     		  LED[i].back_ON_time=0;
00004c  490d              LDR      r1,|L2.132|
00004e  eb0101c4          ADD      r1,r1,r4,LSL #3
000052  70c8              STRB     r0,[r1,#3]
;;;81     		  LED[i].back_OFF_time=0;
000054  490b              LDR      r1,|L2.132|
000056  eb0101c4          ADD      r1,r1,r4,LSL #3
00005a  7108              STRB     r0,[r1,#4]
;;;82     		  LED[i].ON_OFF=0;
00005c  4909              LDR      r1,|L2.132|
00005e  eb0101c4          ADD      r1,r1,r4,LSL #3
000062  7148              STRB     r0,[r1,#5]
;;;83     		  LED[i].stu=0;
000064  4907              LDR      r1,|L2.132|
000066  eb0101c4          ADD      r1,r1,r4,LSL #3
00006a  7188              STRB     r0,[r1,#6]
;;;84     		  bsp_LedOn(i+1);
00006c  1c61              ADDS     r1,r4,#1
00006e  b2c8              UXTB     r0,r1
000070  f7fffffe          BL       bsp_LedOn
000074  1c60              ADDS     r0,r4,#1              ;75
000076  b2c4              UXTB     r4,r0                 ;75
                  |L2.120|
000078  2c02              CMP      r4,#2                 ;75
00007a  dbdc              BLT      |L2.54|
;;;85     	 }
;;;86     
;;;87     	 
;;;88     }
00007c  bd38              POP      {r3-r5,pc}
;;;89     
                          ENDP

00007e  0000              DCW      0x0000
                  |L2.128|
                          DCD      0x40010c00
                  |L2.132|
                          DCD      LED

                          AREA ||i.bsp_IsLedOn||, CODE, READONLY, ALIGN=2

                  bsp_IsLedOn PROC
;;;165    */
;;;166    uint8_t bsp_IsLedOn(uint8_t _no)
000000  4601              MOV      r1,r0
;;;167    {
;;;168    	if (_no == 1)
000002  2901              CMP      r1,#1
000004  d108              BNE      |L3.24|
;;;169    	{
;;;170    		if ((GPIO_PORT_LED1->ODR & GPIO_PIN_LED1) == 0)
000006  480b              LDR      r0,|L3.52|
000008  6800              LDR      r0,[r0,#0]
00000a  f0100f10          TST      r0,#0x10
00000e  d101              BNE      |L3.20|
;;;171    		{
;;;172    			return 1;
000010  2001              MOVS     r0,#1
                  |L3.18|
;;;173    		}
;;;174    		return 0;
;;;175    	}
;;;176    	else if (_no == 2)
;;;177    	{
;;;178    		if ((GPIO_PORT_LED2->ODR & GPIO_PIN_LED2) == 0)
;;;179    		{
;;;180    			return 1;
;;;181    		}
;;;182    		return 0;
;;;183    	}
;;;184    
;;;185    	return 0;
;;;186    }
000012  4770              BX       lr
                  |L3.20|
000014  2000              MOVS     r0,#0                 ;174
000016  e7fc              B        |L3.18|
                  |L3.24|
000018  2902              CMP      r1,#2                 ;176
00001a  d108              BNE      |L3.46|
00001c  4805              LDR      r0,|L3.52|
00001e  6800              LDR      r0,[r0,#0]            ;178
000020  f0100f08          TST      r0,#8                 ;178
000024  d101              BNE      |L3.42|
000026  2001              MOVS     r0,#1                 ;180
000028  e7f3              B        |L3.18|
                  |L3.42|
00002a  2000              MOVS     r0,#0                 ;182
00002c  e7f1              B        |L3.18|
                  |L3.46|
00002e  2000              MOVS     r0,#0                 ;185
000030  e7ef              B        |L3.18|
;;;187    
                          ENDP

000032  0000              DCW      0x0000
                  |L3.52|
                          DCD      0x40010c0c

                          AREA ||i.bsp_LedOff||, CODE, READONLY, ALIGN=2

                  bsp_LedOff PROC
;;;97     */
;;;98     void bsp_LedOff(uint8_t _no)
000000  1e41              SUBS     r1,r0,#1
;;;99     {
;;;100    	_no--;
000002  b2c8              UXTB     r0,r1
;;;101    
;;;102    	if (_no == 0)
000004  b918              CBNZ     r0,|L4.14|
;;;103    	{
;;;104    		GPIO_PORT_LED1->BSRR = GPIO_PIN_LED1;
000006  2110              MOVS     r1,#0x10
000008  4a04              LDR      r2,|L4.28|
00000a  6011              STR      r1,[r2,#0]
00000c  e004              B        |L4.24|
                  |L4.14|
;;;105    	}
;;;106    	else if (_no == 1)
00000e  2801              CMP      r0,#1
000010  d102              BNE      |L4.24|
;;;107    	{
;;;108    		GPIO_PORT_LED2->BSRR = GPIO_PIN_LED2;
000012  2108              MOVS     r1,#8
000014  4a01              LDR      r2,|L4.28|
000016  6011              STR      r1,[r2,#0]
                  |L4.24|
;;;109    	}
;;;110    
;;;111    }
000018  4770              BX       lr
;;;112    
                          ENDP

00001a  0000              DCW      0x0000
                  |L4.28|
                          DCD      0x40010c10

                          AREA ||i.bsp_LedOn||, CODE, READONLY, ALIGN=2

                  bsp_LedOn PROC
;;;120    */
;;;121    void bsp_LedOn(uint8_t _no)
000000  1e41              SUBS     r1,r0,#1
;;;122    {
;;;123    	_no--;
000002  b2c8              UXTB     r0,r1
;;;124    
;;;125    	if (_no == 0)
000004  b918              CBNZ     r0,|L5.14|
;;;126    	{
;;;127    		GPIO_PORT_LED1->BRR = GPIO_PIN_LED1;
000006  2110              MOVS     r1,#0x10
000008  4a04              LDR      r2,|L5.28|
00000a  6011              STR      r1,[r2,#0]
00000c  e004              B        |L5.24|
                  |L5.14|
;;;128    	}
;;;129    	else if (_no == 1)
00000e  2801              CMP      r0,#1
000010  d102              BNE      |L5.24|
;;;130    	{
;;;131    		GPIO_PORT_LED2->BRR = GPIO_PIN_LED2;
000012  2108              MOVS     r1,#8
000014  4a01              LDR      r2,|L5.28|
000016  6011              STR      r1,[r2,#0]
                  |L5.24|
;;;132    	}
;;;133    
;;;134    }
000018  4770              BX       lr
;;;135    
                          ENDP

00001a  0000              DCW      0x0000
                  |L5.28|
                          DCD      0x40010c14

                          AREA ||i.bsp_LedToggle||, CODE, READONLY, ALIGN=2

                  bsp_LedToggle PROC
;;;143    */
;;;144    void bsp_LedToggle(uint8_t _no)
000000  2801              CMP      r0,#1
;;;145    {
;;;146    	if (_no == 1)
000002  d106              BNE      |L6.18|
;;;147    	{
;;;148    		GPIO_PORT_LED1->ODR ^= GPIO_PIN_LED1;
000004  4907              LDR      r1,|L6.36|
000006  6809              LDR      r1,[r1,#0]
000008  f0810110          EOR      r1,r1,#0x10
00000c  4a05              LDR      r2,|L6.36|
00000e  6011              STR      r1,[r2,#0]
000010  e007              B        |L6.34|
                  |L6.18|
;;;149    	}
;;;150    
;;;151    	else if (_no == 2)
000012  2802              CMP      r0,#2
000014  d105              BNE      |L6.34|
;;;152    	{
;;;153    		GPIO_PORT_LED2->ODR ^= GPIO_PIN_LED2;
000016  4903              LDR      r1,|L6.36|
000018  6809              LDR      r1,[r1,#0]
00001a  f0810108          EOR      r1,r1,#8
00001e  4a01              LDR      r2,|L6.36|
000020  6011              STR      r1,[r2,#0]
                  |L6.34|
;;;154    	}
;;;155    
;;;156    }
000022  4770              BX       lr
;;;157    
                          ENDP

                  |L6.36|
                          DCD      0x40010c0c

                          AREA ||i.led_run||, CODE, READONLY, ALIGN=2

                  led_run PROC
;;;210    ******************************************************************/
;;;211    void led_run(void)
000000  b500              PUSH     {lr}
;;;212    {
;;;213        unsigned char i;
;;;214    
;;;215        //=======================================================================================
;;;216    	//逻辑控制
;;;217    	//if(Flag.f_LED_tick==1)
;;;218        {
;;;219    		//Flag.f_LED_tick=0;
;;;220    		for(i=0;i<LED_NUM;i++)
000002  2300              MOVS     r3,#0
000004  e095              B        |L7.306|
                  |L7.6|
;;;221    		{
;;;222    			if(LED[i].count!=0)
000006  4857              LDR      r0,|L7.356|
000008  eb0000c3          ADD      r0,r0,r3,LSL #3
00000c  7880              LDRB     r0,[r0,#2]
00000e  2800              CMP      r0,#0
000010  d07d              BEQ      |L7.270|
;;;223    			{
;;;224    			//原先是灭的
;;;225    			if((LED[i].ON_OFF)==0)
000012  4854              LDR      r0,|L7.356|
000014  eb0000c3          ADD      r0,r0,r3,LSL #3
000018  7940              LDRB     r0,[r0,#5]
00001a  bb58              CBNZ     r0,|L7.116|
;;;226    			{
;;;227    				if(LED[i].OFF_time>0)
00001c  4851              LDR      r0,|L7.356|
00001e  eb0000c3          ADD      r0,r0,r3,LSL #3
000022  7840              LDRB     r0,[r0,#1]
000024  2800              CMP      r0,#0
000026  dd0f              BLE      |L7.72|
;;;228    				{
;;;229    					if(LED[i].OFF_time!=LOOP)LED[i].OFF_time--;
000028  484e              LDR      r0,|L7.356|
00002a  eb0000c3          ADD      r0,r0,r3,LSL #3
00002e  7840              LDRB     r0,[r0,#1]
000030  28ff              CMP      r0,#0xff
000032  d01f              BEQ      |L7.116|
000034  484b              LDR      r0,|L7.356|
000036  eb0000c3          ADD      r0,r0,r3,LSL #3
00003a  7840              LDRB     r0,[r0,#1]
00003c  1e40              SUBS     r0,r0,#1
00003e  4949              LDR      r1,|L7.356|
000040  eb0101c3          ADD      r1,r1,r3,LSL #3
000044  7048              STRB     r0,[r1,#1]
000046  e015              B        |L7.116|
                  |L7.72|
;;;230    				}
;;;231    				else  
;;;232    				{
;;;233    					LED[i].OFF_time=LED[i].back_OFF_time;
000048  4846              LDR      r0,|L7.356|
00004a  eb0000c3          ADD      r0,r0,r3,LSL #3
00004e  7900              LDRB     r0,[r0,#4]
000050  4944              LDR      r1,|L7.356|
000052  eb0101c3          ADD      r1,r1,r3,LSL #3
000056  7048              STRB     r0,[r1,#1]
;;;234    					LED[i].ON_OFF=1;
000058  2001              MOVS     r0,#1
00005a  4942              LDR      r1,|L7.356|
00005c  eb0101c3          ADD      r1,r1,r3,LSL #3
000060  7148              STRB     r0,[r1,#5]
;;;235    					LED[i].half++;
000062  4840              LDR      r0,|L7.356|
000064  eb0000c3          ADD      r0,r0,r3,LSL #3
000068  79c0              LDRB     r0,[r0,#7]
00006a  1c40              ADDS     r0,r0,#1
00006c  493d              LDR      r1,|L7.356|
00006e  eb0101c3          ADD      r1,r1,r3,LSL #3
000072  71c8              STRB     r0,[r1,#7]
                  |L7.116|
;;;236    				}       
;;;237    			}
;;;238    			//原先是亮的
;;;239    			if(LED[i].ON_OFF==1)
000074  483b              LDR      r0,|L7.356|
000076  eb0000c3          ADD      r0,r0,r3,LSL #3
00007a  7940              LDRB     r0,[r0,#5]
00007c  2801              CMP      r0,#1
00007e  d125              BNE      |L7.204|
;;;240    			{
;;;241    				if(LED[i].ON_time>0)
000080  4838              LDR      r0,|L7.356|
000082  f8100033          LDRB     r0,[r0,r3,LSL #3]
000086  2800              CMP      r0,#0
000088  dd0c              BLE      |L7.164|
;;;242    				{
;;;243    					if(LED[i].ON_time!=LOOP)LED[i].ON_time--;
00008a  4836              LDR      r0,|L7.356|
00008c  f8100033          LDRB     r0,[r0,r3,LSL #3]
000090  28ff              CMP      r0,#0xff
000092  d01b              BEQ      |L7.204|
000094  4833              LDR      r0,|L7.356|
000096  f8100033          LDRB     r0,[r0,r3,LSL #3]
00009a  1e40              SUBS     r0,r0,#1
00009c  4931              LDR      r1,|L7.356|
00009e  f8010033          STRB     r0,[r1,r3,LSL #3]
0000a2  e013              B        |L7.204|
                  |L7.164|
;;;244    				}
;;;245    				else  
;;;246    				{
;;;247    					LED[i].ON_time=LED[i].back_ON_time;
0000a4  482f              LDR      r0,|L7.356|
0000a6  eb0000c3          ADD      r0,r0,r3,LSL #3
0000aa  78c0              LDRB     r0,[r0,#3]
0000ac  492d              LDR      r1,|L7.356|
0000ae  f8010033          STRB     r0,[r1,r3,LSL #3]
;;;248    					LED[i].ON_OFF=0;
0000b2  2000              MOVS     r0,#0
0000b4  eb0101c3          ADD      r1,r1,r3,LSL #3
0000b8  7148              STRB     r0,[r1,#5]
;;;249    					LED[i].half++;
0000ba  482a              LDR      r0,|L7.356|
0000bc  eb0000c3          ADD      r0,r0,r3,LSL #3
0000c0  79c0              LDRB     r0,[r0,#7]
0000c2  1c40              ADDS     r0,r0,#1
0000c4  4927              LDR      r1,|L7.356|
0000c6  eb0101c3          ADD      r1,r1,r3,LSL #3
0000ca  71c8              STRB     r0,[r1,#7]
                  |L7.204|
;;;250    				}
;;;251    			}
;;;252    			if(LED[i].half>=2)
0000cc  4825              LDR      r0,|L7.356|
0000ce  eb0000c3          ADD      r0,r0,r3,LSL #3
0000d2  79c0              LDRB     r0,[r0,#7]
0000d4  2802              CMP      r0,#2
0000d6  db2a              BLT      |L7.302|
;;;253    			{
;;;254    				LED[i].half=0;
0000d8  2000              MOVS     r0,#0
0000da  4922              LDR      r1,|L7.356|
0000dc  eb0101c3          ADD      r1,r1,r3,LSL #3
0000e0  71c8              STRB     r0,[r1,#7]
;;;255    				
;;;256    				if(LED[i].count!=LOOP)LED[i].count--;
0000e2  4820              LDR      r0,|L7.356|
0000e4  eb0000c3          ADD      r0,r0,r3,LSL #3
0000e8  7880              LDRB     r0,[r0,#2]
0000ea  28ff              CMP      r0,#0xff
0000ec  d008              BEQ      |L7.256|
0000ee  481d              LDR      r0,|L7.356|
0000f0  eb0000c3          ADD      r0,r0,r3,LSL #3
0000f4  7880              LDRB     r0,[r0,#2]
0000f6  1e40              SUBS     r0,r0,#1
0000f8  491a              LDR      r1,|L7.356|
0000fa  eb0101c3          ADD      r1,r1,r3,LSL #3
0000fe  7088              STRB     r0,[r1,#2]
                  |L7.256|
;;;257    								//最后一次循环
;;;258    				if(LED[i].count==0)
000100  4818              LDR      r0,|L7.356|
000102  eb0000c3          ADD      r0,r0,r3,LSL #3
000106  7880              LDRB     r0,[r0,#2]
000108  b908              CBNZ     r0,|L7.270|
;;;259    				{
;;;260    					//表示默认状态时长亮
;;;261    					if((LED[i].stu)==1)
00010a  4816              LDR      r0,|L7.356|
00010c  e000              B        |L7.272|
                  |L7.270|
00010e  e00e              B        |L7.302|
                  |L7.272|
000110  eb0000c3          ADD      r0,r0,r3,LSL #3
000114  7980              LDRB     r0,[r0,#6]
000116  2801              CMP      r0,#1
000118  d104              BNE      |L7.292|
;;;262    					{
;;;263    						//Led_set(i,0xff,0,0xff,1);
;;;264    						LED[i].ON_OFF=1;
00011a  4912              LDR      r1,|L7.356|
00011c  eb0101c3          ADD      r1,r1,r3,LSL #3
000120  7148              STRB     r0,[r1,#5]
000122  e004              B        |L7.302|
                  |L7.292|
;;;265    					}
;;;266    					else
;;;267    					{
;;;268    						//Led_set(i,0,0xff,0xff,2);
;;;269    						LED[i].ON_OFF=0;
000124  2000              MOVS     r0,#0
000126  490f              LDR      r1,|L7.356|
000128  eb0101c3          ADD      r1,r1,r3,LSL #3
00012c  7148              STRB     r0,[r1,#5]
                  |L7.302|
00012e  1c58              ADDS     r0,r3,#1              ;220
000130  b2c3              UXTB     r3,r0                 ;220
                  |L7.306|
000132  2b02              CMP      r3,#2                 ;220
000134  f6ffaf67          BLT      |L7.6|
;;;270    					}
;;;271    				}
;;;272    			}       
;;;273    			}
;;;274    		}
;;;275    	}
;;;276    	//设备执行
;;;277    	//=============================================================================
;;;278    	for(i=0;i<LED_NUM;i++)
000138  2300              MOVS     r3,#0
00013a  e00f              B        |L7.348|
                  |L7.316|
;;;279    	{
;;;280    				if(LED[i].ON_OFF==0)
00013c  4809              LDR      r0,|L7.356|
00013e  eb0000c3          ADD      r0,r0,r3,LSL #3
000142  7940              LDRB     r0,[r0,#5]
000144  b920              CBNZ     r0,|L7.336|
;;;281    				{
;;;282    							bsp_LedOff(i+1);
000146  1c59              ADDS     r1,r3,#1
000148  b2c8              UXTB     r0,r1
00014a  f7fffffe          BL       bsp_LedOff
00014e  e003              B        |L7.344|
                  |L7.336|
;;;283    				}
;;;284    				else   
;;;285    				{    
;;;286    					    bsp_LedOn(i+1);
000150  1c59              ADDS     r1,r3,#1
000152  b2c8              UXTB     r0,r1
000154  f7fffffe          BL       bsp_LedOn
                  |L7.344|
000158  1c58              ADDS     r0,r3,#1              ;278
00015a  b2c3              UXTB     r3,r0                 ;278
                  |L7.348|
00015c  2b02              CMP      r3,#2                 ;278
00015e  dbed              BLT      |L7.316|
;;;287    				}  
;;;288      }
;;;289    }
000160  bd00              POP      {pc}
;;;290    /*********************** end of code ************************************/
                          ENDP

000162  0000              DCW      0x0000
                  |L7.356|
                          DCD      LED

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  LED
                          %        16

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_led.C"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_bsp_led_C_ba23b041____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_bsp_led_C_ba23b041____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_bsp_led_C_ba23b041____REVSH|
#line 128
|__asm___9_bsp_led_C_ba23b041____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
