; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\outupt\app_it1.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=..\outupt\app_it1.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\outupt\app_it1.crf ..\..\User\App_IT1.c]
                          THUMB

                          AREA ||i.IT1_AddressSetting||, CODE, READONLY, ALIGN=2

                  IT1_AddressSetting PROC
;;;2326   //485地址设置
;;;2327   void IT1_AddressSetting(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2328   {
;;;2329   		uint8_t i/*,tmp*/;
;;;2330   	 unsigned char IsACK=0,IsModify=0;
000002  2500              MOVS     r5,#0
000004  2600              MOVS     r6,#0
;;;2331   
;;;2332      if(RxDat.buf[2]==Dev.addr[0])
000006  4836              LDR      r0,|L1.224|
000008  7900              LDRB     r0,[r0,#4]
00000a  4936              LDR      r1,|L1.228|
00000c  7889              LDRB     r1,[r1,#2]  ; Dev
00000e  4288              CMP      r0,r1
000010  d102              BNE      |L1.24|
;;;2333      {
;;;2334           IsModify=1;
000012  2601              MOVS     r6,#1
;;;2335           IsACK=1;
000014  2501              MOVS     r5,#1
000016  e010              B        |L1.58|
                  |L1.24|
;;;2336      }
;;;2337      else if((Dev.power_time<30)&&(RxDat.buf[2]==0xff)&&(RxDat.buf[1]==0xff))
000018  4832              LDR      r0,|L1.228|
00001a  7a40              LDRB     r0,[r0,#9]  ; Dev
00001c  281e              CMP      r0,#0x1e
00001e  da0a              BGE      |L1.54|
000020  482f              LDR      r0,|L1.224|
000022  7900              LDRB     r0,[r0,#4]
000024  28ff              CMP      r0,#0xff
000026  d106              BNE      |L1.54|
000028  482d              LDR      r0,|L1.224|
00002a  78c0              LDRB     r0,[r0,#3]
00002c  28ff              CMP      r0,#0xff
00002e  d102              BNE      |L1.54|
;;;2338      {        
;;;2339           IsModify=1;
000030  2601              MOVS     r6,#1
;;;2340           IsACK=0;
000032  2500              MOVS     r5,#0
000034  e001              B        |L1.58|
                  |L1.54|
;;;2341           //Dev.power_time=0;
;;;2342      }
;;;2343      else
;;;2344      {
;;;2345           IsModify=0;
000036  2600              MOVS     r6,#0
;;;2346           IsACK=0;
000038  2500              MOVS     r5,#0
                  |L1.58|
;;;2347      } 
;;;2348      if(IsModify==1)
00003a  2e01              CMP      r6,#1
00003c  d14e              BNE      |L1.220|
;;;2349      {
;;;2350           Dev.addr[0]=RxDat.buf[10];
00003e  4828              LDR      r0,|L1.224|
000040  7b00              LDRB     r0,[r0,#0xc]
000042  4928              LDR      r1,|L1.228|
000044  7088              STRB     r0,[r1,#2]
;;;2351   		    
;;;2352   				//if((Dev.err&~ERR_POWER)==0)										//电压正常才能写，低压禁止
;;;2353   				{
;;;2354   					Write_Dev(Dev.addr[0],TYPE_EE_ADDR_ADDR0);					  
000046  7888              LDRB     r0,[r1,#2]  ; Dev
000048  2101              MOVS     r1,#1
00004a  f7fffffe          BL       Write_Dev
;;;2355   		    }
;;;2356   				//========================================================================================
;;;2357   				//删除表格
;;;2358   				if(RxDat.buf[10]!=RxDat.buf[2])
00004e  4824              LDR      r0,|L1.224|
000050  7b01              LDRB     r1,[r0,#0xc]
000052  7900              LDRB     r0,[r0,#4]
000054  4281              CMP      r1,r0
000056  d02f              BEQ      |L1.184|
;;;2359   				{
;;;2360   						for(i=0;i<8;i++)
000058  2400              MOVS     r4,#0
00005a  e02b              B        |L1.180|
                  |L1.92|
;;;2361   						{
;;;2362   									Exchangebuf.type=Ex_Table.Exchange[i].type;
00005c  ebc401c4          RSB      r1,r4,r4,LSL #3
000060  4821              LDR      r0,|L1.232|
000062  f8100011          LDRB     r0,[r0,r1,LSL #1]
000066  4921              LDR      r1,|L1.236|
000068  7008              STRB     r0,[r1,#0]
;;;2363   									Exchangebuf.wl_addr[1]=Ex_Table.Exchange[i].wl_addr[1];
00006a  ebc401c4          RSB      r1,r4,r4,LSL #3
00006e  481e              LDR      r0,|L1.232|
000070  eb000041          ADD      r0,r0,r1,LSL #1
000074  7901              LDRB     r1,[r0,#4]
000076  481d              LDR      r0,|L1.236|
000078  7101              STRB     r1,[r0,#4]
;;;2364   									Exchangebuf.wl_addr[2]=Ex_Table.Exchange[i].wl_addr[2];
00007a  ebc401c4          RSB      r1,r4,r4,LSL #3
00007e  481a              LDR      r0,|L1.232|
000080  eb000041          ADD      r0,r0,r1,LSL #1
000084  7941              LDRB     r1,[r0,#5]
000086  4819              LDR      r0,|L1.236|
000088  7141              STRB     r1,[r0,#5]
;;;2365   									Wireless_Dev_Action(i,0x02,0,0);         //装无线发送数据
00008a  2300              MOVS     r3,#0
00008c  461a              MOV      r2,r3
00008e  2102              MOVS     r1,#2
000090  4620              MOV      r0,r4
000092  f7fffffe          BL       Wireless_Dev_Action
;;;2366   								
;;;2367   									//tmp=Exchangebuf.type;
;;;2368   									Exchangebuf.addr=0xff;	
000096  20ff              MOVS     r0,#0xff
000098  4914              LDR      r1,|L1.236|
00009a  7048              STRB     r0,[r1,#1]
;;;2369   									Exchangebuf.addr=0xff;
00009c  7048              STRB     r0,[r1,#1]
;;;2370   									Exchangebuf.channel=0xff;
00009e  7188              STRB     r0,[r1,#6]
;;;2371   									Exchangebuf.wl_addr[0]=0xff;
0000a0  70c8              STRB     r0,[r1,#3]
;;;2372   									Exchangebuf.wl_addr[1]=0xff;
0000a2  21ff              MOVS     r1,#0xff
0000a4  4811              LDR      r0,|L1.236|
0000a6  7101              STRB     r1,[r0,#4]
;;;2373   									Exchangebuf.wl_addr[2]=0xff;
0000a8  7141              STRB     r1,[r0,#5]
;;;2374   									//写入表格
;;;2375   									Write_Ex_Table(i);
0000aa  4620              MOV      r0,r4
0000ac  f7fffffe          BL       Write_Ex_Table
0000b0  1c60              ADDS     r0,r4,#1              ;2360
0000b2  b2c4              UXTB     r4,r0                 ;2360
                  |L1.180|
0000b4  2c08              CMP      r4,#8                 ;2360
0000b6  dbd1              BLT      |L1.92|
                  |L1.184|
;;;2376   						}			
;;;2377   				}	
;;;2378   				//==============================================================================
;;;2379   		    Dev.stu=DEV_REGISTER;
0000b8  2001              MOVS     r0,#1
0000ba  490a              LDR      r1,|L1.228|
0000bc  7188              STRB     r0,[r1,#6]
;;;2380   				RegTimeClr(); 
0000be  f7fffffe          BL       RegTimeClr
;;;2381   				InitQueueBUF(&RS485_Queue);
0000c2  480b              LDR      r0,|L1.240|
0000c4  f7fffffe          BL       InitQueueBUF
;;;2382   				InitQueueBUF(&WirelessSend_Queue);
0000c8  480a              LDR      r0,|L1.244|
0000ca  f7fffffe          BL       InitQueueBUF
;;;2383           IsModify=0;
0000ce  2600              MOVS     r6,#0
;;;2384           if(IsACK==1)
0000d0  2d01              CMP      r5,#1
0000d2  d103              BNE      |L1.220|
;;;2385           {
;;;2386               IsACK=0;
0000d4  2500              MOVS     r5,#0
;;;2387   			      IT1_Load_RS485_Ack(OPT_OK);
0000d6  20fb              MOVS     r0,#0xfb
0000d8  f7fffffe          BL       IT1_Load_RS485_Ack
                  |L1.220|
;;;2388           }
;;;2389      }  
;;;2390   }
0000dc  bd70              POP      {r4-r6,pc}
;;;2391   //============================================================================================================
                          ENDP

0000de  0000              DCW      0x0000
                  |L1.224|
                          DCD      RxDat
                  |L1.228|
                          DCD      ||Dev||
                  |L1.232|
                          DCD      Ex_Table+0x36
                  |L1.236|
                          DCD      Exchangebuf
                  |L1.240|
                          DCD      RS485_Queue
                  |L1.244|
                          DCD      WirelessSend_Queue

                          AREA ||i.IT1_DevPara_Report||, CODE, READONLY, ALIGN=2

                  IT1_DevPara_Report PROC
;;;3168   // 主要是LED状态
;;;3169   void IT1_DevPara_Report(unsigned char chl,unsigned char addr,unsigned char len)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;3170   {
000004  4606              MOV      r6,r0
000006  4688              MOV      r8,r1
000008  4691              MOV      r9,r2
;;;3171   
;;;3172   		_Frame *ps;	
;;;3173   	  uint8_t /*buf[8],*/i,index;
;;;3174   	  //uint8_t tt;
;;;3175   	
;;;3176   		ps=GetQueue_InQ(&RS485_Queue,8);
00000a  2108              MOVS     r1,#8
00000c  484a              LDR      r0,|L2.312|
00000e  f7fffffe          BL       GetQueue_InQ
000012  4604              MOV      r4,r0
;;;3177   		//缓冲区溢出
;;;3178   		if(ps==NULL)
000014  b90c              CBNZ     r4,|L2.26|
                  |L2.22|
;;;3179   		{
;;;3180   			return;
;;;3181   		}
;;;3182   		chl=chl&0x0f;										//转发器通道
;;;3183   		if((chl>8)||(chl==0))return;
;;;3184   		index=chl-1;
;;;3185   		
;;;3186   		ps->buf[0]=0x20;												//帧控制
;;;3187   		ps->buf[1]=0x00;  											//同步字
;;;3188   		ps->buf[2]=Master_Address;							//目标地址
;;;3189   		ps->buf[3]=0x00;												//同步字
;;;3190   		ps->buf[4]=Dev.addr[0];									//源地址
;;;3191   		ps->buf[5]=0x80+chl;												//设备通道和总数
;;;3192   			
;;;3193   
;;;3194   		if((Ex_Table.Exchange[index].type==EX_KEY_54KEY)||(Ex_Table.Exchange[index].type==EX_KEY_42KEY))
;;;3195   		{
;;;3196   				ps->buf[6]=0x09;	
;;;3197   			  ps->buf[7]=0x01;
;;;3198   			  ps->buf[8]=0x07;
;;;3199   			  for(i=0;i<7;i++)ps->buf[9+i]=Pannel.item[index].irflagbuf[i];
;;;3200   				ps->buf[16]=Crc8CheckSum(ps->buf,16);		//CRC8校验
;;;3201   				ps->cnt=17;				
;;;3202   		}
;;;3203   		else
;;;3204   		{
;;;3205   				ps->buf[6]=0x09;										 //数据长度
;;;3206   				ps->buf[7]=addr;										 //数据起始地址			
;;;3207   				ps->buf[8]=0x07;										 //参数个数
;;;3208   				
;;;3209   				ps->buf[9]=Ex_Table.Exchange[index].type;
;;;3210   				ps->buf[10]=Ex_Table.Exchange[index].addr;
;;;3211   				ps->buf[11]=Ex_Table.Exchange[index].stu;
;;;3212   				ps->buf[12]=Ex_Table.Exchange[index].wl_addr[0];
;;;3213   				ps->buf[13]=Ex_Table.Exchange[index].wl_addr[1];
;;;3214   				ps->buf[14]=Ex_Table.Exchange[index].wl_addr[2];
;;;3215   				ps->buf[15]=Ex_Table.Exchange[index].channel;
;;;3216   				
;;;3217   				
;;;3218   				ps->buf[16]=Crc8CheckSum(ps->buf,16);		//CRC8校验
;;;3219   				ps->cnt=17;		
;;;3220   			
;;;3221   		}
;;;3222   	  ps->flag=1;
;;;3223   		ps->resend=4;
;;;3224   		ps->rand=100;
;;;3225   		ps->ackwait=30;	
;;;3226   		EnQueueBuf(&RS485_Queue,8);
;;;3227   }
000016  e8bd87f0          POP      {r4-r10,pc}
                  |L2.26|
00001a  f006060f          AND      r6,r6,#0xf            ;3182
00001e  2e08              CMP      r6,#8                 ;3183
000020  dc00              BGT      |L2.36|
000022  b906              CBNZ     r6,|L2.38|
                  |L2.36|
000024  e7f7              B        |L2.22|
                  |L2.38|
000026  1e70              SUBS     r0,r6,#1              ;3184
000028  b2c5              UXTB     r5,r0                 ;3184
00002a  2020              MOVS     r0,#0x20              ;3186
00002c  7020              STRB     r0,[r4,#0]            ;3186
00002e  2000              MOVS     r0,#0                 ;3187
000030  7060              STRB     r0,[r4,#1]            ;3187
000032  70a0              STRB     r0,[r4,#2]            ;3188
000034  70e0              STRB     r0,[r4,#3]            ;3189
000036  4841              LDR      r0,|L2.316|
000038  7880              LDRB     r0,[r0,#2]            ;3190  ; Dev
00003a  7120              STRB     r0,[r4,#4]            ;3190
00003c  f1060080          ADD      r0,r6,#0x80           ;3191
000040  7160              STRB     r0,[r4,#5]            ;3191
000042  ebc501c5          RSB      r1,r5,r5,LSL #3       ;3194
000046  483e              LDR      r0,|L2.320|
000048  f8100011          LDRB     r0,[r0,r1,LSL #1]     ;3194
00004c  28fa              CMP      r0,#0xfa              ;3194
00004e  d006              BEQ      |L2.94|
000050  ebc501c5          RSB      r1,r5,r5,LSL #3       ;3194
000054  483a              LDR      r0,|L2.320|
000056  f8100011          LDRB     r0,[r0,r1,LSL #1]     ;3194
00005a  28fb              CMP      r0,#0xfb              ;3194
00005c  d11c              BNE      |L2.152|
                  |L2.94|
00005e  2009              MOVS     r0,#9                 ;3196
000060  71a0              STRB     r0,[r4,#6]            ;3196
000062  2001              MOVS     r0,#1                 ;3197
000064  71e0              STRB     r0,[r4,#7]            ;3197
000066  2007              MOVS     r0,#7                 ;3198
000068  7220              STRB     r0,[r4,#8]            ;3198
00006a  2700              MOVS     r7,#0                 ;3199
00006c  e009              B        |L2.130|
                  |L2.110|
00006e  ebc51105          RSB      r1,r5,r5,LSL #4       ;3199
000072  4834              LDR      r0,|L2.324|
000074  4408              ADD      r0,r0,r1              ;3199
000076  5dc1              LDRB     r1,[r0,r7]            ;3199
000078  f1070009          ADD      r0,r7,#9              ;3199
00007c  5421              STRB     r1,[r4,r0]            ;3199
00007e  1c78              ADDS     r0,r7,#1              ;3199
000080  b2c7              UXTB     r7,r0                 ;3199
                  |L2.130|
000082  2f07              CMP      r7,#7                 ;3199
000084  dbf3              BLT      |L2.110|
000086  2110              MOVS     r1,#0x10              ;3200
000088  4620              MOV      r0,r4                 ;3200
00008a  f7fffffe          BL       Crc8CheckSum
00008e  7420              STRB     r0,[r4,#0x10]         ;3200
000090  2011              MOVS     r0,#0x11              ;3201
000092  f88400c8          STRB     r0,[r4,#0xc8]         ;3201
000096  e03d              B        |L2.276|
                  |L2.152|
000098  2009              MOVS     r0,#9                 ;3205
00009a  71a0              STRB     r0,[r4,#6]            ;3205
00009c  f8848007          STRB     r8,[r4,#7]            ;3206
0000a0  2007              MOVS     r0,#7                 ;3207
0000a2  7220              STRB     r0,[r4,#8]            ;3207
0000a4  ebc501c5          RSB      r1,r5,r5,LSL #3       ;3209
0000a8  4825              LDR      r0,|L2.320|
0000aa  f8100011          LDRB     r0,[r0,r1,LSL #1]     ;3209
0000ae  7260              STRB     r0,[r4,#9]            ;3209
0000b0  ebc501c5          RSB      r1,r5,r5,LSL #3       ;3210
0000b4  4822              LDR      r0,|L2.320|
0000b6  eb000041          ADD      r0,r0,r1,LSL #1       ;3210
0000ba  7840              LDRB     r0,[r0,#1]            ;3210
0000bc  72a0              STRB     r0,[r4,#0xa]          ;3210
0000be  ebc501c5          RSB      r1,r5,r5,LSL #3       ;3211
0000c2  481f              LDR      r0,|L2.320|
0000c4  eb000041          ADD      r0,r0,r1,LSL #1       ;3211
0000c8  7880              LDRB     r0,[r0,#2]            ;3211
0000ca  72e0              STRB     r0,[r4,#0xb]          ;3211
0000cc  ebc501c5          RSB      r1,r5,r5,LSL #3       ;3212
0000d0  481b              LDR      r0,|L2.320|
0000d2  eb000041          ADD      r0,r0,r1,LSL #1       ;3212
0000d6  78c0              LDRB     r0,[r0,#3]            ;3212
0000d8  7320              STRB     r0,[r4,#0xc]          ;3212
0000da  ebc501c5          RSB      r1,r5,r5,LSL #3       ;3213
0000de  4818              LDR      r0,|L2.320|
0000e0  eb000041          ADD      r0,r0,r1,LSL #1       ;3213
0000e4  7900              LDRB     r0,[r0,#4]            ;3213
0000e6  7360              STRB     r0,[r4,#0xd]          ;3213
0000e8  ebc501c5          RSB      r1,r5,r5,LSL #3       ;3214
0000ec  4814              LDR      r0,|L2.320|
0000ee  eb000041          ADD      r0,r0,r1,LSL #1       ;3214
0000f2  7940              LDRB     r0,[r0,#5]            ;3214
0000f4  73a0              STRB     r0,[r4,#0xe]          ;3214
0000f6  ebc501c5          RSB      r1,r5,r5,LSL #3       ;3215
0000fa  4811              LDR      r0,|L2.320|
0000fc  eb000041          ADD      r0,r0,r1,LSL #1       ;3215
000100  7980              LDRB     r0,[r0,#6]            ;3215
000102  73e0              STRB     r0,[r4,#0xf]          ;3215
000104  2110              MOVS     r1,#0x10              ;3218
000106  4620              MOV      r0,r4                 ;3218
000108  f7fffffe          BL       Crc8CheckSum
00010c  7420              STRB     r0,[r4,#0x10]         ;3218
00010e  2011              MOVS     r0,#0x11              ;3219
000110  f88400c8          STRB     r0,[r4,#0xc8]         ;3219
                  |L2.276|
000114  2001              MOVS     r0,#1                 ;3222
000116  f8040fc9          STRB     r0,[r4,#0xc9]!        ;3222
00011a  2004              MOVS     r0,#4                 ;3223
00011c  7060              STRB     r0,[r4,#1]            ;3223
00011e  2064              MOVS     r0,#0x64              ;3224
000120  70e0              STRB     r0,[r4,#3]            ;3224
000122  201e              MOVS     r0,#0x1e              ;3225
000124  7120              STRB     r0,[r4,#4]            ;3225
000126  f1a404c9          SUB      r4,r4,#0xc9           ;3225
00012a  f04f0108          MOV      r1,#8                 ;3226
00012e  4802              LDR      r0,|L2.312|
000130  f7fffffe          BL       EnQueueBuf
000134  bf00              NOP      
000136  e76e              B        |L2.22|
;;;3228   
                          ENDP

                  |L2.312|
                          DCD      RS485_Queue
                  |L2.316|
                          DCD      ||Dev||
                  |L2.320|
                          DCD      Ex_Table+0x36
                  |L2.324|
                          DCD      Pannel+0x1

                          AREA ||i.IT1_Dev_Declare||, CODE, READONLY, ALIGN=2

                  IT1_Dev_Declare PROC
;;;723    //无线网关被配置后，如果无线设备没有上报，则模仿上报一次，使无线设备在线
;;;724    void IT1_Dev_Declare(uint8_t index,uint8_t cmd)
000000  b5f8              PUSH     {r3-r7,lr}
;;;725    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;726     	    _Frame *ps;
;;;727     	    uint8_t buf[2],rt;
;;;728    
;;;729     			ps=GetQueue_InQ(&RS485_Queue,index);
000006  4629              MOV      r1,r5
000008  4829              LDR      r0,|L3.176|
00000a  f7fffffe          BL       GetQueue_InQ
00000e  4604              MOV      r4,r0
;;;730     			//判断是否接收缓冲区溢出
;;;731     			if(ps==NULL){return;}			
000010  b904              CBNZ     r4,|L3.20|
                  |L3.18|
;;;732     			//上电发送请求命令
;;;733     			ps->buf[0] =0x05;									//帧控制,从设备请求命令
;;;734     			ps->buf[1] =(uint8_t)(Master_Address>>8);
;;;735     			ps->buf[2] =(uint8_t)(Master_Address&0xff);
;;;736     			ps->buf[3] =0x00;					        //
;;;737     			ps->buf[4] =Dev.addr[0];					//本地地址
;;;738     			ps->buf[5] =index+1;					//通道号
;;;739    			
;;;740    			rt=IT1_Wireless2RS485(Exchangebuf.type,&buf[0]);
;;;741          //if(rt==RE_ERR)return;
;;;742    			
;;;743    			if((Exchangebuf.key!=0x00)&&(Exchangebuf.key!=0xff))
;;;744    			{
;;;745    					ps->buf[6] =0x04;						      //命令字节
;;;746    					ps->buf[7] =cmd;
;;;747    							
;;;748    					ps->buf[8] =buf[0];								
;;;749    					ps->buf[9] =buf[1];
;;;750    					ps->buf[10] =Exchangebuf.key;	
;;;751    					
;;;752    					ps->buf[11]=Crc8CheckSum((uint8_t*)ps->buf,11);	//CRC8校验
;;;753    					ps->cnt=12;
;;;754    			}
;;;755    			else
;;;756    		  {
;;;757    					ps->buf[6] =0x03;						      //命令字节
;;;758    					ps->buf[7] =cmd;						
;;;759    					ps->buf[8] =buf[0];								
;;;760    					ps->buf[9] =buf[1];						
;;;761    					ps->buf[10]=Crc8CheckSum((uint8_t*)ps->buf,10);	//CRC8校验
;;;762    					ps->cnt=11;
;;;763    			}
;;;764       			
;;;765     			ps->flag=1;
;;;766     			ps->resend=5;
;;;767     			ps->ackwait=0;
;;;768     			EnQueueBuf(&RS485_Queue,index);
;;;769    }
000012  bdf8              POP      {r3-r7,pc}
                  |L3.20|
000014  2005              MOVS     r0,#5                 ;733
000016  7020              STRB     r0,[r4,#0]            ;733
000018  2000              MOVS     r0,#0                 ;734
00001a  7060              STRB     r0,[r4,#1]            ;734
00001c  70a0              STRB     r0,[r4,#2]            ;735
00001e  70e0              STRB     r0,[r4,#3]            ;736
000020  4824              LDR      r0,|L3.180|
000022  7880              LDRB     r0,[r0,#2]            ;737  ; Dev
000024  7120              STRB     r0,[r4,#4]            ;737
000026  1c68              ADDS     r0,r5,#1              ;738
000028  7160              STRB     r0,[r4,#5]            ;738
00002a  4923              LDR      r1,|L3.184|
00002c  7808              LDRB     r0,[r1,#0]            ;740  ; Exchangebuf
00002e  4669              MOV      r1,sp                 ;740
000030  f7fffffe          BL       IT1_Wireless2RS485
000034  4607              MOV      r7,r0                 ;740
000036  4820              LDR      r0,|L3.184|
000038  7a00              LDRB     r0,[r0,#8]            ;743  ; Exchangebuf
00003a  b1c0              CBZ      r0,|L3.110|
00003c  481e              LDR      r0,|L3.184|
00003e  7a00              LDRB     r0,[r0,#8]            ;743  ; Exchangebuf
000040  28ff              CMP      r0,#0xff              ;743
000042  d014              BEQ      |L3.110|
000044  2004              MOVS     r0,#4                 ;745
000046  71a0              STRB     r0,[r4,#6]            ;745
000048  71e6              STRB     r6,[r4,#7]            ;746
00004a  f89d0000          LDRB     r0,[sp,#0]            ;748
00004e  7220              STRB     r0,[r4,#8]            ;748
000050  f89d0001          LDRB     r0,[sp,#1]            ;749
000054  7260              STRB     r0,[r4,#9]            ;749
000056  4818              LDR      r0,|L3.184|
000058  7a00              LDRB     r0,[r0,#8]            ;750  ; Exchangebuf
00005a  72a0              STRB     r0,[r4,#0xa]          ;750
00005c  210b              MOVS     r1,#0xb               ;752
00005e  4620              MOV      r0,r4                 ;752
000060  f7fffffe          BL       Crc8CheckSum
000064  72e0              STRB     r0,[r4,#0xb]          ;752
000066  200c              MOVS     r0,#0xc               ;753
000068  f88400c8          STRB     r0,[r4,#0xc8]         ;753
00006c  e010              B        |L3.144|
                  |L3.110|
00006e  2003              MOVS     r0,#3                 ;757
000070  71a0              STRB     r0,[r4,#6]            ;757
000072  71e6              STRB     r6,[r4,#7]            ;758
000074  f89d0000          LDRB     r0,[sp,#0]            ;759
000078  7220              STRB     r0,[r4,#8]            ;759
00007a  f89d0001          LDRB     r0,[sp,#1]            ;760
00007e  7260              STRB     r0,[r4,#9]            ;760
000080  210a              MOVS     r1,#0xa               ;761
000082  4620              MOV      r0,r4                 ;761
000084  f7fffffe          BL       Crc8CheckSum
000088  72a0              STRB     r0,[r4,#0xa]          ;761
00008a  200b              MOVS     r0,#0xb               ;762
00008c  f88400c8          STRB     r0,[r4,#0xc8]         ;762
                  |L3.144|
000090  2001              MOVS     r0,#1                 ;765
000092  f8040fc9          STRB     r0,[r4,#0xc9]!        ;765
000096  2005              MOVS     r0,#5                 ;766
000098  7060              STRB     r0,[r4,#1]            ;766
00009a  2000              MOVS     r0,#0                 ;767
00009c  7120              STRB     r0,[r4,#4]            ;767
00009e  f1a404c9          SUB      r4,r4,#0xc9           ;767
0000a2  4629              MOV      r1,r5                 ;768
0000a4  4802              LDR      r0,|L3.176|
0000a6  f7fffffe          BL       EnQueueBuf
0000aa  bf00              NOP      
0000ac  e7b1              B        |L3.18|
;;;770    //==========================================================================================================
                          ENDP

0000ae  0000              DCW      0x0000
                  |L3.176|
                          DCD      RS485_Queue
                  |L3.180|
                          DCD      ||Dev||
                  |L3.184|
                          DCD      Exchangebuf

                          AREA ||i.IT1_Dev_Register||, CODE, READONLY, ALIGN=2

                  IT1_Dev_Register PROC
;;;614    //用于设备注册
;;;615    void IT1_Dev_Register(void)
000000  b510              PUSH     {r4,lr}
;;;616    {
;;;617    	
;;;618    	 _Frame *ps;
;;;619    	
;;;620    	 #ifdef USE_NEWREGISTER	
;;;621    	 uint8_t index,len=0,i;
;;;622    	 #endif
;;;623    	  
;;;624    	
;;;625    	if(Dev.stu<DEV_NORMAL)
000002  4828              LDR      r0,|L4.164|
000004  7980              LDRB     r0,[r0,#6]  ; Dev
000006  2802              CMP      r0,#2
000008  da49              BGE      |L4.158|
;;;626    	{
;;;627    		
;;;628    			ps=GetQueue_InQ(&RS485_Queue,8);
00000a  2108              MOVS     r1,#8
00000c  4826              LDR      r0,|L4.168|
00000e  f7fffffe          BL       GetQueue_InQ
000012  4604              MOV      r4,r0
;;;629    			//判断是否接收缓冲区溢出
;;;630    			if(ps==NULL){return;}
000014  b904              CBNZ     r4,|L4.24|
                  |L4.22|
;;;631    				
;;;632    		
;;;633    			//=======================================================================
;;;634    			//用老的方式注册
;;;635    			#ifndef USE_NEWREGISTER		
;;;636    			//上电发送请求命令
;;;637    			ps->buf[0] =0x02;									//帧控制,从设备请求命令
;;;638    			ps->buf[1] =0x00;
;;;639    			ps->buf[2] =0x00;
;;;640    			ps->buf[3] =Dev.serial++;					//帧序列号
;;;641    			ps->buf[4] =Dev.addr[0];					//网络ID
;;;642    			ps->buf[5] =0x21;									//网络控制命令
;;;643    			
;;;644    			ps->buf[6] =(uint8_t)(Dev.type>>8);						//设备类型
;;;645    			ps->buf[7] =(uint8_t)(Dev.type&0x00ff);
;;;646    
;;;647    			if((Dev.type&0xf000)==0xb000)ps->buf[8] =0x80;									//设备总数以及设备子地址
;;;648    			else                         ps->buf[8] =0x10;
;;;649    			
;;;650    			ps->buf[9] =0x00;									//数据个数
;;;651    			ps->buf[10]=0;										//校验和
;;;652    			
;;;653    
;;;654    			ps->buf[10]=Crc8CheckSum((uint8_t*)ps->buf,10);	//CRC8校验
;;;655      			
;;;656    			ps->flag=1;
;;;657    			ps->cnt=11;
;;;658    			ps->resend=1;
;;;659    			ps->ackwait=0;
;;;660    			EnQueueBuf(&RS485_Queue,8);
;;;661    			//============================================================================
;;;662    			//用新的方式注册
;;;663    			#else
;;;664    			//上电发送请求命令
;;;665    			//数据部分 0x03 0x02 0x01 0x08 0x77 0x10 0x02 0x01 0x02 0x00 0x04 0x01 0x8b 0x00
;;;666    			
;;;667    			//更新数据
;;;668    			IT1_Register_Refresh();
;;;669    					
;;;670    			ps->buf[0] =0x02;															//帧控制,从设备请求命令
;;;671    			ps->buf[1] =VERFLAG;//ps->buf[1] =0x00;
;;;672    			ps->buf[2] =0x00;
;;;673    			ps->buf[3] =Dev.serial++;											//帧序列号
;;;674    			ps->buf[4] =Dev.addr[0];											//网络ID
;;;675    			ps->buf[5] =0x21;															//网络控制命令
;;;676    			
;;;677    			ps->buf[6] =(uint8_t)(Dev.type>>8);						//设备类型
;;;678    			ps->buf[7] =(uint8_t)(Dev.type&0x00ff);
;;;679    
;;;680    			ps->buf[8] =0x80;															//设备总数以及设备子地址
;;;681    			ps->buf[9] =0;																//数据个数
;;;682    			
;;;683    			if(NewRegType.num==0)
;;;684    			{
;;;685    						len=0;
;;;686    			}
;;;687    			else
;;;688    			{
;;;689    						ps->buf[10]=NewRegType.num;							//通道数
;;;690    						ps->buf[11]=0x01;												//类型
;;;691    						index=0;len=0;
;;;692    						for(i=0;i<8;i++)
;;;693    						{
;;;694    								if(NewRegType.item[i].bitpos!=0)
;;;695    								{
;;;696    										ps->buf[12+index*3+0]=NewRegType.item[i].bitpos;
;;;697    										ps->buf[12+index*3+1]=(uint8_t)((NewRegType.item[i].type>>8)& 0x00ff);
;;;698    										ps->buf[12+index*3+2]=(uint8_t)((NewRegType.item[i].type)& 0x00ff);
;;;699    										index++;
;;;700    										len=len+3;
;;;701    								}
;;;702    						}
;;;703    						len=len+2;
;;;704    						ps->buf[9]=len;															//数据长度
;;;705    		  }
;;;706    			
;;;707    
;;;708    			ps->buf[len+10]=Crc8CheckSum((uint8_t*)ps->buf,len+10);	//CRC8校验
;;;709      			
;;;710    			ps->flag=1;
;;;711    			ps->cnt=len+11;
;;;712    			ps->resend=1;
;;;713    			ps->ackwait=0;
;;;714    			EnQueueBuf(&RS485_Queue,8);
;;;715    			
;;;716    			#endif
;;;717    		
;;;718    			
;;;719    	}
;;;720    }
000016  bd10              POP      {r4,pc}
                  |L4.24|
000018  2002              MOVS     r0,#2                 ;637
00001a  7020              STRB     r0,[r4,#0]            ;637
00001c  2000              MOVS     r0,#0                 ;638
00001e  7060              STRB     r0,[r4,#1]            ;638
000020  70a0              STRB     r0,[r4,#2]            ;639
000022  4820              LDR      r0,|L4.164|
000024  7a00              LDRB     r0,[r0,#8]            ;640  ; Dev
000026  70e0              STRB     r0,[r4,#3]            ;640
000028  481e              LDR      r0,|L4.164|
00002a  7a00              LDRB     r0,[r0,#8]            ;640  ; Dev
00002c  1c40              ADDS     r0,r0,#1              ;640
00002e  491d              LDR      r1,|L4.164|
000030  7208              STRB     r0,[r1,#8]            ;640
000032  4608              MOV      r0,r1                 ;641
000034  7880              LDRB     r0,[r0,#2]            ;641  ; Dev
000036  7120              STRB     r0,[r4,#4]            ;641
000038  2021              MOVS     r0,#0x21              ;642
00003a  7160              STRB     r0,[r4,#5]            ;642
00003c  4608              MOV      r0,r1                 ;644
00003e  8880              LDRH     r0,[r0,#4]            ;644  ; Dev
000040  1200              ASRS     r0,r0,#8              ;644
000042  71a0              STRB     r0,[r4,#6]            ;644
000044  4608              MOV      r0,r1                 ;645
000046  7900              LDRB     r0,[r0,#4]            ;645  ; Dev
000048  71e0              STRB     r0,[r4,#7]            ;645
00004a  4608              MOV      r0,r1                 ;647
00004c  8880              LDRH     r0,[r0,#4]            ;647  ; Dev
00004e  f4004070          AND      r0,r0,#0xf000         ;647
000052  f5b04f30          CMP      r0,#0xb000            ;647
000056  d102              BNE      |L4.94|
000058  2080              MOVS     r0,#0x80              ;647
00005a  7220              STRB     r0,[r4,#8]            ;647
00005c  e001              B        |L4.98|
                  |L4.94|
00005e  2010              MOVS     r0,#0x10              ;648
000060  7220              STRB     r0,[r4,#8]            ;648
                  |L4.98|
000062  2000              MOVS     r0,#0                 ;650
000064  7260              STRB     r0,[r4,#9]            ;650
000066  72a0              STRB     r0,[r4,#0xa]          ;651
000068  210a              MOVS     r1,#0xa               ;654
00006a  4620              MOV      r0,r4                 ;654
00006c  f7fffffe          BL       Crc8CheckSum
000070  f10404ae          ADD      r4,r4,#0xae           ;654
000074  f8040ca4          STRB     r0,[r4,#-0xa4]        ;654
000078  f04f0001          MOV      r0,#1                 ;656
00007c  76e0              STRB     r0,[r4,#0x1b]         ;656
00007e  f04f000b          MOV      r0,#0xb               ;657
000082  76a0              STRB     r0,[r4,#0x1a]         ;657
000084  f04f0001          MOV      r0,#1                 ;658
000088  7720              STRB     r0,[r4,#0x1c]         ;658
00008a  f04f0000          MOV      r0,#0                 ;659
00008e  77e0              STRB     r0,[r4,#0x1f]         ;659
000090  f1a404ae          SUB      r4,r4,#0xae           ;659
000094  f04f0108          MOV      r1,#8                 ;660
000098  4803              LDR      r0,|L4.168|
00009a  f7fffffe          BL       EnQueueBuf
                  |L4.158|
00009e  bf00              NOP      
0000a0  e7b9              B        |L4.22|
;;;721    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L4.164|
                          DCD      ||Dev||
                  |L4.168|
                          DCD      RS485_Queue

                          AREA ||i.IT1_Dev_StuLoad||, CODE, READONLY, ALIGN=2

                  IT1_Dev_StuLoad PROC
;;;3277   //走0x27报文
;;;3278   void IT1_Dev_StuLoad(uint8_t index)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;3279   {
000004  4605              MOV      r5,r0
;;;3280   
;;;3281   				_Frame *ps;
;;;3282   				uint8_t i,num;
;;;3283   	      uint8_t lin,row;
;;;3284   				ps=GetQueue_InQ(&RS485_Queue,index);
000006  4629              MOV      r1,r5
000008  4895              LDR      r0,|L5.608|
00000a  f7fffffe          BL       GetQueue_InQ
00000e  4604              MOV      r4,r0
;;;3285   				//缓冲区溢出
;;;3286   				if(ps==NULL){return;}
000010  b90c              CBNZ     r4,|L5.22|
                  |L5.18|
;;;3287   				
;;;3288   				if((Dev.type&0xf000)==0xb000)
;;;3289   				{
;;;3290   						if((Ex_Table.Exchange[index].type==EX_KEY_54KEY)||(Ex_Table.Exchange[index].type==EX_KEY_42KEY))
;;;3291   						{
;;;3292   							  if(Ex_Table.Exchange[index].type==EX_KEY_54KEY)num=7;
;;;3293   							  else                                           num=6;
;;;3294   								ps->buf[0] =0x27;											//帧控制,从设备请求命令
;;;3295   								ps->buf[1] =0x00;
;;;3296   								ps->buf[2] =0x00;
;;;3297   								ps->buf[3] =Dev.serial++;							//帧序列号
;;;3298   								ps->buf[4] =Dev.addr[0];							//网络ID
;;;3299   								ps->buf[5] =0x80+index+1;											//设备总通道和当前通道
;;;3300   								ps->buf[6] =3+num;						      	//数据长度
;;;3301   								ps->buf[7]=0;													//LED状态						
;;;3302   								ps->buf[8] =0;							  				//当前亮度  												
;;;3303   							  for(i=0;i<num;i++)ps->buf[9+i]=Pannel.item[index].onoffbuf[i];
;;;3304   								ps->buf[9+num]=Crc8CheckSum(ps->buf,9+num);		//CRC8校验
;;;3305   								ps->cnt=10+num;					                 	//发送总的字节数
;;;3306   						}
;;;3307   						else if((Ex_Table.Exchange[index].type>=EX_KEY_SCENE1)&&(Ex_Table.Exchange[index].type<=EX_KEY_FULL1))
;;;3308   						{
;;;3309   								ps->buf[0] =0x27;											//帧控制,从设备请求命令
;;;3310   								ps->buf[1] =0x00;
;;;3311   								ps->buf[2] =0x00;
;;;3312   								ps->buf[3] =Dev.serial++;							//帧序列号
;;;3313   								ps->buf[4] =Dev.addr[0];							//网络ID
;;;3314   								ps->buf[5] =0x80+index+1;							//设备总通道和当前通道
;;;3315   
;;;3316   								ps->buf[6] =3;						      			//数据长度
;;;3317   								ps->buf[7]=0;													//LED状态
;;;3318   								
;;;3319   								ps->buf[8] =0;							  				//当前亮度  
;;;3320   								
;;;3321   								ps->buf[9] =Pannel.item[index].onoffbuf[0];
;;;3322   							
;;;3323   								
;;;3324   								ps->buf[10]=Crc8CheckSum(ps->buf,10);		//CRC8校验
;;;3325   								ps->cnt=11;		
;;;3326   						}
;;;3327   						else if((Ex_Table.Exchange[index].type==EX_DEV_SUN)||(Ex_Table.Exchange[index].type==EX_DEV_SUN1))
;;;3328   						{
;;;3329   						    ps->buf[0] =0x04;											//帧控制,从设备请求命令
;;;3330   								ps->buf[1] =0x00;
;;;3331   								ps->buf[2] =0x00;
;;;3332   								ps->buf[3] =Dev.serial++;							//帧序列号
;;;3333   								ps->buf[4] =Dev.addr[0];							//网络ID
;;;3334   								ps->buf[5] =0x80+index+1;											//设备总通道和当前通道
;;;3335   								ps->buf[6] =01;						      			//数据长度
;;;3336   		            ps->buf[7]=Pannel.item[index].onoffbuf[0]&0x01;
;;;3337   								ps->buf[8]=Crc8CheckSum(ps->buf,8);		//CRC8校验
;;;3338   								ps->cnt=9;					                 	//发送总的字节数             
;;;3339   						}				
;;;3340   						ps->flag=1;
;;;3341   						ps->resend=4;
;;;3342   						ps->rand=100;
;;;3343   						ps->ackwait=30;					//等待应答时间最大300mS
;;;3344   						EnQueueBuf(&RS485_Queue,index);
;;;3345   			}
;;;3346   			//走指纹锁
;;;3347   			else if((Dev.type&0xf000)==0x3000)
;;;3348   			{
;;;3349   
;;;3350   						ps->buf[0] =0x04;											//帧控制,从设备请求命令
;;;3351   						ps->buf[1] =0x00;
;;;3352   						ps->buf[2] =0x00;
;;;3353   						ps->buf[3] =Dev.serial++;							//帧序列号
;;;3354   						ps->buf[4] =Dev.addr[0];							//网络ID
;;;3355   						ps->buf[5] =0x10+index;											//设备总通道和当前通道
;;;3356   						ps->buf[6] =01;						      			//数据长度
;;;3357   				
;;;3358   						//ps->buf[7]=Pannel.item[index].onoffbuf[0]&0x01;
;;;3359   				
;;;3360   				    
;;;3361   				    lin=(index-1)/8;
;;;3362   						row=(index-1)%8;
;;;3363   				    if((Pannel.item[0].onoffbuf[lin]&(0x01<<row))!=0x00)ps->buf[7]=0x01;
;;;3364   				    else                                                ps->buf[7]=0x00;
;;;3365   				
;;;3366   						ps->buf[8]=Crc8CheckSum(ps->buf,8);		//CRC8校验
;;;3367   						ps->cnt=9;					                 	//发送总的字节数             			
;;;3368   						ps->flag=1;
;;;3369   						ps->resend=4;
;;;3370   						ps->rand=100;
;;;3371   						ps->ackwait=30;					//等待应答时间最大300mS
;;;3372   						EnQueueBuf(&RS485_Queue,index);
;;;3373   			}
;;;3374   }
000012  e8bd87f0          POP      {r4-r10,pc}
                  |L5.22|
000016  4893              LDR      r0,|L5.612|
000018  8880              LDRH     r0,[r0,#4]            ;3288  ; Dev
00001a  f4004070          AND      r0,r0,#0xf000         ;3288
00001e  f5b04f30          CMP      r0,#0xb000            ;3288
000022  d17d              BNE      |L5.288|
000024  ebc501c5          RSB      r1,r5,r5,LSL #3       ;3290
000028  488f              LDR      r0,|L5.616|
00002a  f8100011          LDRB     r0,[r0,r1,LSL #1]     ;3290
00002e  28fa              CMP      r0,#0xfa              ;3290
000030  d006              BEQ      |L5.64|
000032  ebc501c5          RSB      r1,r5,r5,LSL #3       ;3290
000036  488c              LDR      r0,|L5.616|
000038  f8100011          LDRB     r0,[r0,r1,LSL #1]     ;3290
00003c  28fb              CMP      r0,#0xfb              ;3290
00003e  d13d              BNE      |L5.188|
                  |L5.64|
000040  ebc501c5          RSB      r1,r5,r5,LSL #3       ;3292
000044  4888              LDR      r0,|L5.616|
000046  f8100011          LDRB     r0,[r0,r1,LSL #1]     ;3292
00004a  28fa              CMP      r0,#0xfa              ;3292
00004c  d101              BNE      |L5.82|
00004e  2607              MOVS     r6,#7                 ;3292
000050  e000              B        |L5.84|
                  |L5.82|
000052  2606              MOVS     r6,#6                 ;3293
                  |L5.84|
000054  2027              MOVS     r0,#0x27              ;3294
000056  7020              STRB     r0,[r4,#0]            ;3294
000058  2000              MOVS     r0,#0                 ;3295
00005a  7060              STRB     r0,[r4,#1]            ;3295
00005c  70a0              STRB     r0,[r4,#2]            ;3296
00005e  4881              LDR      r0,|L5.612|
000060  7a00              LDRB     r0,[r0,#8]            ;3297  ; Dev
000062  70e0              STRB     r0,[r4,#3]            ;3297
000064  487f              LDR      r0,|L5.612|
000066  7a00              LDRB     r0,[r0,#8]            ;3297  ; Dev
000068  1c40              ADDS     r0,r0,#1              ;3297
00006a  497e              LDR      r1,|L5.612|
00006c  7208              STRB     r0,[r1,#8]            ;3297
00006e  4608              MOV      r0,r1                 ;3298
000070  7880              LDRB     r0,[r0,#2]            ;3298  ; Dev
000072  7120              STRB     r0,[r4,#4]            ;3298
000074  f1050081          ADD      r0,r5,#0x81           ;3299
000078  7160              STRB     r0,[r4,#5]            ;3299
00007a  1cf0              ADDS     r0,r6,#3              ;3300
00007c  71a0              STRB     r0,[r4,#6]            ;3300
00007e  2000              MOVS     r0,#0                 ;3301
000080  71e0              STRB     r0,[r4,#7]            ;3301
000082  7220              STRB     r0,[r4,#8]            ;3302
000084  2700              MOVS     r7,#0                 ;3303
000086  e00a              B        |L5.158|
                  |L5.136|
000088  ebc51105          RSB      r1,r5,r5,LSL #4       ;3303
00008c  4877              LDR      r0,|L5.620|
00008e  4408              ADD      r0,r0,r1              ;3303
000090  3008              ADDS     r0,r0,#8              ;3303
000092  5dc1              LDRB     r1,[r0,r7]            ;3303
000094  f1070009          ADD      r0,r7,#9              ;3303
000098  5421              STRB     r1,[r4,r0]            ;3303
00009a  1c78              ADDS     r0,r7,#1              ;3303
00009c  b2c7              UXTB     r7,r0                 ;3303
                  |L5.158|
00009e  42b7              CMP      r7,r6                 ;3303
0000a0  dbf2              BLT      |L5.136|
0000a2  f1060009          ADD      r0,r6,#9              ;3304
0000a6  b2c1              UXTB     r1,r0                 ;3304
0000a8  4620              MOV      r0,r4                 ;3304
0000aa  f7fffffe          BL       Crc8CheckSum
0000ae  f1060109          ADD      r1,r6,#9              ;3304
0000b2  5460              STRB     r0,[r4,r1]            ;3304
0000b4  1c48              ADDS     r0,r1,#1              ;3305
0000b6  f88400c8          STRB     r0,[r4,#0xc8]         ;3305
0000ba  e069              B        |L5.400|
                  |L5.188|
0000bc  ebc501c5          RSB      r1,r5,r5,LSL #3       ;3307
0000c0  4869              LDR      r0,|L5.616|
0000c2  f8100011          LDRB     r0,[r0,r1,LSL #1]     ;3307
0000c6  28f5              CMP      r0,#0xf5              ;3307
0000c8  db2f              BLT      |L5.298|
0000ca  ebc501c5          RSB      r1,r5,r5,LSL #3       ;3307
0000ce  4866              LDR      r0,|L5.616|
0000d0  f8100011          LDRB     r0,[r0,r1,LSL #1]     ;3307
0000d4  28f9              CMP      r0,#0xf9              ;3307
0000d6  dc28              BGT      |L5.298|
0000d8  2027              MOVS     r0,#0x27              ;3309
0000da  7020              STRB     r0,[r4,#0]            ;3309
0000dc  2000              MOVS     r0,#0                 ;3310
0000de  7060              STRB     r0,[r4,#1]            ;3310
0000e0  70a0              STRB     r0,[r4,#2]            ;3311
0000e2  4860              LDR      r0,|L5.612|
0000e4  7a00              LDRB     r0,[r0,#8]            ;3312  ; Dev
0000e6  70e0              STRB     r0,[r4,#3]            ;3312
0000e8  485e              LDR      r0,|L5.612|
0000ea  7a00              LDRB     r0,[r0,#8]            ;3312  ; Dev
0000ec  1c40              ADDS     r0,r0,#1              ;3312
0000ee  495d              LDR      r1,|L5.612|
0000f0  7208              STRB     r0,[r1,#8]            ;3312
0000f2  4608              MOV      r0,r1                 ;3313
0000f4  7880              LDRB     r0,[r0,#2]            ;3313  ; Dev
0000f6  7120              STRB     r0,[r4,#4]            ;3313
0000f8  f1050081          ADD      r0,r5,#0x81           ;3314
0000fc  7160              STRB     r0,[r4,#5]            ;3314
0000fe  2003              MOVS     r0,#3                 ;3316
000100  71a0              STRB     r0,[r4,#6]            ;3316
000102  2000              MOVS     r0,#0                 ;3317
000104  71e0              STRB     r0,[r4,#7]            ;3317
000106  7220              STRB     r0,[r4,#8]            ;3319
000108  ebc51105          RSB      r1,r5,r5,LSL #4       ;3321
00010c  4857              LDR      r0,|L5.620|
00010e  4408              ADD      r0,r0,r1              ;3321
000110  7a00              LDRB     r0,[r0,#8]            ;3321
000112  7260              STRB     r0,[r4,#9]            ;3321
000114  210a              MOVS     r1,#0xa               ;3324
000116  4620              MOV      r0,r4                 ;3324
000118  f7fffffe          BL       Crc8CheckSum
00011c  72a0              STRB     r0,[r4,#0xa]          ;3324
00011e  e000              B        |L5.290|
                  |L5.288|
000120  e046              B        |L5.432|
                  |L5.290|
000122  200b              MOVS     r0,#0xb               ;3325
000124  f88400c8          STRB     r0,[r4,#0xc8]         ;3325
000128  e032              B        |L5.400|
                  |L5.298|
00012a  ebc501c5          RSB      r1,r5,r5,LSL #3       ;3327
00012e  484e              LDR      r0,|L5.616|
000130  f8100011          LDRB     r0,[r0,r1,LSL #1]     ;3327
000134  28e2              CMP      r0,#0xe2              ;3327
000136  d006              BEQ      |L5.326|
000138  ebc501c5          RSB      r1,r5,r5,LSL #3       ;3327
00013c  484a              LDR      r0,|L5.616|
00013e  f8100011          LDRB     r0,[r0,r1,LSL #1]     ;3327
000142  28e4              CMP      r0,#0xe4              ;3327
000144  d124              BNE      |L5.400|
                  |L5.326|
000146  2004              MOVS     r0,#4                 ;3329
000148  7020              STRB     r0,[r4,#0]            ;3329
00014a  2000              MOVS     r0,#0                 ;3330
00014c  7060              STRB     r0,[r4,#1]            ;3330
00014e  70a0              STRB     r0,[r4,#2]            ;3331
000150  4844              LDR      r0,|L5.612|
000152  7a00              LDRB     r0,[r0,#8]            ;3332  ; Dev
000154  70e0              STRB     r0,[r4,#3]            ;3332
000156  4843              LDR      r0,|L5.612|
000158  7a00              LDRB     r0,[r0,#8]            ;3332  ; Dev
00015a  1c40              ADDS     r0,r0,#1              ;3332
00015c  4941              LDR      r1,|L5.612|
00015e  7208              STRB     r0,[r1,#8]            ;3332
000160  4608              MOV      r0,r1                 ;3333
000162  7880              LDRB     r0,[r0,#2]            ;3333  ; Dev
000164  7120              STRB     r0,[r4,#4]            ;3333
000166  f1050081          ADD      r0,r5,#0x81           ;3334
00016a  7160              STRB     r0,[r4,#5]            ;3334
00016c  2001              MOVS     r0,#1                 ;3335
00016e  71a0              STRB     r0,[r4,#6]            ;3335
000170  ebc51105          RSB      r1,r5,r5,LSL #4       ;3336
000174  483d              LDR      r0,|L5.620|
000176  4408              ADD      r0,r0,r1              ;3336
000178  7a00              LDRB     r0,[r0,#8]            ;3336
00017a  f0000001          AND      r0,r0,#1              ;3336
00017e  71e0              STRB     r0,[r4,#7]            ;3336
000180  2108              MOVS     r1,#8                 ;3337
000182  4620              MOV      r0,r4                 ;3337
000184  f7fffffe          BL       Crc8CheckSum
000188  7220              STRB     r0,[r4,#8]            ;3337
00018a  2009              MOVS     r0,#9                 ;3338
00018c  f88400c8          STRB     r0,[r4,#0xc8]         ;3338
                  |L5.400|
000190  2001              MOVS     r0,#1                 ;3340
000192  f8040fc9          STRB     r0,[r4,#0xc9]!        ;3340
000196  2004              MOVS     r0,#4                 ;3341
000198  7060              STRB     r0,[r4,#1]            ;3341
00019a  2064              MOVS     r0,#0x64              ;3342
00019c  70e0              STRB     r0,[r4,#3]            ;3342
00019e  201e              MOVS     r0,#0x1e              ;3343
0001a0  7120              STRB     r0,[r4,#4]            ;3343
0001a2  f1a404c9          SUB      r4,r4,#0xc9           ;3343
0001a6  4629              MOV      r1,r5                 ;3344
0001a8  482d              LDR      r0,|L5.608|
0001aa  f7fffffe          BL       EnQueueBuf
0001ae  e054              B        |L5.602|
                  |L5.432|
0001b0  482c              LDR      r0,|L5.612|
0001b2  8880              LDRH     r0,[r0,#4]            ;3347  ; Dev
0001b4  f4004070          AND      r0,r0,#0xf000         ;3347
0001b8  f5b05f40          CMP      r0,#0x3000            ;3347
0001bc  d14d              BNE      |L5.602|
0001be  2004              MOVS     r0,#4                 ;3350
0001c0  7020              STRB     r0,[r4,#0]            ;3350
0001c2  2000              MOVS     r0,#0                 ;3351
0001c4  7060              STRB     r0,[r4,#1]            ;3351
0001c6  70a0              STRB     r0,[r4,#2]            ;3352
0001c8  4826              LDR      r0,|L5.612|
0001ca  7a00              LDRB     r0,[r0,#8]            ;3353  ; Dev
0001cc  70e0              STRB     r0,[r4,#3]            ;3353
0001ce  4825              LDR      r0,|L5.612|
0001d0  7a00              LDRB     r0,[r0,#8]            ;3353  ; Dev
0001d2  1c40              ADDS     r0,r0,#1              ;3353
0001d4  4923              LDR      r1,|L5.612|
0001d6  7208              STRB     r0,[r1,#8]            ;3353
0001d8  4608              MOV      r0,r1                 ;3354
0001da  7880              LDRB     r0,[r0,#2]            ;3354  ; Dev
0001dc  7120              STRB     r0,[r4,#4]            ;3354
0001de  f1050010          ADD      r0,r5,#0x10           ;3355
0001e2  7160              STRB     r0,[r4,#5]            ;3355
0001e4  2001              MOVS     r0,#1                 ;3356
0001e6  71a0              STRB     r0,[r4,#6]            ;3356
0001e8  1e68              SUBS     r0,r5,#1              ;3361
0001ea  17c1              ASRS     r1,r0,#31             ;3361
0001ec  eb007151          ADD      r1,r0,r1,LSR #29      ;3361
0001f0  f3c108c7          UBFX     r8,r1,#3,#8           ;3361
0001f4  17c1              ASRS     r1,r0,#31             ;3362
0001f6  eb007151          ADD      r1,r0,r1,LSR #29      ;3362
0001fa  10c9              ASRS     r1,r1,#3              ;3362
0001fc  eba001c1          SUB      r1,r0,r1,LSL #3       ;3362
000200  f00109ff          AND      r9,r1,#0xff           ;3362
000204  4819              LDR      r0,|L5.620|
000206  3008              ADDS     r0,r0,#8              ;3363
000208  f8100008          LDRB     r0,[r0,r8]            ;3363
00020c  2101              MOVS     r1,#1                 ;3363
00020e  fa01f109          LSL      r1,r1,r9              ;3363
000212  4208              TST      r0,r1                 ;3363
000214  d002              BEQ      |L5.540|
000216  2001              MOVS     r0,#1                 ;3363
000218  71e0              STRB     r0,[r4,#7]            ;3363
00021a  e001              B        |L5.544|
                  |L5.540|
00021c  2000              MOVS     r0,#0                 ;3364
00021e  71e0              STRB     r0,[r4,#7]            ;3364
                  |L5.544|
000220  2108              MOVS     r1,#8                 ;3366
000222  4620              MOV      r0,r4                 ;3366
000224  f7fffffe          BL       Crc8CheckSum
000228  f10404ae          ADD      r4,r4,#0xae           ;3366
00022c  f8040ca6          STRB     r0,[r4,#-0xa6]        ;3366
000230  f04f0009          MOV      r0,#9                 ;3367
000234  76a0              STRB     r0,[r4,#0x1a]         ;3367
000236  f04f0001          MOV      r0,#1                 ;3368
00023a  76e0              STRB     r0,[r4,#0x1b]         ;3368
00023c  f04f0004          MOV      r0,#4                 ;3369
000240  7720              STRB     r0,[r4,#0x1c]         ;3369
000242  f04f0064          MOV      r0,#0x64              ;3370
000246  77a0              STRB     r0,[r4,#0x1e]         ;3370
000248  f04f001e          MOV      r0,#0x1e              ;3371
00024c  77e0              STRB     r0,[r4,#0x1f]         ;3371
00024e  f1a404ae          SUB      r4,r4,#0xae           ;3371
000252  4629              MOV      r1,r5                 ;3372
000254  4802              LDR      r0,|L5.608|
000256  f7fffffe          BL       EnQueueBuf
                  |L5.602|
00025a  bf00              NOP      
00025c  e6d9              B        |L5.18|
;;;3375   
                          ENDP

00025e  0000              DCW      0x0000
                  |L5.608|
                          DCD      RS485_Queue
                  |L5.612|
                          DCD      ||Dev||
                  |L5.616|
                          DCD      Ex_Table+0x36
                  |L5.620|
                          DCD      Pannel+0x1

                          AREA ||i.IT1_Dlytime_Handle||, CODE, READONLY, ALIGN=2

                  IT1_Dlytime_Handle PROC
;;;3378   //延时发送函数.每10mS调用一次 
;;;3379   void IT1_Dlytime_Handle(void)
000000  b510              PUSH     {r4,lr}
;;;3380   {
;;;3381   		 uint8_t i;
;;;3382   	 
;;;3383   	   for(i=0;i<CHL_NUM;i++)						//通道0-传感器触发，通道1-传感器停止
000002  2400              MOVS     r4,#0
000004  e02b              B        |L6.94|
                  |L6.6|
;;;3384   		 {
;;;3385   			    //================================================================================================
;;;3386   					//延时处理
;;;3387   					if(1==bsp_CheckTimer(i))
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       bsp_CheckTimer
00000c  2801              CMP      r0,#1
00000e  d124              BNE      |L6.90|
;;;3388   					{
;;;3389   							if(DlyTable.item[i].flag==1)
000010  eb040144          ADD      r1,r4,r4,LSL #1
000014  4813              LDR      r0,|L6.100|
000016  5c40              LDRB     r0,[r0,r1]
000018  2801              CMP      r0,#1
00001a  d11e              BNE      |L6.90|
;;;3390   							{
;;;3391   										if((Dev.type&0xf000)==0xb000)
00001c  4812              LDR      r0,|L6.104|
00001e  8880              LDRH     r0,[r0,#4]  ; Dev
000020  f4004070          AND      r0,r0,#0xf000
000024  f5b04f30          CMP      r0,#0xb000
000028  d103              BNE      |L6.50|
;;;3392   										{
;;;3393   												IT1_Dev_StuLoad(i);
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       IT1_Dev_StuLoad
000030  e013              B        |L6.90|
                  |L6.50|
;;;3394   										}
;;;3395   										else if((Dev.type&0xf000)==0x3000)
000032  480d              LDR      r0,|L6.104|
000034  8880              LDRH     r0,[r0,#4]  ; Dev
000036  f4004070          AND      r0,r0,#0xf000
00003a  f5b05f40          CMP      r0,#0x3000
00003e  d10c              BNE      |L6.90|
;;;3396   										{
;;;3397   											  
;;;3398   											  IT1_Lock_DataLoad(i,DlyTable.item[i].index,DlyTable.item[i].dat);
000040  eb040344          ADD      r3,r4,r4,LSL #1
000044  4807              LDR      r0,|L6.100|
000046  4418              ADD      r0,r0,r3
000048  7882              LDRB     r2,[r0,#2]
00004a  eb040344          ADD      r3,r4,r4,LSL #1
00004e  4805              LDR      r0,|L6.100|
000050  4418              ADD      r0,r0,r3
000052  7841              LDRB     r1,[r0,#1]
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       IT1_Lock_DataLoad
                  |L6.90|
00005a  1c60              ADDS     r0,r4,#1              ;3383
00005c  b2c4              UXTB     r4,r0                 ;3383
                  |L6.94|
00005e  2c08              CMP      r4,#8                 ;3383
000060  dbd1              BLT      |L6.6|
;;;3399   										}
;;;3400   							}
;;;3401   					}				
;;;3402   		 }
;;;3403   	
;;;3404   	
;;;3405   }
000062  bd10              POP      {r4,pc}
;;;3406   
                          ENDP

                  |L6.100|
                          DCD      DlyTable+0x1
                  |L6.104|
                          DCD      ||Dev||

                          AREA ||i.IT1_ExTable_Stu_Ack||, CODE, READONLY, ALIGN=2

                  IT1_ExTable_Stu_Ack PROC
;;;3044   //RS485点对点查询状态，直接应答，走0x04报文
;;;3045   void IT1_ExTable_Stu_Ack(uint8_t index)
000000  b570              PUSH     {r4-r6,lr}
;;;3046   {
000002  4605              MOV      r5,r0
;;;3047   			 uint8_t chl;
;;;3048   	    chl=index&0x0f;
000004  f005040f          AND      r4,r5,#0xf
;;;3049   	    if((chl==0)||(chl>8))return;
000008  b10c              CBZ      r4,|L7.14|
00000a  2c08              CMP      r4,#8
00000c  dd00              BLE      |L7.16|
                  |L7.14|
;;;3050   	    chl=chl-1;
;;;3051   	
;;;3052   			TxDat.buf[0]=0x04;												//帧控制-应答报文
;;;3053   			TxDat.buf[1]=0x00;//TxDat.buf[1]=(Master_Address>>8)&0x00ff;	//目标地址H
;;;3054   			TxDat.buf[2]=Master_Address;							//目标地址L
;;;3055   
;;;3056   			TxDat.buf[3]=0X00;												//帧序列号
;;;3057   
;;;3058   			TxDat.buf[4]=Dev.addr[0];								  //网络ID
;;;3059   	    TxDat.buf[5]=0x80+chl+1;
;;;3060   	    TxDat.buf[6]=0x01;
;;;3061   	    //是传感器 上报 使能状态
;;;3062   
;;;3063   			if(Ex_Table.Exchange[chl].type>=EX_DEV_KEY)
;;;3064   			{
;;;3065   					TxDat.buf[7]=0x01;
;;;3066   					TxDat.buf[8]=Crc8CheckSum(TxDat.buf,8);				//CRC8校验
;;;3067   					TxDat.cnt=9;																	//发送总的字节数
;;;3068   					TxDat.f_tx=1;
;;;3069   			}
;;;3070   			else if(Ex_Table.Exchange[chl].type==EX_DEV_LIGHT_ADJ)//20170628 aaa
;;;3071   			{
;;;3072   					TxDat.buf[7]=0x01;														//是最后一个命令
;;;3073   				  TxDat.buf[8]=0x00;														//是最后一个命令
;;;3074   				  TxDat.buf[9]=Ex_Table.stu[chl];								//是最后一个命令
;;;3075   				
;;;3076   				  TxDat.buf[10]=Crc8CheckSum(TxDat.buf,10);			//CRC8校验
;;;3077   					TxDat.cnt=11;																	//发送总的字节数
;;;3078   					TxDat.f_tx=1;
;;;3079   			}
;;;3080   			else
;;;3081   			{
;;;3082   					TxDat.buf[7]=Ex_Table.stu[chl];
;;;3083   				  TxDat.buf[8]=Crc8CheckSum(TxDat.buf,8);				//CRC8校验
;;;3084   					TxDat.cnt=9;																	//发送总的字节数
;;;3085   					TxDat.f_tx=1;
;;;3086   			}
;;;3087   	//=====================================================================================	
;;;3088   }
00000e  bd70              POP      {r4-r6,pc}
                  |L7.16|
000010  1e60              SUBS     r0,r4,#1              ;3050
000012  b2c4              UXTB     r4,r0                 ;3050
000014  2004              MOVS     r0,#4                 ;3052
000016  492a              LDR      r1,|L7.192|
000018  70c8              STRB     r0,[r1,#3]            ;3052
00001a  2100              MOVS     r1,#0                 ;3053
00001c  4828              LDR      r0,|L7.192|
00001e  7101              STRB     r1,[r0,#4]            ;3053
000020  7141              STRB     r1,[r0,#5]            ;3054
000022  7181              STRB     r1,[r0,#6]            ;3056
000024  4827              LDR      r0,|L7.196|
000026  7881              LDRB     r1,[r0,#2]            ;3058  ; Dev
000028  4825              LDR      r0,|L7.192|
00002a  71c1              STRB     r1,[r0,#7]            ;3058
00002c  f1040081          ADD      r0,r4,#0x81           ;3059
000030  b2c1              UXTB     r1,r0                 ;3059
000032  4823              LDR      r0,|L7.192|
000034  7201              STRB     r1,[r0,#8]            ;3059
000036  2101              MOVS     r1,#1                 ;3060
000038  7241              STRB     r1,[r0,#9]            ;3060
00003a  ebc401c4          RSB      r1,r4,r4,LSL #3       ;3063
00003e  4822              LDR      r0,|L7.200|
000040  f8100011          LDRB     r0,[r0,r1,LSL #1]     ;3063
000044  28f0              CMP      r0,#0xf0              ;3063
000046  db0d              BLT      |L7.100|
000048  2101              MOVS     r1,#1                 ;3065
00004a  481d              LDR      r0,|L7.192|
00004c  7281              STRB     r1,[r0,#0xa]          ;3065
00004e  2108              MOVS     r1,#8                 ;3066
000050  1cc0              ADDS     r0,r0,#3              ;3066
000052  f7fffffe          BL       Crc8CheckSum
000056  491a              LDR      r1,|L7.192|
000058  72c8              STRB     r0,[r1,#0xb]          ;3066
00005a  2009              MOVS     r0,#9                 ;3067
00005c  7008              STRB     r0,[r1,#0]            ;3067
00005e  2001              MOVS     r0,#1                 ;3068
000060  7088              STRB     r0,[r1,#2]            ;3068
000062  e02a              B        |L7.186|
                  |L7.100|
000064  ebc401c4          RSB      r1,r4,r4,LSL #3       ;3070
000068  4817              LDR      r0,|L7.200|
00006a  f8100011          LDRB     r0,[r0,r1,LSL #1]     ;3070
00006e  2833              CMP      r0,#0x33              ;3070
000070  d114              BNE      |L7.156|
000072  2101              MOVS     r1,#1                 ;3072
000074  4812              LDR      r0,|L7.192|
000076  7281              STRB     r1,[r0,#0xa]          ;3072
000078  2100              MOVS     r1,#0                 ;3073
00007a  72c1              STRB     r1,[r0,#0xb]          ;3073
00007c  4812              LDR      r0,|L7.200|
00007e  3810              SUBS     r0,r0,#0x10           ;3074
000080  5d01              LDRB     r1,[r0,r4]            ;3074
000082  480f              LDR      r0,|L7.192|
000084  7301              STRB     r1,[r0,#0xc]          ;3074
000086  210a              MOVS     r1,#0xa               ;3076
000088  1cc0              ADDS     r0,r0,#3              ;3076
00008a  f7fffffe          BL       Crc8CheckSum
00008e  490c              LDR      r1,|L7.192|
000090  7348              STRB     r0,[r1,#0xd]          ;3076
000092  200b              MOVS     r0,#0xb               ;3077
000094  7008              STRB     r0,[r1,#0]            ;3077
000096  2001              MOVS     r0,#1                 ;3078
000098  7088              STRB     r0,[r1,#2]            ;3078
00009a  e00e              B        |L7.186|
                  |L7.156|
00009c  480a              LDR      r0,|L7.200|
00009e  3810              SUBS     r0,r0,#0x10           ;3082
0000a0  5d01              LDRB     r1,[r0,r4]            ;3082
0000a2  4807              LDR      r0,|L7.192|
0000a4  7281              STRB     r1,[r0,#0xa]          ;3082
0000a6  2108              MOVS     r1,#8                 ;3083
0000a8  1cc0              ADDS     r0,r0,#3              ;3083
0000aa  f7fffffe          BL       Crc8CheckSum
0000ae  4904              LDR      r1,|L7.192|
0000b0  72c8              STRB     r0,[r1,#0xb]          ;3083
0000b2  2009              MOVS     r0,#9                 ;3084
0000b4  7008              STRB     r0,[r1,#0]            ;3084
0000b6  2001              MOVS     r0,#1                 ;3085
0000b8  7088              STRB     r0,[r1,#2]            ;3085
                  |L7.186|
0000ba  bf00              NOP      
0000bc  e7a7              B        |L7.14|
;;;3089   //配置修改
                          ENDP

0000be  0000              DCW      0x0000
                  |L7.192|
                          DCD      TxDat
                  |L7.196|
                          DCD      ||Dev||
                  |L7.200|
                          DCD      Ex_Table+0x36

                          AREA ||i.IT1_Function_BroadCast||, CODE, READONLY, ALIGN=2

                  IT1_Function_BroadCast PROC
;;;771    //广播帧处理
;;;772    void IT1_Function_BroadCast(void)                                                   //广播无应答
000000  b510              PUSH     {r4,lr}
;;;773    {
;;;774    	      //必须用静态变量
;;;775            _Frame *ps;
;;;776    	      //uint8_t i;
;;;777    	      ps=GetQueue_InQ(&RS485_Queue,8);
000002  2108              MOVS     r1,#8
000004  482c              LDR      r0,|L8.184|
000006  f7fffffe          BL       GetQueue_InQ
00000a  4604              MOV      r4,r0
;;;778    	      if(ps==0)return;
00000c  b904              CBNZ     r4,|L8.16|
                  |L8.14|
;;;779    
;;;780            //===================================================================================================
;;;781            if(RxDat.buf[5]==0x01)                                                             //广播查询状态
;;;782            {
;;;783                    //设备物理地址
;;;784    								if((Dev.type&0xf000)==0xb000)
;;;785    								{
;;;786    										ps->buf[0] =0x04;                                                         //帧控制,从设备请求命令
;;;787    										ps->buf[1] =(Master_Address>>8)&0x00ff;                       						//目标地址
;;;788    										ps->buf[2] =Master_Address;                                       				//目标地址
;;;789    										ps->buf[3] =0x00;                                                         //帧序列号
;;;790    										ps->buf[4] =Dev.addr[0];                                             			//网络ID
;;;791    										ps->buf[5] =0x10;                     
;;;792    										ps->buf[6] =0x03;                                                         //数据长度
;;;793    												
;;;794    										ps->buf[7]=0x00;
;;;795    										ps->buf[8]=0x00;																													//设置温度
;;;796    										ps->buf[9]=0x00;																													//实际温度	
;;;797    											
;;;798    										ps->buf[10]=Crc8CheckSum(ps->buf,10);                         						//CRC8校验
;;;799    										ps->cnt=11;                                                               //发送总的字节数
;;;800    										ps->flag=1;
;;;801    										ps->resend=0;
;;;802    										ps->ackwait=0;
;;;803    										EnQueueBuf(&RS485_Queue,8);	
;;;804    								}
;;;805    								//如果是锁，则上报当前的状态和随机密码
;;;806    								else if((Dev.type&0xf000)==0x3000)
;;;807    								{
;;;808    										IT1_Load_RS485_Ack(OPT_OK);
;;;809    										IT1_Lock_DataLoad(0,0x01,0x00);
;;;810    								}
;;;811             }
;;;812            //=====================================================================================================
;;;813            else if(RxDat.buf[5]==0x02)                                                        //广播查询在线
;;;814            {
;;;815                    Dev.stu=DEV_REGISTER;
;;;816                    RegTimeClr();					
;;;817                    InitQueueBUF(&RS485_Queue);					
;;;818            }
;;;819    }
00000e  bd10              POP      {r4,pc}
                  |L8.16|
000010  482a              LDR      r0,|L8.188|
000012  79c0              LDRB     r0,[r0,#7]            ;781
000014  2801              CMP      r0,#1                 ;781
000016  d141              BNE      |L8.156|
000018  4829              LDR      r0,|L8.192|
00001a  8880              LDRH     r0,[r0,#4]            ;784  ; Dev
00001c  f4004070          AND      r0,r0,#0xf000         ;784
000020  f5b04f30          CMP      r0,#0xb000            ;784
000024  d12a              BNE      |L8.124|
000026  2004              MOVS     r0,#4                 ;786
000028  7020              STRB     r0,[r4,#0]            ;786
00002a  2000              MOVS     r0,#0                 ;787
00002c  7060              STRB     r0,[r4,#1]            ;787
00002e  70a0              STRB     r0,[r4,#2]            ;788
000030  70e0              STRB     r0,[r4,#3]            ;789
000032  4823              LDR      r0,|L8.192|
000034  7880              LDRB     r0,[r0,#2]            ;790  ; Dev
000036  7120              STRB     r0,[r4,#4]            ;790
000038  2010              MOVS     r0,#0x10              ;791
00003a  7160              STRB     r0,[r4,#5]            ;791
00003c  2003              MOVS     r0,#3                 ;792
00003e  71a0              STRB     r0,[r4,#6]            ;792
000040  2000              MOVS     r0,#0                 ;794
000042  71e0              STRB     r0,[r4,#7]            ;794
000044  7220              STRB     r0,[r4,#8]            ;795
000046  7260              STRB     r0,[r4,#9]            ;796
000048  210a              MOVS     r1,#0xa               ;798
00004a  4620              MOV      r0,r4                 ;798
00004c  f7fffffe          BL       Crc8CheckSum
000050  f10404ae          ADD      r4,r4,#0xae           ;798
000054  f8040ca4          STRB     r0,[r4,#-0xa4]        ;798
000058  f04f000b          MOV      r0,#0xb               ;799
00005c  76a0              STRB     r0,[r4,#0x1a]         ;799
00005e  f04f0001          MOV      r0,#1                 ;800
000062  76e0              STRB     r0,[r4,#0x1b]         ;800
000064  f04f0000          MOV      r0,#0                 ;801
000068  7720              STRB     r0,[r4,#0x1c]         ;801
00006a  77e0              STRB     r0,[r4,#0x1f]         ;802
00006c  f1a404ae          SUB      r4,r4,#0xae           ;802
000070  f04f0108          MOV      r1,#8                 ;803
000074  4810              LDR      r0,|L8.184|
000076  f7fffffe          BL       EnQueueBuf
00007a  e01b              B        |L8.180|
                  |L8.124|
00007c  4810              LDR      r0,|L8.192|
00007e  8880              LDRH     r0,[r0,#4]            ;806  ; Dev
000080  f4004070          AND      r0,r0,#0xf000         ;806
000084  f5b05f40          CMP      r0,#0x3000            ;806
000088  d114              BNE      |L8.180|
00008a  20fb              MOVS     r0,#0xfb              ;808
00008c  f7fffffe          BL       IT1_Load_RS485_Ack
000090  2200              MOVS     r2,#0                 ;809
000092  2101              MOVS     r1,#1                 ;809
000094  4610              MOV      r0,r2                 ;809
000096  f7fffffe          BL       IT1_Lock_DataLoad
00009a  e00b              B        |L8.180|
                  |L8.156|
00009c  4807              LDR      r0,|L8.188|
00009e  79c0              LDRB     r0,[r0,#7]            ;813
0000a0  2802              CMP      r0,#2                 ;813
0000a2  d107              BNE      |L8.180|
0000a4  2001              MOVS     r0,#1                 ;815
0000a6  4906              LDR      r1,|L8.192|
0000a8  7188              STRB     r0,[r1,#6]            ;815
0000aa  f7fffffe          BL       RegTimeClr
0000ae  4802              LDR      r0,|L8.184|
0000b0  f7fffffe          BL       InitQueueBUF
                  |L8.180|
0000b4  bf00              NOP      
0000b6  e7aa              B        |L8.14|
;;;820    
                          ENDP

                  |L8.184|
                          DCD      RS485_Queue
                  |L8.188|
                          DCD      RxDat
                  |L8.192|
                          DCD      ||Dev||

                          AREA ||i.IT1_Function_CMD||, CODE, READONLY, ALIGN=2

                  IT1_Function_CMD PROC
;;;822    //命令帧处理
;;;823    void IT1_Function_CMD(void)                                                           //主机发送命令
000000  b510              PUSH     {r4,lr}
;;;824    {
;;;825            // _Frame *ps;
;;;826    				uint8_t chl;
;;;827    	      //ps=GetQueue_InQ(&RS485_Queue,8);
;;;828    	      //if(ps==0)return;
;;;829    	
;;;830            switch (RxDat.buf[5])
000002  482e              LDR      r0,|L9.188|
000004  79c0              LDRB     r0,[r0,#7]
000006  2807              CMP      r0,#7
000008  d006              BEQ      |L9.24|
00000a  2808              CMP      r0,#8
00000c  d042              BEQ      |L9.148|
00000e  2809              CMP      r0,#9
000010  d04d              BEQ      |L9.174|
000012  2820              CMP      r0,#0x20
000014  d14e              BNE      |L9.180|
000016  e049              B        |L9.172|
                  |L9.24|
;;;831            {
;;;832                    case Dev_State_CMD:                                                             //设备状态上报											
;;;833                          if((Dev.type&0xf000)==0xb000)
000018  4829              LDR      r0,|L9.192|
00001a  8880              LDRH     r0,[r0,#4]  ; Dev
00001c  f4004070          AND      r0,r0,#0xf000
000020  f5b04f30          CMP      r0,#0xb000
000024  d126              BNE      |L9.116|
;;;834    											{
;;;835    													chl=RxDat.buf[7]&0x0f;
000026  4825              LDR      r0,|L9.188|
000028  7a40              LDRB     r0,[r0,#9]
00002a  f000040f          AND      r4,r0,#0xf
;;;836    													if((chl==0)||(chl>8))
00002e  b10c              CBZ      r4,|L9.52|
000030  2c08              CMP      r4,#8
000032  dd03              BLE      |L9.60|
                  |L9.52|
;;;837    													{
;;;838    															IT1_Load_RS485_Ack(OPT_ERR);
000034  20fc              MOVS     r0,#0xfc
000036  f7fffffe          BL       IT1_Load_RS485_Ack
00003a  e02a              B        |L9.146|
                  |L9.60|
;;;839    													}
;;;840    													else
;;;841    													{
;;;842    															chl=chl-1;
00003c  1e60              SUBS     r0,r4,#1
00003e  b2c4              UXTB     r4,r0
;;;843    															if(Ex_Table.Exchange[chl].type==0xff)
000040  ebc401c4          RSB      r1,r4,r4,LSL #3
000044  481f              LDR      r0,|L9.196|
000046  f8100011          LDRB     r0,[r0,r1,LSL #1]
00004a  28ff              CMP      r0,#0xff
00004c  d103              BNE      |L9.86|
;;;844    															{
;;;845    																		IT1_Load_RS485_Ack(OPT_ERR);
00004e  20fc              MOVS     r0,#0xfc
000050  f7fffffe          BL       IT1_Load_RS485_Ack
000054  e01d              B        |L9.146|
                  |L9.86|
;;;846    															}
;;;847    															else
;;;848    															{
;;;849    																		DlyEvent_handle(chl,chl,chl,(1000+200*chl));
000056  21c8              MOVS     r1,#0xc8
000058  fb04f001          MUL      r0,r4,r1
00005c  f500707a          ADD      r0,r0,#0x3e8
000060  b283              UXTH     r3,r0
000062  4622              MOV      r2,r4
000064  4621              MOV      r1,r4
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       DlyEvent_handle
;;;850    																		IT1_Load_RS485_Ack(OPT_OK);
00006c  20fb              MOVS     r0,#0xfb
00006e  f7fffffe          BL       IT1_Load_RS485_Ack
000072  e00e              B        |L9.146|
                  |L9.116|
;;;851    															}
;;;852    													}
;;;853    											}
;;;854    											//锁转发器处理
;;;855    											else if((Dev.type&0xf000)==0x3000)
000074  4812              LDR      r0,|L9.192|
000076  8880              LDRH     r0,[r0,#4]  ; Dev
000078  f4004070          AND      r0,r0,#0xf000
00007c  f5b05f40          CMP      r0,#0x3000
000080  d107              BNE      |L9.146|
;;;856    											{
;;;857    													IT1_Load_RS485_Ack(OPT_OK);
000082  20fb              MOVS     r0,#0xfb
000084  f7fffffe          BL       IT1_Load_RS485_Ack
;;;858    													IT1_Lock_DataLoad(0,0x01,0x00);
000088  2200              MOVS     r2,#0
00008a  2101              MOVS     r1,#1
00008c  4610              MOV      r0,r2
00008e  f7fffffe          BL       IT1_Lock_DataLoad
                  |L9.146|
;;;859    											}
;;;860                    break;
000092  e010              B        |L9.182|
                  |L9.148|
;;;861                         
;;;862                    //=======================================================================================================
;;;863                    //0x03 + 0x00+Addr + 0xXX + 0x00 + 0x20 + 0x00 + CRC
;;;864                    case Dev_OnLine_CMD:                                            //查询设备是否在线
;;;865                          //实际地址 
;;;866                            if(RxDat.buf[7]>=4)
000094  4809              LDR      r0,|L9.188|
000096  7a40              LDRB     r0,[r0,#9]
000098  2804              CMP      r0,#4
00009a  db03              BLT      |L9.164|
;;;867    												{
;;;868    													      IT1_Load_RS485_Ack(OPT_ERR);
00009c  20fc              MOVS     r0,#0xfc
00009e  f7fffffe          BL       IT1_Load_RS485_Ack
0000a2  e002              B        |L9.170|
                  |L9.164|
;;;869    												}	
;;;870                            else
;;;871                            {													
;;;872    																IT1_Load_RS485_Ack(OPT_OK);
0000a4  20fb              MOVS     r0,#0xfb
0000a6  f7fffffe          BL       IT1_Load_RS485_Ack
                  |L9.170|
;;;873    												}
;;;874                    break;
0000aa  e004              B        |L9.182|
                  |L9.172|
;;;875                    case ACK_CMD:                                                   //应答命令
;;;876                    
;;;877                    break;
0000ac  e003              B        |L9.182|
                  |L9.174|
;;;878    								//===========================================================================================
;;;879    								//20171104，这条指令已经没用
;;;880    								//查产品序列号
;;;881    								//主机:0x01 + 0x00+Addr + 0xXX + 0x00 + 0x09 + 0x01+0xXX+ CRC
;;;882    								//从机:0x06 + 0x0000 + 0xXX + Addr + 0xXX（设备总数）+ 数据长度+ 数据 + CRC
;;;883    								case 0x09:
;;;884    											  IT1_Load_RS485_InfoReport();
0000ae  f7fffffe          BL       IT1_Load_RS485_InfoReport
;;;885    								break;
0000b2  e000              B        |L9.182|
                  |L9.180|
;;;886    								
;;;887                    default:
;;;888    									
;;;889                    break;
0000b4  bf00              NOP      
                  |L9.182|
0000b6  bf00              NOP                            ;860
;;;890            }
;;;891    }
0000b8  bd10              POP      {r4,pc}
;;;892    //============================================================================================================
                          ENDP

0000ba  0000              DCW      0x0000
                  |L9.188|
                          DCD      RxDat
                  |L9.192|
                          DCD      ||Dev||
                  |L9.196|
                          DCD      Ex_Table+0x36

                          AREA ||i.IT1_Function_Date||, CODE, READONLY, ALIGN=2

                  IT1_Function_Date PROC
;;;898    
;;;899    void IT1_Function_Date(void)                                                                //主机发送数据帧命令
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;900    {
;;;901    		
;;;902    		uint8_t Date_Num,rt/*,i*/;
;;;903    		uint8_t index,type/*,cmd,route,cmd_dat=0*/;
;;;904    	
;;;905    		//以下是锁数据
;;;906    	  uint8_t i,cmd,userkey[8],len,flagok,tmp;
;;;907    
;;;908    		//================================================================================================
;;;909    		Date_Num=RxDat.buf[6];                                                         			//数据字节个数
000004  48f8              LDR      r0,|L10.1000|
000006  f890b008          LDRB     r11,[r0,#8]
;;;910    		
;;;911    		if(Date_Num==0)
00000a  f1bb0f00          CMP      r11,#0
00000e  d104              BNE      |L10.26|
;;;912    		{
;;;913    				IT1_Load_RS485_Ack(OPT_ERR); 
000010  20fc              MOVS     r0,#0xfc
000012  f7fffffe          BL       IT1_Load_RS485_Ack
                  |L10.22|
;;;914    				return;
;;;915    		}
;;;916    		
;;;917    		//遥控器和传感器的转发器
;;;918    		if((Dev.type&0xf000)==0xb000)
;;;919    		{
;;;920            
;;;921    				index=RxDat.buf[5]&0x0f; 
;;;922    				if((index==0)||(index>8))
;;;923    				{
;;;924    					  IT1_Load_RS485_Ack(OPT_ERR); 
;;;925    						return;
;;;926    				}
;;;927    				
;;;928    				//==============================================================================================
;;;929    				rt=RE_OK;
;;;930    				index=index-1;
;;;931    				type=Ex_Table.Exchange[index].type;
;;;932    				//cmd=RxDat.buf[7];
;;;933    				//if(Date_Num>=2)cmd_dat=RxDat.buf[8];
;;;934    				//===============================================================================================
;;;935    				//54键和42键 旋转音乐遥控器
;;;936    				if((type>=0xf0)&&(type<=0xff))
;;;937    				{
;;;938    							//按键使能
;;;939    							if((RxDat.buf[6]==2)&&(RxDat.buf[7]==4)){Remote_Key_En(index,RxDat.buf[8]);}
;;;940    							//按键禁止
;;;941    							else if((RxDat.buf[6]==2)&&(RxDat.buf[7]==5)){Remote_Key_Dis(index,RxDat.buf[8]);}			
;;;942    							//按键全部禁止
;;;943    							else if((RxDat.buf[6]==1)&&(RxDat.buf[7]==7)){Remote_Key_Dis(index,0xff);}
;;;944    							//按键全部使能
;;;945    							else if((RxDat.buf[6]==1)&&(RxDat.buf[7]==8)){Remote_Key_En(index,0xff);}
;;;946    							
;;;947    							IT1_Dev_StuLoad(index);
;;;948    							rt=OPT_OK;
;;;949    				}
;;;950    				//传感器
;;;951    				else if((type>=0xe0)&&(type<=0xef))
;;;952    				{
;;;953    							//传感器使能
;;;954    							if((RxDat.buf[6]==1)&&(RxDat.buf[7]==2)){Remote_Key_En(index,1);}
;;;955    							//传感器禁止
;;;956    							else if((RxDat.buf[6]==1)&&(RxDat.buf[7]==1)){Remote_Key_Dis(index,1);}	
;;;957    
;;;958    							IT1_Dev_StuLoad(index);
;;;959    							rt=OPT_OK;
;;;960    				}
;;;961    				//==============================================================================================
;;;962    				//多媒体
;;;963    				else if(type==EX_DEV_MEDIA)
;;;964    				{
;;;965    //							  //先唤醒，在发送数据
;;;966    //						    wl_wakeup_frame(0);
;;;967    //						    bsp_StartTimer(0,1000);
;;;968    //								
;;;969    //								//延时处理
;;;970    //						   	Dly_Table.item[0].flag=1;
;;;971    //							  Dly_Table.item[0].index=0;
;;;972    //						    Dly_Table.item[0].cmd=0;
;;;973    //						    Dly_Table.item[0].len=Date_Num;
;;;974    //						    for(i=0;i<Date_Num;i++)Dly_Table.item[0].dat[i]=RxDat.buf[7+i];	
;;;975    				}
;;;976    				//电机类
;;;977    //			else if((type==EX_DEV_MOTOR_R)||(type==EX_DEV_MOTOR_E)||(type==EX_DEV_BLIND_R)||(type==EX_DEV_BLIND_E))
;;;978    //				{
;;;979    //						if(cmd==0x10)			//电机开
;;;980    //						{
;;;981    //							  if(Ex_Table.Exchange[index].stu==0)cmd=0x07;
;;;982    //							  else                                    cmd=0x09;
;;;983    //								Wireless_Dev_Action(index,cmd,0,0);
;;;984    //							  Ex_Table.stu[index]=0x10;
;;;985    //						}
;;;986    //						else if(cmd==0x12)//电机关
;;;987    //						{
;;;988    //							  Wireless_Dev_Action(index,0x08,0,0);
;;;989    //							  Ex_Table.stu[index]=0x12;
;;;990    //						}
;;;991    //						else if(cmd==0x11)//电机关
;;;992    //						{
;;;993    //							  if(Ex_Table.Exchange[index].stu==0)cmd=0x09;
;;;994    //							  else                                    cmd=0x07;
;;;995    //							  Wireless_Dev_Action(index,cmd,0,0);
;;;996    //							  Ex_Table.stu[index]=0x11;
;;;997    //						}
;;;998    //						else if(cmd==0x1d)//电机翻转
;;;999    //						{
;;;1000   //							  Exchangebuf.type=Ex_Table.Exchange[index].type;
;;;1001   //							  Exchangebuf.addr=Ex_Table.Exchange[index].addr;
;;;1002   //							  Exchangebuf.wl_addr[0]=Ex_Table.Exchange[index].wl_addr[0];
;;;1003   //							  Exchangebuf.wl_addr[1]=Ex_Table.Exchange[index].wl_addr[1];
;;;1004   //							  Exchangebuf.wl_addr[2]=Ex_Table.Exchange[index].wl_addr[2];
;;;1005   //							  Exchangebuf.channel=Ex_Table.Exchange[index].channel;
;;;1006   //								if(Ex_Table.Exchange[index].stu==0)
;;;1007   //								{
;;;1008   //									  Exchangebuf.stu= 0x01;
;;;1009   //								}
;;;1010   //								else
;;;1011   //								{
;;;1012   //									  Exchangebuf.stu= 0x00;
;;;1013   //								}
;;;1014   //								
;;;1015   //								Write_Ex_Table(index);
;;;1016   //						}
;;;1017   //						else if(cmd==0x14)//运行到指定点
;;;1018   //						{
;;;1019   //							   route=RxDat.buf[8];
;;;1020   //	               if(route<=0x64)
;;;1021   //								 {
;;;1022   //									   route=100-route;
;;;1023   //										 if(Ex_Table.Exchange[index].stu==0x01)route=100-route;
;;;1024   //							   }
;;;1025   //								 else
;;;1026   //								 {
;;;1027   //									   route=0;
;;;1028   //								 }
;;;1029   //								 
;;;1030   //								 cmd=0x19;
;;;1031   //								 Wireless_Dev_Action(index,cmd,route,0);
;;;1032   //						}
;;;1033   //						else
;;;1034   //						{
;;;1035   //							   rt=RE_ERR;
;;;1036   //						}
;;;1037   //				}
;;;1038   //				//==========================================================================================
;;;1039   //				else if(type==EX_DEV_SOCKET)   //智能插座
;;;1040   //				{
;;;1041   //						if(cmd==0xe6)     //关灯
;;;1042   //						{
;;;1043   //							  Wireless_Dev_Action(index,0x08,0,0);
;;;1044   //							  Ex_Table.stu[index]=0x03;
;;;1045   //						}
;;;1046   //						else if(cmd==0xe5)//开灯
;;;1047   //						{
;;;1048   //								Wireless_Dev_Action(index,0x07,0,0);
;;;1049   //							  Ex_Table.stu[index]=0x02;
;;;1050   //						}
;;;1051   //						else
;;;1052   //						{
;;;1053   //							   rt=RE_ERR;
;;;1054   //						}
;;;1055   //				}
;;;1056   //        //=========================================================================================				
;;;1057   //				else if(type==EX_DEV_LIGHT)    //灯光			
;;;1058   //				{
;;;1059   //					  if(cmd==0x01)     //关灯
;;;1060   //						{
;;;1061   //							   Wireless_Dev_Action(index,0x08,0,0);
;;;1062   //							   Ex_Table.stu[index]=0x00;
;;;1063   //						}
;;;1064   //						else if(cmd==0x02)//开灯
;;;1065   //						{
;;;1066   //								Wireless_Dev_Action(index,0x07,0,0);
;;;1067   //							  Ex_Table.stu[index]=0x01;
;;;1068   //						}
;;;1069   //						else
;;;1070   //						{
;;;1071   //							   rt=RE_ERR;
;;;1072   //						}
;;;1073   //				}
;;;1074   //				//==========================================================================================
;;;1075   //				//调光灯 add 2016.2.23
;;;1076   //				else if(type==EX_DEV_LIGHT_ADJ)    //灯光			
;;;1077   //				{
;;;1078   //					  if(cmd==0x01)     //关灯
;;;1079   //						{
;;;1080   //							   Wireless_Dev_Action(index,0x08,0,0);      //赵工调光灯不支持
;;;1081   //							   //Wireless_Dev_Action(index,0x19,0,0);    
;;;1082   //							   Ex_Table.stu[index]=0x00;
;;;1083   //						}
;;;1084   //						else if(cmd==0x02)//开灯
;;;1085   //						{
;;;1086   //								 Wireless_Dev_Action(index,0x07,0,0);
;;;1087   //							   //Wireless_Dev_Action(index,0x19,0x64,0); 
;;;1088   //							   Ex_Table.stu[index]=0x64;
;;;1089   //						}
;;;1090   //						else if(cmd==0x03)
;;;1091   //						{
;;;1092   //							  //Wireless_Dev_Action(index,0x1d,cmd_dat,0);  //赵工这里用0x19
;;;1093   //							  Wireless_Dev_Action(index,0x19,cmd_dat,0);  //赵工这里用0x19
;;;1094   //							  if(cmd_dat>100)cmd_dat=100;
;;;1095   //							  Ex_Table.stu[index]=100-cmd_dat;
;;;1096   //						}
;;;1097   //						else
;;;1098   //						{
;;;1099   //							   rt=RE_ERR;
;;;1100   //						}
;;;1101   //				}
;;;1102   				//==========================================================================================
;;;1103           else
;;;1104   				{  
;;;1105   						rt=RE_ERR;
;;;1106           }	
;;;1107   				
;;;1108           if(rt==RE_OK)IT1_RS485_Report(index);
;;;1109           IT1_Load_RS485_Ack(rt); 
;;;1110   		}
;;;1111   				//如果是锁则进行锁处理
;;;1112   		else if((Dev.type&0xf000)==0x3000)
;;;1113   		{
;;;1114   			  index=RxDat.buf[5]&0x0f; 
;;;1115   				//对锁本身操作
;;;1116   			  if(index==0)																
;;;1117   				{	
;;;1118   							if(Date_Num==1)
;;;1119   							{
;;;1120   										cmd=RxDat.buf[7]; 
;;;1121   										//布防
;;;1122   										if(cmd==0x05)
;;;1123   										{
;;;1124   													LockItem=lock.item;
;;;1125   													LockItem.safe =0x01;
;;;1126   											    //LockItem.stu|=0x02;			//布防时同时开启推送，同时发关门指令
;;;1127   											    LockItem.stu|=0x06;
;;;1128   													Write_Lock_Table(0);
;;;1129   	
;;;1130   													IT1_Load_RS485_Ack(OPT_OK);
;;;1131   
;;;1132   											    LockItem.stu&=0xfe;				//关门
;;;1133   													IT1_Lock_DataLoad(0,0x01,LockItem.stu);		//20180328
;;;1134   											    //IT1_Lock_DataLoad(0,0x01,0x06);											    
;;;1135   													DlyEvent_handle(0,0x03,0x06,1000);
;;;1136   											
;;;1137   											    
;;;1138   										}
;;;1139   										//撤防
;;;1140   										else if(cmd==0x06)
;;;1141   										{
;;;1142   													LockItem=lock.item;
;;;1143   													LockItem.safe =0x00;
;;;1144   											
;;;1145   											    LockItem.stu&=0xf9;				//20180328 撤防同时去掉推送
;;;1146   											
;;;1147   													Write_Lock_Table(0);
;;;1148   													IT1_Load_RS485_Ack(OPT_OK);
;;;1149   											    IT1_Lock_DataLoad(0,0x01,0x00);
;;;1150   										}
;;;1151   										//20180320
;;;1152   										else if(cmd==0x02)
;;;1153   										{
;;;1154   											    IT1_Load_RS485_Ack(OPT_OK);
;;;1155   											    IT1_Lock_DataLoad(0,0x01,0x00);
;;;1156   										}
;;;1157   										//0x08指令，初始化密码
;;;1158   										else if(cmd==0x08)
;;;1159   										{
;;;1160   											    LockItem=lock.item;
;;;1161   													for(i=0;i<6;i++)LockItem.key[i]=i+1+0x30;LockItem.key[6]=0xff;LockItem.key[7]=0xff;								
;;;1162   													Write_Lock_Table(0);
;;;1163   													IT1_Load_RS485_Ack(OPT_OK);
;;;1164   											
;;;1165   											    //tmp=lock.item.stu;
;;;1166   											    //tmp=tmp|0x18;
;;;1167   													//if(cmd==0x04)tmp=tmp|0x18;
;;;1168   													//else if(cmd==0x03)tmp=tmp|0x28;
;;;1169   											    IT1_Lock_DataLoad(0,0x01,0x38);
;;;1170   													
;;;1171   										}
;;;1172   										return;
;;;1173   								    
;;;1174   							}
;;;1175   							//推送指令开关
;;;1176   							else if(Date_Num==2)
;;;1177   							{
;;;1178   								
;;;1179   								    //if((RxDat.buf[7]==7)&&(RxDat.buf[8]==1))Dev.mode|=0x02;
;;;1180   										//else if((RxDat.buf[7]==7)&&(RxDat.buf[8]==2))Dev.mode&=0xfd;
;;;1181   								    //Write_Dev(Dev.mode,TYPE_EE_ADDR_MODE);
;;;1182   								
;;;1183   								    //20180326 add================================================
;;;1184   								   	LockItem=lock.item;
;;;1185   								    if((RxDat.buf[7]==7)&&(RxDat.buf[8]==1))LockItem.stu|=0x02;
;;;1186   										else if((RxDat.buf[7]==7)&&(RxDat.buf[8]==0))LockItem.stu&=0xfd;//clf mod RxDat.buf[8] 2=>0
;;;1187   										Write_Lock_Table(0);
;;;1188   								    //=============================================================
;;;1189   								
;;;1190   										IT1_Load_RS485_Ack(OPT_OK);
;;;1191   										//IT1_Lock_DataLoad(0,0x01,Dev.mode);
;;;1192   								    IT1_Lock_DataLoad(0,0x01,lock.item.stu);
;;;1193   								    return;
;;;1194   							}
;;;1195   							else if(Date_Num==9)
;;;1196   							{
;;;1197   										cmd=RxDat.buf[7]; 
;;;1198   										for(i=0;i<8;i++)userkey[i]=RxDat.buf[8+i]^lock.randkey[i];		
;;;1199   										i=0;
;;;1200   										len=8;
;;;1201   										if(lock.item.key[7]==0xff)len--;
;;;1202   										if(lock.item.key[6]==0xff)len--;
;;;1203   										
;;;1204   										while(i<len)
;;;1205   										{
;;;1206   													if(userkey[i]!=lock.item.key[i])break;
;;;1207   													i++;
;;;1208   										}
;;;1209   										//密码错误
;;;1210   										if(cmd==0x03)					flagok=1;
;;;1211   										else if(i==len)					flagok=1;
;;;1212   										else                    flagok=0;
;;;1213   							}
;;;1214   							else
;;;1215   							{
;;;1216   										flagok=0;
;;;1217   							}
;;;1218   							
;;;1219   							//有错误不处理
;;;1220   							if(flagok==0)
;;;1221   							{
;;;1222   									IT1_Load_RS485_Ack(OPT_OK);
;;;1223   									//IT1_Lock_DataLoad(0,0x01,0x00);
;;;1224   								  IT1_Lock_DataLoad(0,0x01,0x20);
;;;1225   									return;
;;;1226   							}
;;;1227   							
;;;1228   							index=RxDat.buf[5]&0x0f; 
;;;1229   							
;;;1230   							if((cmd==0x01)||(cmd==0x02))		//开锁 和关锁
;;;1231   							{
;;;1232   										//喂狗
;;;1233   										IWDG_Feed();	
;;;1234   										//应答
;;;1235   										IT1_Load_RS485_Ack(OPT_OK);
;;;1236   										RS485_Send(TxDat.buf,TxDat.cnt);
;;;1237   										TxDat.f_tx=0;
;;;1238   										lock.index=index;
;;;1239   
;;;1240   										//无线唤醒包，需要0.5秒
;;;1241   										wl_wakeup_frame(0);
;;;1242   										//发送数据
;;;1243   										Wireless_Lock_Action(0,cmd);	
;;;1244   										//Wireless_Lock_Action(0,0xcf);	
;;;1245   							}
;;;1246   							//校验密码
;;;1247   							else if(cmd==0x04)
;;;1248   							{
;;;1249   										lock.setkeytime=100;	
;;;1250   										IT1_Load_RS485_Ack(OPT_OK);
;;;1251   							}	
;;;1252   							//重新设置新密码
;;;1253   							else if(cmd==0x03)
;;;1254   							{
;;;1255   										if(lock.setkeytime>0)
;;;1256   										{
;;;1257   													LockItem=lock.item;
;;;1258   													for(i=0;i<8;i++)LockItem.key [i]=userkey[i];									
;;;1259   													Write_Lock_Table(0);
;;;1260   													IT1_Load_RS485_Ack(OPT_OK);
;;;1261   										}
;;;1262   										else
;;;1263   										{
;;;1264   													IT1_Load_RS485_Ack(OPT_ERR);
;;;1265   										}
;;;1266   							}
;;;1267   //							//布防
;;;1268   //							else if(cmd==0x05)
;;;1269   //							{
;;;1270   //										LockItem=lock.item;
;;;1271   //										LockItem.safe =0x01;
;;;1272   //										Write_Lock_Table(0);
;;;1273   //										IT1_Load_RS485_Ack(OPT_OK);
;;;1274   //							}
;;;1275   //							//撤防
;;;1276   //							else if(cmd==0x06)
;;;1277   //							{
;;;1278   //										LockItem=lock.item;
;;;1279   //										LockItem.safe =0x00;
;;;1280   //										Write_Lock_Table(0);
;;;1281   //										IT1_Load_RS485_Ack(OPT_OK);
;;;1282   //							}
;;;1283   
;;;1284   							tmp=lock.item.stu;
;;;1285   							tmp&=0x07;
;;;1286   //实际原因为APP发关指令时，模拟发了一个关指令，以便APP能回复操作，造成门锁实际和转发器不一致
;;;1287   							if (cmd==0x02)tmp|=0x01;
;;;1288   							else 					tmp&=~0x01;
;;;1289   //							if(cmd==0x04)tmp=tmp|0x18;
;;;1290   //							else if(cmd==0x03)tmp=tmp|0x28;
;;;1291   							if(cmd==0x03)tmp=tmp|0x28;
;;;1292   							if(cmd==0x04)tmp=tmp|0x18;
;;;1293   							else         tmp=tmp|0x08;
;;;1294   							
;;;1295   							IT1_Lock_DataLoad(0,0x01,tmp);		
;;;1296   					}
;;;1297   					//对指纹禁止和使能处理
;;;1298   					else
;;;1299   					{
;;;1300   						  //指纹锁触发有效
;;;1301   						  tmp=index;
;;;1302   							if((RxDat.buf[6]==1)&&(RxDat.buf[7]==2)){Remote_Key_En(0,tmp);}
;;;1303   							//指纹锁触发禁止
;;;1304   							else if((RxDat.buf[6]==1)&&(RxDat.buf[7]==1)){Remote_Key_Dis(0,tmp);}	
;;;1305              
;;;1306   							IT1_Load_RS485_Ack(OPT_OK);
;;;1307   							IT1_Dev_StuLoad(index);
;;;1308   						
;;;1309   					}
;;;1310   	}
;;;1311   }
000016  e8bd8ffe          POP      {r1-r11,pc}
                  |L10.26|
00001a  48f4              LDR      r0,|L10.1004|
00001c  8880              LDRH     r0,[r0,#4]            ;918  ; Dev
00001e  f4004070          AND      r0,r0,#0xf000         ;918
000022  f5b04f30          CMP      r0,#0xb000            ;918
000026  d179              BNE      |L10.284|
000028  48ef              LDR      r0,|L10.1000|
00002a  79c0              LDRB     r0,[r0,#7]            ;921
00002c  f000060f          AND      r6,r0,#0xf            ;921
000030  b10e              CBZ      r6,|L10.54|
000032  2e08              CMP      r6,#8                 ;922
000034  dd03              BLE      |L10.62|
                  |L10.54|
000036  20fc              MOVS     r0,#0xfc              ;924
000038  f7fffffe          BL       IT1_Load_RS485_Ack
00003c  e7eb              B        |L10.22|
                  |L10.62|
00003e  20fe              MOVS     r0,#0xfe              ;929
000040  9002              STR      r0,[sp,#8]            ;929
000042  1e70              SUBS     r0,r6,#1              ;930
000044  b2c6              UXTB     r6,r0                 ;930
000046  ebc601c6          RSB      r1,r6,r6,LSL #3       ;931
00004a  48e9              LDR      r0,|L10.1008|
00004c  f8108011          LDRB     r8,[r0,r1,LSL #1]     ;931
000050  f1b80ff0          CMP      r8,#0xf0              ;936
000054  db3d              BLT      |L10.210|
000056  f1b80fff          CMP      r8,#0xff              ;936
00005a  dc3a              BGT      |L10.210|
00005c  48e2              LDR      r0,|L10.1000|
00005e  7a00              LDRB     r0,[r0,#8]            ;939
000060  2802              CMP      r0,#2                 ;939
000062  d109              BNE      |L10.120|
000064  48e0              LDR      r0,|L10.1000|
000066  7a40              LDRB     r0,[r0,#9]            ;939
000068  2804              CMP      r0,#4                 ;939
00006a  d105              BNE      |L10.120|
00006c  48de              LDR      r0,|L10.1000|
00006e  7a81              LDRB     r1,[r0,#0xa]          ;939
000070  4630              MOV      r0,r6                 ;939
000072  f7fffffe          BL       Remote_Key_En
000076  e026              B        |L10.198|
                  |L10.120|
000078  48db              LDR      r0,|L10.1000|
00007a  7a00              LDRB     r0,[r0,#8]            ;941
00007c  2802              CMP      r0,#2                 ;941
00007e  d109              BNE      |L10.148|
000080  48d9              LDR      r0,|L10.1000|
000082  7a40              LDRB     r0,[r0,#9]            ;941
000084  2805              CMP      r0,#5                 ;941
000086  d105              BNE      |L10.148|
000088  48d7              LDR      r0,|L10.1000|
00008a  7a81              LDRB     r1,[r0,#0xa]          ;941
00008c  4630              MOV      r0,r6                 ;941
00008e  f7fffffe          BL       Remote_Key_Dis
000092  e018              B        |L10.198|
                  |L10.148|
000094  48d4              LDR      r0,|L10.1000|
000096  7a00              LDRB     r0,[r0,#8]            ;943
000098  2801              CMP      r0,#1                 ;943
00009a  d108              BNE      |L10.174|
00009c  48d2              LDR      r0,|L10.1000|
00009e  7a40              LDRB     r0,[r0,#9]            ;943
0000a0  2807              CMP      r0,#7                 ;943
0000a2  d104              BNE      |L10.174|
0000a4  21ff              MOVS     r1,#0xff              ;943
0000a6  4630              MOV      r0,r6                 ;943
0000a8  f7fffffe          BL       Remote_Key_Dis
0000ac  e00b              B        |L10.198|
                  |L10.174|
0000ae  48ce              LDR      r0,|L10.1000|
0000b0  7a00              LDRB     r0,[r0,#8]            ;945
0000b2  2801              CMP      r0,#1                 ;945
0000b4  d107              BNE      |L10.198|
0000b6  48cc              LDR      r0,|L10.1000|
0000b8  7a40              LDRB     r0,[r0,#9]            ;945
0000ba  2808              CMP      r0,#8                 ;945
0000bc  d103              BNE      |L10.198|
0000be  21ff              MOVS     r1,#0xff              ;945
0000c0  4630              MOV      r0,r6                 ;945
0000c2  f7fffffe          BL       Remote_Key_En
                  |L10.198|
0000c6  4630              MOV      r0,r6                 ;947
0000c8  f7fffffe          BL       IT1_Dev_StuLoad
0000cc  20fb              MOVS     r0,#0xfb              ;948
0000ce  9002              STR      r0,[sp,#8]            ;948
0000d0  e02a              B        |L10.296|
                  |L10.210|
0000d2  f1b80fe0          CMP      r8,#0xe0              ;951
0000d6  db22              BLT      |L10.286|
0000d8  f1b80fef          CMP      r8,#0xef              ;951
0000dc  dc1f              BGT      |L10.286|
0000de  48c2              LDR      r0,|L10.1000|
0000e0  7a00              LDRB     r0,[r0,#8]            ;954
0000e2  2801              CMP      r0,#1                 ;954
0000e4  d108              BNE      |L10.248|
0000e6  48c0              LDR      r0,|L10.1000|
0000e8  7a40              LDRB     r0,[r0,#9]            ;954
0000ea  2802              CMP      r0,#2                 ;954
0000ec  d104              BNE      |L10.248|
0000ee  2101              MOVS     r1,#1                 ;954
0000f0  4630              MOV      r0,r6                 ;954
0000f2  f7fffffe          BL       Remote_Key_En
0000f6  e00b              B        |L10.272|
                  |L10.248|
0000f8  48bb              LDR      r0,|L10.1000|
0000fa  7a00              LDRB     r0,[r0,#8]            ;956
0000fc  2801              CMP      r0,#1                 ;956
0000fe  d107              BNE      |L10.272|
000100  48b9              LDR      r0,|L10.1000|
000102  7a40              LDRB     r0,[r0,#9]            ;956
000104  2801              CMP      r0,#1                 ;956
000106  d103              BNE      |L10.272|
000108  2101              MOVS     r1,#1                 ;956
00010a  4630              MOV      r0,r6                 ;956
00010c  f7fffffe          BL       Remote_Key_Dis
                  |L10.272|
000110  4630              MOV      r0,r6                 ;958
000112  f7fffffe          BL       IT1_Dev_StuLoad
000116  20fb              MOVS     r0,#0xfb              ;959
000118  9002              STR      r0,[sp,#8]            ;959
00011a  e005              B        |L10.296|
                  |L10.284|
00011c  e00e              B        |L10.316|
                  |L10.286|
00011e  f1b80fd0          CMP      r8,#0xd0              ;963
000122  d001              BEQ      |L10.296|
000124  20ff              MOVS     r0,#0xff              ;1105
000126  9002              STR      r0,[sp,#8]            ;1105
                  |L10.296|
000128  9802              LDR      r0,[sp,#8]            ;1108
00012a  28fe              CMP      r0,#0xfe              ;1108
00012c  d102              BNE      |L10.308|
00012e  4630              MOV      r0,r6                 ;1108
000130  f7fffffe          BL       IT1_RS485_Report
                  |L10.308|
000134  9802              LDR      r0,[sp,#8]            ;1109
000136  f7fffffe          BL       IT1_Load_RS485_Ack
                  |L10.314|
00013a  e1a1              B        |L10.1152|
                  |L10.316|
00013c  48ab              LDR      r0,|L10.1004|
00013e  8880              LDRH     r0,[r0,#4]            ;1112  ; Dev
000140  f4004070          AND      r0,r0,#0xf000         ;1112
000144  f5b05f40          CMP      r0,#0x3000            ;1112
000148  d1f7              BNE      |L10.314|
00014a  48a7              LDR      r0,|L10.1000|
00014c  79c0              LDRB     r0,[r0,#7]            ;1114
00014e  f000060f          AND      r6,r0,#0xf            ;1114
000152  2e00              CMP      r6,#0                 ;1116
000154  d176              BNE      |L10.580|
000156  f1bb0f01          CMP      r11,#1                ;1118
00015a  d175              BNE      |L10.584|
00015c  48a2              LDR      r0,|L10.1000|
00015e  7a45              LDRB     r5,[r0,#9]            ;1120
000160  2d05              CMP      r5,#5                 ;1122
000162  d126              BNE      |L10.434|
000164  2256              MOVS     r2,#0x56              ;1124
000166  49a3              LDR      r1,|L10.1012|
000168  48a3              LDR      r0,|L10.1016|
00016a  f7fffffe          BL       __aeabi_memcpy
00016e  2001              MOVS     r0,#1                 ;1125
000170  49a1              LDR      r1,|L10.1016|
000172  7148              STRB     r0,[r1,#5]            ;1125
000174  4608              MOV      r0,r1                 ;1127
000176  8a80              LDRH     r0,[r0,#0x14]         ;1127  ; LockItem
000178  f0400006          ORR      r0,r0,#6              ;1127
00017c  8288              STRH     r0,[r1,#0x14]         ;1127
00017e  2000              MOVS     r0,#0                 ;1128
000180  f7fffffe          BL       Write_Lock_Table
000184  20fb              MOVS     r0,#0xfb              ;1130
000186  f7fffffe          BL       IT1_Load_RS485_Ack
00018a  489b              LDR      r0,|L10.1016|
00018c  7d00              LDRB     r0,[r0,#0x14]         ;1132  ; LockItem
00018e  f00000fe          AND      r0,r0,#0xfe           ;1132
000192  4999              LDR      r1,|L10.1016|
000194  8288              STRH     r0,[r1,#0x14]         ;1132
000196  4608              MOV      r0,r1                 ;1133
000198  7d02              LDRB     r2,[r0,#0x14]         ;1133  ; LockItem
00019a  2101              MOVS     r1,#1                 ;1133
00019c  2000              MOVS     r0,#0                 ;1133
00019e  f7fffffe          BL       IT1_Lock_DataLoad
0001a2  f44f737a          MOV      r3,#0x3e8             ;1135
0001a6  2206              MOVS     r2,#6                 ;1135
0001a8  2103              MOVS     r1,#3                 ;1135
0001aa  2000              MOVS     r0,#0                 ;1135
0001ac  f7fffffe          BL       DlyEvent_handle
0001b0  e047              B        |L10.578|
                  |L10.434|
0001b2  2d06              CMP      r5,#6                 ;1140
0001b4  d118              BNE      |L10.488|
0001b6  2256              MOVS     r2,#0x56              ;1142
0001b8  498e              LDR      r1,|L10.1012|
0001ba  488f              LDR      r0,|L10.1016|
0001bc  f7fffffe          BL       __aeabi_memcpy
0001c0  2000              MOVS     r0,#0                 ;1143
0001c2  498d              LDR      r1,|L10.1016|
0001c4  7148              STRB     r0,[r1,#5]            ;1143
0001c6  4608              MOV      r0,r1                 ;1145
0001c8  7d00              LDRB     r0,[r0,#0x14]         ;1145  ; LockItem
0001ca  f00000f9          AND      r0,r0,#0xf9           ;1145
0001ce  8288              STRH     r0,[r1,#0x14]         ;1145
0001d0  2000              MOVS     r0,#0                 ;1147
0001d2  f7fffffe          BL       Write_Lock_Table
0001d6  20fb              MOVS     r0,#0xfb              ;1148
0001d8  f7fffffe          BL       IT1_Load_RS485_Ack
0001dc  2200              MOVS     r2,#0                 ;1149
0001de  2101              MOVS     r1,#1                 ;1149
0001e0  4610              MOV      r0,r2                 ;1149
0001e2  f7fffffe          BL       IT1_Lock_DataLoad
0001e6  e02c              B        |L10.578|
                  |L10.488|
0001e8  2d02              CMP      r5,#2                 ;1152
0001ea  d108              BNE      |L10.510|
0001ec  20fb              MOVS     r0,#0xfb              ;1154
0001ee  f7fffffe          BL       IT1_Load_RS485_Ack
0001f2  2200              MOVS     r2,#0                 ;1155
0001f4  2101              MOVS     r1,#1                 ;1155
0001f6  4610              MOV      r0,r2                 ;1155
0001f8  f7fffffe          BL       IT1_Lock_DataLoad
0001fc  e021              B        |L10.578|
                  |L10.510|
0001fe  2d08              CMP      r5,#8                 ;1158
000200  d11f              BNE      |L10.578|
000202  2256              MOVS     r2,#0x56              ;1160
000204  497b              LDR      r1,|L10.1012|
000206  487c              LDR      r0,|L10.1016|
000208  f7fffffe          BL       __aeabi_memcpy
00020c  2400              MOVS     r4,#0                 ;1161
00020e  e007              B        |L10.544|
                  |L10.528|
000210  f1040031          ADD      r0,r4,#0x31           ;1161
000214  b2c1              UXTB     r1,r0                 ;1161
000216  4878              LDR      r0,|L10.1016|
000218  3009              ADDS     r0,r0,#9              ;1161
00021a  5501              STRB     r1,[r0,r4]            ;1161
00021c  1c60              ADDS     r0,r4,#1              ;1161
00021e  b2c4              UXTB     r4,r0                 ;1161
                  |L10.544|
000220  2c06              CMP      r4,#6                 ;1161
000222  dbf5              BLT      |L10.528|
000224  21ff              MOVS     r1,#0xff              ;1161
000226  4874              LDR      r0,|L10.1016|
000228  73c1              STRB     r1,[r0,#0xf]          ;1161
00022a  7401              STRB     r1,[r0,#0x10]         ;1161
00022c  2000              MOVS     r0,#0                 ;1162
00022e  f7fffffe          BL       Write_Lock_Table
000232  20fb              MOVS     r0,#0xfb              ;1163
000234  f7fffffe          BL       IT1_Load_RS485_Ack
000238  2238              MOVS     r2,#0x38              ;1169
00023a  2101              MOVS     r1,#1                 ;1169
00023c  2000              MOVS     r0,#0                 ;1169
00023e  f7fffffe          BL       IT1_Lock_DataLoad
                  |L10.578|
000242  e6e8              B        |L10.22|
                  |L10.580|
000244  e0fc              B        |L10.1088|
000246  e7ff              B        |L10.584|
                  |L10.584|
000248  f1bb0f02          CMP      r11,#2                ;1176
00024c  d12f              BNE      |L10.686|
00024e  2256              MOVS     r2,#0x56              ;1184
000250  4968              LDR      r1,|L10.1012|
000252  4869              LDR      r0,|L10.1016|
000254  f7fffffe          BL       __aeabi_memcpy
000258  4863              LDR      r0,|L10.1000|
00025a  7a40              LDRB     r0,[r0,#9]            ;1185
00025c  2807              CMP      r0,#7                 ;1185
00025e  d10a              BNE      |L10.630|
000260  4861              LDR      r0,|L10.1000|
000262  7a80              LDRB     r0,[r0,#0xa]          ;1185
000264  2801              CMP      r0,#1                 ;1185
000266  d106              BNE      |L10.630|
000268  4863              LDR      r0,|L10.1016|
00026a  8a80              LDRH     r0,[r0,#0x14]         ;1185  ; LockItem
00026c  f0400002          ORR      r0,r0,#2              ;1185
000270  4961              LDR      r1,|L10.1016|
000272  8288              STRH     r0,[r1,#0x14]         ;1185
000274  e00c              B        |L10.656|
                  |L10.630|
000276  485c              LDR      r0,|L10.1000|
000278  7a40              LDRB     r0,[r0,#9]            ;1186
00027a  2807              CMP      r0,#7                 ;1186
00027c  d108              BNE      |L10.656|
00027e  485a              LDR      r0,|L10.1000|
000280  7a80              LDRB     r0,[r0,#0xa]          ;1186
000282  b928              CBNZ     r0,|L10.656|
000284  485c              LDR      r0,|L10.1016|
000286  7d00              LDRB     r0,[r0,#0x14]         ;1186  ; LockItem
000288  f00000fd          AND      r0,r0,#0xfd           ;1186
00028c  495a              LDR      r1,|L10.1016|
00028e  8288              STRH     r0,[r1,#0x14]         ;1186
                  |L10.656|
000290  2000              MOVS     r0,#0                 ;1187
000292  f7fffffe          BL       Write_Lock_Table
000296  20fb              MOVS     r0,#0xfb              ;1190
000298  f7fffffe          BL       IT1_Load_RS485_Ack
00029c  4855              LDR      r0,|L10.1012|
00029e  380e              SUBS     r0,r0,#0xe            ;1192
0002a0  f8902022          LDRB     r2,[r0,#0x22]         ;1192
0002a4  2101              MOVS     r1,#1                 ;1192
0002a6  2000              MOVS     r0,#0                 ;1192
0002a8  f7fffffe          BL       IT1_Lock_DataLoad
0002ac  e6b3              B        |L10.22|
                  |L10.686|
0002ae  f1bb0f09          CMP      r11,#9                ;1195
0002b2  d142              BNE      |L10.826|
0002b4  484c              LDR      r0,|L10.1000|
0002b6  7a45              LDRB     r5,[r0,#9]            ;1197
0002b8  2400              MOVS     r4,#0                 ;1198
0002ba  e00c              B        |L10.726|
                  |L10.700|
0002bc  f1040008          ADD      r0,r4,#8              ;1198
0002c0  4949              LDR      r1,|L10.1000|
0002c2  1c89              ADDS     r1,r1,#2              ;1198
0002c4  5c08              LDRB     r0,[r1,r0]            ;1198
0002c6  494b              LDR      r1,|L10.1012|
0002c8  390b              SUBS     r1,r1,#0xb            ;1198
0002ca  5d09              LDRB     r1,[r1,r4]            ;1198
0002cc  4048              EORS     r0,r0,r1              ;1198
0002ce  f80d0004          STRB     r0,[sp,r4]            ;1198
0002d2  1c60              ADDS     r0,r4,#1              ;1198
0002d4  b2c4              UXTB     r4,r0                 ;1198
                  |L10.726|
0002d6  2c08              CMP      r4,#8                 ;1198
0002d8  dbf0              BLT      |L10.700|
0002da  2400              MOVS     r4,#0                 ;1199
0002dc  f04f0908          MOV      r9,#8                 ;1200
0002e0  4844              LDR      r0,|L10.1012|
0002e2  380e              SUBS     r0,r0,#0xe            ;1201
0002e4  7f80              LDRB     r0,[r0,#0x1e]         ;1201
0002e6  28ff              CMP      r0,#0xff              ;1201
0002e8  d103              BNE      |L10.754|
0002ea  f1a90001          SUB      r0,r9,#1              ;1201
0002ee  f00009ff          AND      r9,r0,#0xff           ;1201
                  |L10.754|
0002f2  4840              LDR      r0,|L10.1012|
0002f4  380e              SUBS     r0,r0,#0xe            ;1202
0002f6  7f40              LDRB     r0,[r0,#0x1d]         ;1202
0002f8  28ff              CMP      r0,#0xff              ;1202
0002fa  d103              BNE      |L10.772|
0002fc  f1a90001          SUB      r0,r9,#1              ;1202
000300  f00009ff          AND      r9,r0,#0xff           ;1202
                  |L10.772|
000304  e009              B        |L10.794|
                  |L10.774|
000306  f81d1004          LDRB     r1,[sp,r4]            ;1206
00030a  483a              LDR      r0,|L10.1012|
00030c  3009              ADDS     r0,r0,#9              ;1206
00030e  5d00              LDRB     r0,[r0,r4]            ;1206
000310  4281              CMP      r1,r0                 ;1206
000312  d000              BEQ      |L10.790|
000314  e003              B        |L10.798|
                  |L10.790|
000316  1c60              ADDS     r0,r4,#1              ;1207
000318  b2c4              UXTB     r4,r0                 ;1207
                  |L10.794|
00031a  454c              CMP      r4,r9                 ;1204
00031c  dbf3              BLT      |L10.774|
                  |L10.798|
00031e  bf00              NOP                            ;1206
000320  2d03              CMP      r5,#3                 ;1210
000322  d102              BNE      |L10.810|
000324  f04f0a01          MOV      r10,#1                ;1210
000328  e009              B        |L10.830|
                  |L10.810|
00032a  454c              CMP      r4,r9                 ;1211
00032c  d102              BNE      |L10.820|
00032e  f04f0a01          MOV      r10,#1                ;1211
000332  e004              B        |L10.830|
                  |L10.820|
000334  f04f0a00          MOV      r10,#0                ;1212
000338  e001              B        |L10.830|
                  |L10.826|
00033a  f04f0a00          MOV      r10,#0                ;1216
                  |L10.830|
00033e  f1ba0f00          CMP      r10,#0                ;1220
000342  d108              BNE      |L10.854|
000344  20fb              MOVS     r0,#0xfb              ;1222
000346  f7fffffe          BL       IT1_Load_RS485_Ack
00034a  2220              MOVS     r2,#0x20              ;1224
00034c  2101              MOVS     r1,#1                 ;1224
00034e  2000              MOVS     r0,#0                 ;1224
000350  f7fffffe          BL       IT1_Lock_DataLoad
000354  e65f              B        |L10.22|
                  |L10.854|
000356  4824              LDR      r0,|L10.1000|
000358  79c0              LDRB     r0,[r0,#7]            ;1228
00035a  f000060f          AND      r6,r0,#0xf            ;1228
00035e  2d01              CMP      r5,#1                 ;1230
000360  d001              BEQ      |L10.870|
000362  2d02              CMP      r5,#2                 ;1230
000364  d117              BNE      |L10.918|
                  |L10.870|
000366  f7fffffe          BL       IWDG_Feed
00036a  20fb              MOVS     r0,#0xfb              ;1235
00036c  f7fffffe          BL       IT1_Load_RS485_Ack
000370  4822              LDR      r0,|L10.1020|
000372  7801              LDRB     r1,[r0,#0]            ;1236  ; TxDat
000374  1cc0              ADDS     r0,r0,#3              ;1236
000376  f7fffffe          BL       RS485_Send
00037a  2000              MOVS     r0,#0                 ;1237
00037c  491f              LDR      r1,|L10.1020|
00037e  7088              STRB     r0,[r1,#2]            ;1237
000380  481c              LDR      r0,|L10.1012|
000382  380e              SUBS     r0,r0,#0xe            ;1238
000384  7006              STRB     r6,[r0,#0]            ;1238
000386  2000              MOVS     r0,#0                 ;1241
000388  f7fffffe          BL       wl_wakeup_frame
00038c  4629              MOV      r1,r5                 ;1243
00038e  2000              MOVS     r0,#0                 ;1243
000390  f7fffffe          BL       Wireless_Lock_Action
000394  e037              B        |L10.1030|
                  |L10.918|
000396  2d04              CMP      r5,#4                 ;1247
000398  d107              BNE      |L10.938|
00039a  2064              MOVS     r0,#0x64              ;1249
00039c  4915              LDR      r1,|L10.1012|
00039e  390e              SUBS     r1,r1,#0xe            ;1249
0003a0  7088              STRB     r0,[r1,#2]            ;1249
0003a2  20fb              MOVS     r0,#0xfb              ;1250
0003a4  f7fffffe          BL       IT1_Load_RS485_Ack
0003a8  e02d              B        |L10.1030|
                  |L10.938|
0003aa  2d03              CMP      r5,#3                 ;1253
0003ac  d12b              BNE      |L10.1030|
0003ae  4811              LDR      r0,|L10.1012|
0003b0  380e              SUBS     r0,r0,#0xe            ;1255
0003b2  7880              LDRB     r0,[r0,#2]            ;1255  ; lock
0003b4  2800              CMP      r0,#0                 ;1255
0003b6  dd23              BLE      |L10.1024|
0003b8  2256              MOVS     r2,#0x56              ;1257
0003ba  490e              LDR      r1,|L10.1012|
0003bc  480e              LDR      r0,|L10.1016|
0003be  f7fffffe          BL       __aeabi_memcpy
0003c2  2400              MOVS     r4,#0                 ;1258
0003c4  e006              B        |L10.980|
                  |L10.966|
0003c6  f81d1004          LDRB     r1,[sp,r4]            ;1258
0003ca  480b              LDR      r0,|L10.1016|
0003cc  3009              ADDS     r0,r0,#9              ;1258
0003ce  5501              STRB     r1,[r0,r4]            ;1258
0003d0  1c60              ADDS     r0,r4,#1              ;1258
0003d2  b2c4              UXTB     r4,r0                 ;1258
                  |L10.980|
0003d4  2c08              CMP      r4,#8                 ;1258
0003d6  dbf6              BLT      |L10.966|
0003d8  2000              MOVS     r0,#0                 ;1259
0003da  f7fffffe          BL       Write_Lock_Table
0003de  20fb              MOVS     r0,#0xfb              ;1260
0003e0  f7fffffe          BL       IT1_Load_RS485_Ack
0003e4  e00f              B        |L10.1030|
0003e6  0000              DCW      0x0000
                  |L10.1000|
                          DCD      RxDat
                  |L10.1004|
                          DCD      ||Dev||
                  |L10.1008|
                          DCD      Ex_Table+0x36
                  |L10.1012|
                          DCD      lock+0xe
                  |L10.1016|
                          DCD      LockItem
                  |L10.1020|
                          DCD      TxDat
                  |L10.1024|
000400  20fc              MOVS     r0,#0xfc              ;1264
000402  f7fffffe          BL       IT1_Load_RS485_Ack
                  |L10.1030|
000406  481f              LDR      r0,|L10.1156|
000408  f8907022          LDRB     r7,[r0,#0x22]         ;1284
00040c  f0070707          AND      r7,r7,#7              ;1285
000410  2d02              CMP      r5,#2                 ;1287
000412  d102              BNE      |L10.1050|
000414  f0470701          ORR      r7,r7,#1              ;1287
000418  e001              B        |L10.1054|
                  |L10.1050|
00041a  f0270701          BIC      r7,r7,#1              ;1288
                  |L10.1054|
00041e  2d03              CMP      r5,#3                 ;1291
000420  d101              BNE      |L10.1062|
000422  f0470728          ORR      r7,r7,#0x28           ;1291
                  |L10.1062|
000426  2d04              CMP      r5,#4                 ;1292
000428  d102              BNE      |L10.1072|
00042a  f0470718          ORR      r7,r7,#0x18           ;1292
00042e  e001              B        |L10.1076|
                  |L10.1072|
000430  f0470708          ORR      r7,r7,#8              ;1293
                  |L10.1076|
000434  463a              MOV      r2,r7                 ;1295
000436  2101              MOVS     r1,#1                 ;1295
000438  2000              MOVS     r0,#0                 ;1295
00043a  f7fffffe          BL       IT1_Lock_DataLoad
00043e  e01f              B        |L10.1152|
                  |L10.1088|
000440  4637              MOV      r7,r6                 ;1301
000442  4811              LDR      r0,|L10.1160|
000444  7a00              LDRB     r0,[r0,#8]            ;1302
000446  2801              CMP      r0,#1                 ;1302
000448  d108              BNE      |L10.1116|
00044a  480f              LDR      r0,|L10.1160|
00044c  7a40              LDRB     r0,[r0,#9]            ;1302
00044e  2802              CMP      r0,#2                 ;1302
000450  d104              BNE      |L10.1116|
000452  4639              MOV      r1,r7                 ;1302
000454  2000              MOVS     r0,#0                 ;1302
000456  f7fffffe          BL       Remote_Key_En
00045a  e00b              B        |L10.1140|
                  |L10.1116|
00045c  480a              LDR      r0,|L10.1160|
00045e  7a00              LDRB     r0,[r0,#8]            ;1304
000460  2801              CMP      r0,#1                 ;1304
000462  d107              BNE      |L10.1140|
000464  4808              LDR      r0,|L10.1160|
000466  7a40              LDRB     r0,[r0,#9]            ;1304
000468  2801              CMP      r0,#1                 ;1304
00046a  d103              BNE      |L10.1140|
00046c  4639              MOV      r1,r7                 ;1304
00046e  2000              MOVS     r0,#0                 ;1304
000470  f7fffffe          BL       Remote_Key_Dis
                  |L10.1140|
000474  20fb              MOVS     r0,#0xfb              ;1306
000476  f7fffffe          BL       IT1_Load_RS485_Ack
00047a  4630              MOV      r0,r6                 ;1307
00047c  f7fffffe          BL       IT1_Dev_StuLoad
                  |L10.1152|
000480  bf00              NOP      
000482  e5c8              B        |L10.22|
;;;1312   
                          ENDP

                  |L10.1156|
                          DCD      lock
                  |L10.1160|
                          DCD      RxDat

                          AREA ||i.IT1_Function_Modfiy||, CODE, READONLY, ALIGN=2

                  IT1_Function_Modfiy PROC
;;;3089   //配置修改
;;;3090   void IT1_Function_Modfiy(void)
000000  b570              PUSH     {r4-r6,lr}
;;;3091   {
;;;3092   				uint8_t ret=0,i,flag;
000002  2500              MOVS     r5,#0
;;;3093   				//修改地址
;;;3094   				if(RxDat.buf[7]==0xaa)	                           
000004  481c              LDR      r0,|L11.120|
000006  7a40              LDRB     r0,[r0,#9]
000008  28aa              CMP      r0,#0xaa
00000a  d11a              BNE      |L11.66|
;;;3095   				{
;;;3096   								if((RxDat.buf[10]==0x00)||(RxDat.buf[10]==0xff))
00000c  481a              LDR      r0,|L11.120|
00000e  7b00              LDRB     r0,[r0,#0xc]
000010  b118              CBZ      r0,|L11.26|
000012  4819              LDR      r0,|L11.120|
000014  7b00              LDRB     r0,[r0,#0xc]
000016  28ff              CMP      r0,#0xff
000018  d111              BNE      |L11.62|
                  |L11.26|
;;;3097   								{
;;;3098   											ret++;
00001a  1c68              ADDS     r0,r5,#1
00001c  b2c5              UXTB     r5,r0
;;;3099   											for(i=0;i<RxDat.cnt;i++)RxDat.buf[i]=0x00;
00001e  2400              MOVS     r4,#0
000020  e005              B        |L11.46|
                  |L11.34|
000022  2100              MOVS     r1,#0
000024  4814              LDR      r0,|L11.120|
000026  1c80              ADDS     r0,r0,#2
000028  5501              STRB     r1,[r0,r4]
00002a  1c60              ADDS     r0,r4,#1
00002c  b2c4              UXTB     r4,r0
                  |L11.46|
00002e  4812              LDR      r0,|L11.120|
000030  7800              LDRB     r0,[r0,#0]  ; RxDat
000032  42a0              CMP      r0,r4
000034  dcf5              BGT      |L11.34|
;;;3100   											RxDat.cnt=0;	
000036  2000              MOVS     r0,#0
000038  490f              LDR      r1,|L11.120|
00003a  7008              STRB     r0,[r1,#0]
00003c  e001              B        |L11.66|
                  |L11.62|
;;;3101   								}
;;;3102   								else
;;;3103   								{
;;;3104   											IT1_AddressSetting();
00003e  f7fffffe          BL       IT1_AddressSetting
                  |L11.66|
;;;3105   								}
;;;3106   				}
;;;3107   				//修改属性
;;;3108   				if(RxDat.buf[8]==0xaa)
000042  480d              LDR      r0,|L11.120|
000044  7a80              LDRB     r0,[r0,#0xa]
000046  28aa              CMP      r0,#0xaa
000048  d104              BNE      |L11.84|
;;;3109   				{
;;;3110   									flag=IT1_Modify_Type();
00004a  f7fffffe          BL       IT1_Modify_Type
00004e  4606              MOV      r6,r0
;;;3111   									ret=ret+flag;
000050  19a8              ADDS     r0,r5,r6
000052  b2c5              UXTB     r5,r0
                  |L11.84|
;;;3112   				} 
;;;3113   				//修改通道
;;;3114   				if(RxDat.buf[9]==0xaa)
;;;3115   				{
;;;3116   										//不会用到
;;;3117   					         //if(RxDat.buf[13]!=0x01)ret++;
;;;3118   				} 
;;;3119   				//如果是广播修改，则不应答地址
;;;3120   				if((RxDat.buf[2]==0xff)&&(RxDat.buf[1]==0xff))
000054  4808              LDR      r0,|L11.120|
000056  7900              LDRB     r0,[r0,#4]
000058  28ff              CMP      r0,#0xff
00005a  d103              BNE      |L11.100|
00005c  4806              LDR      r0,|L11.120|
00005e  78c0              LDRB     r0,[r0,#3]
000060  28ff              CMP      r0,#0xff
000062  d007              BEQ      |L11.116|
                  |L11.100|
;;;3121   				{
;;;3122   					
;;;3123   				}
;;;3124   				else
;;;3125   				{
;;;3126   							if(ret!=0x00)IT1_Load_RS485_Ack(OPT_ERR_SETUP);
000064  b11d              CBZ      r5,|L11.110|
000066  20f9              MOVS     r0,#0xf9
000068  f7fffffe          BL       IT1_Load_RS485_Ack
00006c  e002              B        |L11.116|
                  |L11.110|
;;;3127   							else           IT1_Load_RS485_Ack(OPT_OK);
00006e  20fb              MOVS     r0,#0xfb
000070  f7fffffe          BL       IT1_Load_RS485_Ack
                  |L11.116|
;;;3128   				}
;;;3129   	
;;;3130   }
000074  bd70              POP      {r4-r6,pc}
;;;3131   //======================================================================================================
                          ENDP

000076  0000              DCW      0x0000
                  |L11.120|
                          DCD      RxDat

                          AREA ||i.IT1_Function_Setup||, CODE, READONLY, ALIGN=2

                  IT1_Function_Setup PROC
;;;1314   //设置帧
;;;1315   void IT1_Function_Setup(void)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;1316   {
;;;1317   	 	uint8_t type,tt=0,index,tmp,Iscode=0;
000004  f04f0900          MOV      r9,#0
000008  46ca              MOV      r10,r9
;;;1318   		uint8_t keynum,len;
;;;1319   
;;;1320       //如果处于设置状态，则不能再设置
;;;1321       if(Dev.stu==DEV_SETUP)
00000a  486b              LDR      r0,|L12.440|
00000c  7980              LDRB     r0,[r0,#6]  ; Dev
00000e  2803              CMP      r0,#3
000010  d104              BNE      |L12.28|
;;;1322       {
;;;1323               IT1_Load_RS485_Ack(OPT_ERR);
000012  20fc              MOVS     r0,#0xfc
000014  f7fffffe          BL       IT1_Load_RS485_Ack
                  |L12.24|
;;;1324               return;
;;;1325       }
;;;1326   		
;;;1327   		if((Dev.type&0xf000)==0xb000)
;;;1328   		{
;;;1329   				len=RxDat.buf[6];	
;;;1330   				type=RxDat.buf[7];						       //命令	
;;;1331   				keynum=RxDat.buf[10];								 //通道或按键个数
;;;1332   				index=RxDat.buf[5]&0x0f;
;;;1333   				if((index==0)||(index>8))                                
;;;1334   				{
;;;1335   							IT1_Load_RS485_Ack(OPT_ERR); 
;;;1336   							 return;
;;;1337   				}
;;;1338   								
;;;1339   				switch(type)
;;;1340   				{
;;;1341   
;;;1342   					//配置
;;;1343   					case 0xbb:									
;;;1344   					
;;;1345   					tmp=IT1_RS4852Wireless(RxDat.buf[8],RxDat.buf[9]);												//主机要求配对的设备类型
;;;1346   				
;;;1347   					//if((tmp==EX_KEY_54KEY)||(tmp==EX_KEY_42KEY)||(tmp==EX_DEV_MEDIA)||(tmp==EX_DEV_SUN)||(tmp==EX_DEV_SUN1))
;;;1348   					if(tmp!=RE_ERR)
;;;1349   					{
;;;1350   									Dev.stu=DEV_SETUP;
;;;1351   									Dev.learn_time=LEARN_TIME_MAX;
;;;1352   									Dev.encode_time=0;
;;;1353   									Iscode=1;
;;;1354   					}
;;;1355   					else
;;;1356   					{
;;;1357   									Iscode=0;
;;;1358   					}
;;;1359   					//===============================================================================	
;;;1360   					//要求增加的虚拟设备是遥控器
;;;1361   					if(Iscode==1)
;;;1362   					{
;;;1363   									//不要求无线发送，只等待遥控器发送
;;;1364   									Exchangebuf.type= tmp;                                    //设备类型
;;;1365   									Exchangebuf.addr= index-1;;
;;;1366   									Exchangebuf.channel=RxDat.buf[11];
;;;1367   									Exchangebuf.wl_addr[0]=	0;				                  			//等待接收遥控器的地址
;;;1368   									Exchangebuf.wl_addr[1]= 0;  		                      		//
;;;1369   									Exchangebuf.wl_addr[2]= 0;  
;;;1370   						
;;;1371   									if(len==4)Exchangebuf.key=keynum;													//按键个数
;;;1372   									else      Exchangebuf.key=4;	
;;;1373   									Led_set(1,0xff,1,0xff,2);																	//长亮
;;;1374   					}
;;;1375   		//			//要求增加的虚拟设备是控制设备
;;;1376   		//			else if(Iscode==2)
;;;1377   		//			{          
;;;1378   		//							Exchangebuf.type= tmp;                                    //设备类型
;;;1379   		//							Exchangebuf.addr= index-1;;            
;;;1380   		//							Exchangebuf.channel=1;
;;;1381   		//							Exchangebuf.wl_addr[0]=	~Dev.rand;              
;;;1382   		//							Exchangebuf.wl_addr[1]= (Dev.rand);  	                  	//随机数-遥控器地址1 
;;;1383   		//							//Exchangebuf.wl_addr[2]= (~Dev.rand|RxDat.buf[8]);       //随机数-遥控器地址2    
;;;1384   		//							Exchangebuf.wl_addr[2]=Dev.serial++;			
;;;1385   		//							Wireless_Dev_Action(Exchangebuf.addr,0x01,0,0);         	//装无线发送数据
;;;1386   		//			}
;;;1387   		//			//设备未识别
;;;1388   					else
;;;1389   					{
;;;1390   									tt=1;
;;;1391   					}					
;;;1392   					break;	
;;;1393   					//===================================================================================
;;;1394   					//删除指定设备
;;;1395   					case 0xcc:
;;;1396   						index=index-1;
;;;1397   					
;;;1398   						Exchangebuf.type=Ex_Table.Exchange[index].type;
;;;1399   						Exchangebuf.wl_addr[1]=Ex_Table.Exchange[index].wl_addr[1];
;;;1400   						Exchangebuf.wl_addr[2]=Ex_Table.Exchange[index].wl_addr[2];
;;;1401   						//Wireless_Dev_Action(index,0x02,0,0);         //装无线发送数据
;;;1402   					
;;;1403   						tmp=Exchangebuf.type;
;;;1404   						Exchangebuf.type=0xff;
;;;1405   						Exchangebuf.addr=0xff;	
;;;1406   						Exchangebuf.addr=0xff;
;;;1407   						Exchangebuf.channel=0xff;
;;;1408   						Exchangebuf.wl_addr[0]=0xff;
;;;1409   						Exchangebuf.wl_addr[1]=0xff;
;;;1410   						Exchangebuf.wl_addr[2]=0xff;
;;;1411   						Exchangebuf.key=0;
;;;1412   						//写入表格
;;;1413   						Write_Ex_Table(index);
;;;1414   						Exchangebuf.type=tmp;		
;;;1415   						IT1_Dev_Declare(index,0xCC);
;;;1416   					break;
;;;1417   					//=============================================================================
;;;1418   					default:
;;;1419   						tt=1;
;;;1420   					break;
;;;1421   					
;;;1422   				}
;;;1423   					if(tt==1)IT1_Load_RS485_Ack(OPT_ERR); 
;;;1424   					else     IT1_Load_RS485_Ack(OPT_OK); 
;;;1425   	  }
;;;1426   		//==============================================================================
;;;1427   		//锁类型添加指纹和删除指纹处理
;;;1428   		else
;;;1429   		{
;;;1430   						len=RxDat.buf[6];	
;;;1431   						type=RxDat.buf[7];						       //命令	
;;;1432   						keynum=RxDat.buf[10];								 //通道或按键个数
;;;1433   						index=RxDat.buf[5]&0x0f;
;;;1434   										
;;;1435   						if((type==0xbb)||(type==0xcc))
;;;1436   						{
;;;1437   //====================================================================================>>>>>>>>>
;;;1438   #if 0
;;;1439   									//喂狗
;;;1440   									IWDG_Feed();	
;;;1441   									//应答
;;;1442   									IT1_Load_RS485_Ack(OPT_OK);
;;;1443   									RS485_Send(TxDat.buf,TxDat.cnt);
;;;1444   									TxDat.f_tx=0;
;;;1445   							    lock.waittime=100;
;;;1446   							    lock.index=index;
;;;1447   									//无线唤醒包，需要0.5秒
;;;1448   									//wl_wakeup_frame(0);
;;;1449   									//发送数据					     
;;;1450   									Wireless_Lock_Action(index,type);
;;;1451   									#ifdef USE_LOCK_TEST
;;;1452   									IT1_Lock_DataLoad(index,0x02,type);
;;;1453   									#endif
;;;1454   #else
;;;1455   
;;;1456   									IT1_Load_RS485_Ack(OPT_OK);
;;;1457   							
;;;1458   							    if(type==0xbb)
;;;1459   									{
;;;1460   												lock.waittime=100;
;;;1461   												lock.index=index;
;;;1462   												#ifdef USE_LOCK_TEST
;;;1463   												IT1_Lock_DataLoad(index,0x02,0xbb);
;;;1464   												#endif
;;;1465   									}
;;;1466   									else
;;;1467   									{
;;;1468   												//删除表格
;;;1469   												lock.index=index;			     
;;;1470   										    IT1_Lock_DataLoad(lock.index,0x02,0xcc);
;;;1471   												LockItem.Serail[lock.index-1]=0x00;    //用户编号+ID类型+用户类型;
;;;1472   												LockItem.IdType[lock.index-1]=0x00;
;;;1473   												LockItem.UserType[lock.index-1]=0x00;																		  
;;;1474   												Write_Lock_Table(lock.index);
;;;1475   									}
;;;1476   							
;;;1477   #endif
;;;1478   							
;;;1479   //<<<<<<<===========================================================================
;;;1480   						}				
;;;1481   		}
;;;1482   		
;;;1483   }
000018  e8bd8ff8          POP      {r3-r11,pc}
                  |L12.28|
00001c  4866              LDR      r0,|L12.440|
00001e  8880              LDRH     r0,[r0,#4]            ;1327  ; Dev
000020  f4004070          AND      r0,r0,#0xf000         ;1327
000024  f5b04f30          CMP      r0,#0xb000            ;1327
000028  d17e              BNE      |L12.296|
00002a  4864              LDR      r0,|L12.444|
00002c  f8908008          LDRB     r8,[r0,#8]            ;1329
000030  7a45              LDRB     r5,[r0,#9]            ;1330
000032  7b07              LDRB     r7,[r0,#0xc]          ;1331
000034  79c0              LDRB     r0,[r0,#7]            ;1332
000036  f000040f          AND      r4,r0,#0xf            ;1332
00003a  b10c              CBZ      r4,|L12.64|
00003c  2c08              CMP      r4,#8                 ;1333
00003e  dd03              BLE      |L12.72|
                  |L12.64|
000040  20fc              MOVS     r0,#0xfc              ;1335
000042  f7fffffe          BL       IT1_Load_RS485_Ack
000046  e7e7              B        |L12.24|
                  |L12.72|
000048  2dbb              CMP      r5,#0xbb              ;1339
00004a  d002              BEQ      |L12.82|
00004c  2dcc              CMP      r5,#0xcc              ;1339
00004e  d16d              BNE      |L12.300|
000050  e038              B        |L12.196|
                  |L12.82|
000052  4a5a              LDR      r2,|L12.444|
000054  7ad1              LDRB     r1,[r2,#0xb]          ;1345
000056  7a90              LDRB     r0,[r2,#0xa]          ;1345
000058  f7fffffe          BL       IT1_RS4852Wireless
00005c  4606              MOV      r6,r0                 ;1345
00005e  2eff              CMP      r6,#0xff              ;1348
000060  d009              BEQ      |L12.118|
000062  2003              MOVS     r0,#3                 ;1350
000064  4954              LDR      r1,|L12.440|
000066  7188              STRB     r0,[r1,#6]            ;1350
000068  200a              MOVS     r0,#0xa               ;1351
00006a  72c8              STRB     r0,[r1,#0xb]          ;1351
00006c  2000              MOVS     r0,#0                 ;1352
00006e  7308              STRB     r0,[r1,#0xc]          ;1352
000070  f04f0a01          MOV      r10,#1                ;1353
000074  e001              B        |L12.122|
                  |L12.118|
000076  f04f0a00          MOV      r10,#0                ;1357
                  |L12.122|
00007a  f1ba0f01          CMP      r10,#1                ;1361
00007e  d11e              BNE      |L12.190|
000080  484f              LDR      r0,|L12.448|
000082  7006              STRB     r6,[r0,#0]            ;1364
000084  1e60              SUBS     r0,r4,#1              ;1365
000086  494e              LDR      r1,|L12.448|
000088  7048              STRB     r0,[r1,#1]            ;1365
00008a  484c              LDR      r0,|L12.444|
00008c  7b40              LDRB     r0,[r0,#0xd]          ;1366
00008e  7188              STRB     r0,[r1,#6]            ;1366
000090  2000              MOVS     r0,#0                 ;1367
000092  70c8              STRB     r0,[r1,#3]            ;1367
000094  2100              MOVS     r1,#0                 ;1368
000096  484a              LDR      r0,|L12.448|
000098  7101              STRB     r1,[r0,#4]            ;1368
00009a  7141              STRB     r1,[r0,#5]            ;1369
00009c  f1b80f04          CMP      r8,#4                 ;1371
0000a0  d101              BNE      |L12.166|
0000a2  7207              STRB     r7,[r0,#8]            ;1371
0000a4  e002              B        |L12.172|
                  |L12.166|
0000a6  2004              MOVS     r0,#4                 ;1372
0000a8  4945              LDR      r1,|L12.448|
0000aa  7208              STRB     r0,[r1,#8]            ;1372
                  |L12.172|
0000ac  2002              MOVS     r0,#2                 ;1373
0000ae  23ff              MOVS     r3,#0xff              ;1373
0000b0  2201              MOVS     r2,#1                 ;1373
0000b2  4619              MOV      r1,r3                 ;1373
0000b4  9000              STR      r0,[sp,#0]            ;1373
0000b6  4610              MOV      r0,r2                 ;1373
0000b8  f7fffffe          BL       Led_set
0000bc  e001              B        |L12.194|
                  |L12.190|
0000be  f04f0901          MOV      r9,#1                 ;1390
                  |L12.194|
0000c2  e036              B        |L12.306|
                  |L12.196|
0000c4  1e60              SUBS     r0,r4,#1              ;1396
0000c6  b2c4              UXTB     r4,r0                 ;1396
0000c8  ebc401c4          RSB      r1,r4,r4,LSL #3       ;1398
0000cc  483d              LDR      r0,|L12.452|
0000ce  f8100011          LDRB     r0,[r0,r1,LSL #1]     ;1398
0000d2  493b              LDR      r1,|L12.448|
0000d4  7008              STRB     r0,[r1,#0]            ;1398
0000d6  ebc401c4          RSB      r1,r4,r4,LSL #3       ;1399
0000da  483a              LDR      r0,|L12.452|
0000dc  eb000041          ADD      r0,r0,r1,LSL #1       ;1399
0000e0  7901              LDRB     r1,[r0,#4]            ;1399
0000e2  4837              LDR      r0,|L12.448|
0000e4  7101              STRB     r1,[r0,#4]            ;1399
0000e6  ebc401c4          RSB      r1,r4,r4,LSL #3       ;1400
0000ea  4836              LDR      r0,|L12.452|
0000ec  eb000041          ADD      r0,r0,r1,LSL #1       ;1400
0000f0  7941              LDRB     r1,[r0,#5]            ;1400
0000f2  4833              LDR      r0,|L12.448|
0000f4  7141              STRB     r1,[r0,#5]            ;1400
0000f6  7806              LDRB     r6,[r0,#0]            ;1403  ; Exchangebuf
0000f8  20ff              MOVS     r0,#0xff              ;1404
0000fa  4931              LDR      r1,|L12.448|
0000fc  7008              STRB     r0,[r1,#0]            ;1404
0000fe  7048              STRB     r0,[r1,#1]            ;1405
000100  7048              STRB     r0,[r1,#1]            ;1406
000102  7188              STRB     r0,[r1,#6]            ;1407
000104  70c8              STRB     r0,[r1,#3]            ;1408
000106  21ff              MOVS     r1,#0xff              ;1409
000108  482d              LDR      r0,|L12.448|
00010a  7101              STRB     r1,[r0,#4]            ;1409
00010c  7141              STRB     r1,[r0,#5]            ;1410
00010e  2000              MOVS     r0,#0                 ;1411
000110  492b              LDR      r1,|L12.448|
000112  7208              STRB     r0,[r1,#8]            ;1411
000114  4620              MOV      r0,r4                 ;1413
000116  f7fffffe          BL       Write_Ex_Table
00011a  4829              LDR      r0,|L12.448|
00011c  7006              STRB     r6,[r0,#0]            ;1414
00011e  21cc              MOVS     r1,#0xcc              ;1415
000120  4620              MOV      r0,r4                 ;1415
000122  f7fffffe          BL       IT1_Dev_Declare
000126  e004              B        |L12.306|
                  |L12.296|
000128  e00f              B        |L12.330|
00012a  e7ff              B        |L12.300|
                  |L12.300|
00012c  f04f0901          MOV      r9,#1                 ;1419
000130  bf00              NOP                            ;1420
                  |L12.306|
000132  bf00              NOP                            ;1392
000134  f1b90f01          CMP      r9,#1                 ;1423
000138  d103              BNE      |L12.322|
00013a  20fc              MOVS     r0,#0xfc              ;1423
00013c  f7fffffe          BL       IT1_Load_RS485_Ack
000140  e037              B        |L12.434|
                  |L12.322|
000142  20fb              MOVS     r0,#0xfb              ;1424
000144  f7fffffe          BL       IT1_Load_RS485_Ack
000148  e033              B        |L12.434|
                  |L12.330|
00014a  481c              LDR      r0,|L12.444|
00014c  f8908008          LDRB     r8,[r0,#8]            ;1430
000150  7a45              LDRB     r5,[r0,#9]            ;1431
000152  7b07              LDRB     r7,[r0,#0xc]          ;1432
000154  79c0              LDRB     r0,[r0,#7]            ;1433
000156  f000040f          AND      r4,r0,#0xf            ;1433
00015a  2dbb              CMP      r5,#0xbb              ;1435
00015c  d001              BEQ      |L12.354|
00015e  2dcc              CMP      r5,#0xcc              ;1435
000160  d127              BNE      |L12.434|
                  |L12.354|
000162  20fb              MOVS     r0,#0xfb              ;1456
000164  f7fffffe          BL       IT1_Load_RS485_Ack
000168  2dbb              CMP      r5,#0xbb              ;1458
00016a  d105              BNE      |L12.376|
00016c  2064              MOVS     r0,#0x64              ;1460
00016e  4916              LDR      r1,|L12.456|
000170  7308              STRB     r0,[r1,#0xc]          ;1460
000172  4608              MOV      r0,r1                 ;1461
000174  7004              STRB     r4,[r0,#0]            ;1461
000176  e01c              B        |L12.434|
                  |L12.376|
000178  4813              LDR      r0,|L12.456|
00017a  7004              STRB     r4,[r0,#0]            ;1469
00017c  4601              MOV      r1,r0                 ;1470
00017e  7808              LDRB     r0,[r1,#0]            ;1470  ; lock
000180  22cc              MOVS     r2,#0xcc              ;1470
000182  2102              MOVS     r1,#2                 ;1470
000184  f7fffffe          BL       IT1_Lock_DataLoad
000188  2200              MOVS     r2,#0                 ;1471
00018a  480f              LDR      r0,|L12.456|
00018c  7800              LDRB     r0,[r0,#0]            ;1471  ; lock
00018e  1e40              SUBS     r0,r0,#1              ;1471
000190  490e              LDR      r1,|L12.460|
000192  f8212010          STRH     r2,[r1,r0,LSL #1]     ;1471
000196  480c              LDR      r0,|L12.456|
000198  7800              LDRB     r0,[r0,#0]            ;1472  ; lock
00019a  1e40              SUBS     r0,r0,#1              ;1472
00019c  3120              ADDS     r1,r1,#0x20           ;1472
00019e  540a              STRB     r2,[r1,r0]            ;1472
0001a0  4809              LDR      r0,|L12.456|
0001a2  7800              LDRB     r0,[r0,#0]            ;1473  ; lock
0001a4  1e40              SUBS     r0,r0,#1              ;1473
0001a6  3110              ADDS     r1,r1,#0x10           ;1473
0001a8  540a              STRB     r2,[r1,r0]            ;1473
0001aa  4907              LDR      r1,|L12.456|
0001ac  7808              LDRB     r0,[r1,#0]            ;1474  ; lock
0001ae  f7fffffe          BL       Write_Lock_Table
                  |L12.434|
0001b2  bf00              NOP      
0001b4  e730              B        |L12.24|
;;;1484   //==================================================================================
                          ENDP

0001b6  0000              DCW      0x0000
                  |L12.440|
                          DCD      ||Dev||
                  |L12.444|
                          DCD      RxDat
                  |L12.448|
                          DCD      Exchangebuf
                  |L12.452|
                          DCD      Ex_Table+0x36
                  |L12.456|
                          DCD      lock
                  |L12.460|
                          DCD      LockItem+0x16

                          AREA ||i.IT1_IR_DEL||, CODE, READONLY, ALIGN=2

                  IT1_IR_DEL PROC
;;;2799   //红外数据删除
;;;2800   void IT1_IR_DEL(void)
000000  b510              PUSH     {r4,lr}
;;;2801   {
;;;2802   						uint8_t flag=0;
000002  2400              MOVS     r4,#0
;;;2803   						Ir.addr=(RxDat.buf[5]&0x0f)-1;
000004  4818              LDR      r0,|L13.104|
000006  79c0              LDRB     r0,[r0,#7]
000008  f000000f          AND      r0,r0,#0xf
00000c  1e40              SUBS     r0,r0,#1
00000e  4917              LDR      r1,|L13.108|
000010  7008              STRB     r0,[r1,#0]
;;;2804   	          Ir.cmd_key=RxDat.buf[8];
000012  4815              LDR      r0,|L13.104|
000014  7a80              LDRB     r0,[r0,#0xa]
000016  7248              STRB     r0,[r1,#9]
;;;2805   	          Ir.key_mode=RxDat.buf[9];
000018  4813              LDR      r0,|L13.104|
00001a  7ac0              LDRB     r0,[r0,#0xb]
00001c  7288              STRB     r0,[r1,#0xa]
;;;2806   						if((RxDat.buf[6]>0)&&(RxDat.buf[7]==1))
00001e  4812              LDR      r0,|L13.104|
000020  7a00              LDRB     r0,[r0,#8]
000022  2800              CMP      r0,#0
000024  dd17              BLE      |L13.86|
000026  4810              LDR      r0,|L13.104|
000028  7a40              LDRB     r0,[r0,#9]
00002a  2801              CMP      r0,#1
00002c  d113              BNE      |L13.86|
;;;2807   						{
;;;2808   									if((Ir.cmd_key==0)||(Ir.cmd_key>56))
00002e  4608              MOV      r0,r1
000030  7a40              LDRB     r0,[r0,#9]  ; Ir
000032  b118              CBZ      r0,|L13.60|
000034  4608              MOV      r0,r1
000036  7a40              LDRB     r0,[r0,#9]  ; Ir
000038  2838              CMP      r0,#0x38
00003a  dd01              BLE      |L13.64|
                  |L13.60|
;;;2809   									{
;;;2810   												flag=0;
00003c  2400              MOVS     r4,#0
00003e  e00a              B        |L13.86|
                  |L13.64|
;;;2811   							    }
;;;2812   									else
;;;2813   									{
;;;2814   												Ir.serial=Dev.rand;
000040  480b              LDR      r0,|L13.112|
000042  79c0              LDRB     r0,[r0,#7]  ; Dev
000044  4909              LDR      r1,|L13.108|
000046  7208              STRB     r0,[r1,#8]
;;;2815   												IT1_IR_UnLoadToWireless(Ir.addr,Ir.cmd_key,Ir.key_mode);
000048  460b              MOV      r3,r1
00004a  7a9a              LDRB     r2,[r3,#0xa]  ; Ir
00004c  7a59              LDRB     r1,[r3,#9]  ; Ir
00004e  7818              LDRB     r0,[r3,#0]  ; Ir
000050  f7fffffe          BL       IT1_IR_UnLoadToWireless
;;;2816   												flag=1;
000054  2401              MOVS     r4,#1
                  |L13.86|
;;;2817   									}
;;;2818   						}
;;;2819   						
;;;2820   						if(flag==0)IT1_Load_RS485_Ack(OPT_ERR); 
000056  b91c              CBNZ     r4,|L13.96|
000058  20fc              MOVS     r0,#0xfc
00005a  f7fffffe          BL       IT1_Load_RS485_Ack
00005e  e002              B        |L13.102|
                  |L13.96|
;;;2821   						else       IT1_Load_RS485_Ack(OPT_OK); 
000060  20fb              MOVS     r0,#0xfb
000062  f7fffffe          BL       IT1_Load_RS485_Ack
                  |L13.102|
;;;2822   	
;;;2823   }
000066  bd10              POP      {r4,pc}
;;;2824   //=============================================================================================================
                          ENDP

                  |L13.104|
                          DCD      RxDat
                  |L13.108|
                          DCD      ||Ir||
                  |L13.112|
                          DCD      ||Dev||

                          AREA ||i.IT1_IR_LoadToWireless||, CODE, READONLY, ALIGN=2

                  IT1_IR_LoadToWireless PROC
;;;2912   //红外配置数据装入无线
;;;2913   void IT1_IR_LoadToWireless(uint8_t chl)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;2914   {
000004  4681              MOV      r9,r0
;;;2915   				uint8_t i,j,len,len1;
;;;2916   				_Frame *pws;		 
;;;2917   				//=====================================================================================================
;;;2918   	      if((Ir.wait==0)&&(Ir.flag==1))
000006  4888              LDR      r0,|L14.552|
000008  7880              LDRB     r0,[r0,#2]  ; Ir
00000a  2800              CMP      r0,#0
                  |L14.12|
00000c  d173              BNE      |L14.246|
00000e  4886              LDR      r0,|L14.552|
000010  7840              LDRB     r0,[r0,#1]  ; Ir
000012  2801              CMP      r0,#1
000014  d1fa              BNE      |L14.12|
;;;2919   	      {
;;;2920   					if(chl>=8)return;
000016  f1b90f08          CMP      r9,#8
00001a  db01              BLT      |L14.32|
                  |L14.28|
;;;2921   					pws=GetQueue_InQ(&WirelessSend_Queue,chl);	
;;;2922   					if(pws==0)return;
;;;2923   					
;;;2924   					Ir.wait=1;																	//
;;;2925   						
;;;2926   					pws->buf[0]=0x30;														//包长度
;;;2927   					pws->buf[1]=0x40;														//包类型
;;;2928   					
;;;2929   					//2017.11.16修改0为chl
;;;2930   					for(i=0;i<3;i++)pws->buf[2+i]=Ex_Table.Exchange[chl].wl_addr[i]; //目标地址
;;;2931   					pws->buf[5]=Ex_Table.Exchange[chl].channel;
;;;2932   					
;;;2933   					for(i=0;i<4;i++)pws->buf[6+i]=Ir.TgAddr[i];											//54键遥控器地址	源地址
;;;2934   					
;;;2935   					pws->buf[10]=(Ir.FrameNum<<4);
;;;2936               				Ir.serial++;if(Ir.serial>15)Ir.serial=15;					
;;;2937   					pws->buf[10]=pws->buf[10]+Ir.serial;
;;;2938   					
;;;2939   					pws->buf[11]=Ir.key_mode;									 //
;;;2940   					pws->buf[12]=Ir.cmd_key;									//键值或命令
;;;2941   					
;;;2942   					//下发的数据是遥控器类型
;;;2943   					if(Ir.curtype==0)
;;;2944   					{
;;;2945   						len=Ir.typelen;											
;;;2946   						if((len-Ir.curps)>32)
;;;2947   						{
;;;2948   								pws->buf[13]=32;
;;;2949   							  	for(i=0;i<32;i++)pws->buf[14+i]=Ir.typebuf[Ir.curps+i];
;;;2950   								Ir.curps=Ir.curps+32;
;;;2951   						}
;;;2952   						else
;;;2953   						{
;;;2954   								pws->buf[13]=len-Ir.curps;
;;;2955   							  len1=pws->buf[13];
;;;2956   							 	 for(i=0;i<pws->buf[13];i++)pws->buf[14+i]=Ir.typebuf[Ir.curps+i];
;;;2957   							  	j=0;
;;;2958   							  	for(i=len1;i<32;i++){pws->buf[14+len1+j]=0xff;j++;}
;;;2959   								Ir.curps=0;
;;;2960   							  	Ir.curtype=1;
;;;2961   						}
;;;2962   					}
;;;2963   					//下发的数据是遥控器按键
;;;2964   					else 
;;;2965   					{
;;;2966   								len=Ir.keylen;										
;;;2967   								if((len-Ir.curps)>32)
;;;2968   								{
;;;2969   									  pws->buf[13]=32;
;;;2970   									  for(i=0;i<32;i++)pws->buf[14+i]=Ir.keybuf[Ir.curps+i];
;;;2971   									  Ir.curps=Ir.curps+32;
;;;2972   								}
;;;2973   								else
;;;2974   								{
;;;2975   									 pws->buf[13]=len-Ir.curps;
;;;2976   									  len1=pws->buf[13];
;;;2977   									  for(i=0;i<pws->buf[13];i++)pws->buf[14+i]=Ir.keybuf[Ir.curps+i];
;;;2978   									  j=0;
;;;2979   									  for(i=len1;i<32;i++){pws->buf[14+len1+j]=0xff;j++;}
;;;2980   										Ir.curps=0;
;;;2981   									  Ir.curtype=0;
;;;2982   									  Ir.flag=0;
;;;2983   								}
;;;2984   								//bit7 bit6 区分当前数据是遥控类型或遥控器按键
;;;2985   								pws->buf[13]|=IR_TYPE_KEY;
;;;2986   					}
;;;2987   						
;;;2988   					pws->buf[46]=Crc8CheckSum(pws->buf,46);
;;;2989   					pws->buf[47]=SumCheck(pws->buf,46);
;;;2990   					
;;;2991   					pws->cnt=48;				   //发送总的字节数
;;;2992   					pws->flag=1;
;;;2993   					pws->resend=2;				 //重复上报三次	
;;;2994   					pws->rand=0;				   //第一次空闲既发送
;;;2995   					pws->ackwait=0;	
;;;2996   					EnQueueBuf(&WirelessSend_Queue,chl);		
;;;2997   						
;;;2998   			}
;;;2999   			//=============================================================================================
;;;3000   }
00001c  e8bd87f0          POP      {r4-r10,pc}
                  |L14.32|
000020  4649              MOV      r1,r9                 ;2921
000022  4882              LDR      r0,|L14.556|
000024  f7fffffe          BL       GetQueue_InQ
000028  4604              MOV      r4,r0                 ;2921
00002a  b904              CBNZ     r4,|L14.46|
00002c  e7f6              B        |L14.28|
                  |L14.46|
00002e  2001              MOVS     r0,#1                 ;2924
000030  497d              LDR      r1,|L14.552|
000032  7088              STRB     r0,[r1,#2]            ;2924
000034  2030              MOVS     r0,#0x30              ;2926
000036  7020              STRB     r0,[r4,#0]            ;2926
000038  2040              MOVS     r0,#0x40              ;2927
00003a  7060              STRB     r0,[r4,#1]            ;2927
00003c  2500              MOVS     r5,#0                 ;2930
00003e  e00a              B        |L14.86|
                  |L14.64|
000040  ebc901c9          RSB      r1,r9,r9,LSL #3       ;2930
000044  487a              LDR      r0,|L14.560|
000046  eb000041          ADD      r0,r0,r1,LSL #1       ;2930
00004a  1cc0              ADDS     r0,r0,#3              ;2930
00004c  5d41              LDRB     r1,[r0,r5]            ;2930
00004e  1ca8              ADDS     r0,r5,#2              ;2930
000050  5421              STRB     r1,[r4,r0]            ;2930
000052  1c68              ADDS     r0,r5,#1              ;2930
000054  b2c5              UXTB     r5,r0                 ;2930
                  |L14.86|
000056  2d03              CMP      r5,#3                 ;2930
000058  dbf2              BLT      |L14.64|
00005a  ebc901c9          RSB      r1,r9,r9,LSL #3       ;2931
00005e  4874              LDR      r0,|L14.560|
000060  eb000041          ADD      r0,r0,r1,LSL #1       ;2931
000064  7980              LDRB     r0,[r0,#6]            ;2931
000066  7160              STRB     r0,[r4,#5]            ;2931
000068  2500              MOVS     r5,#0                 ;2933
00006a  e006              B        |L14.122|
                  |L14.108|
00006c  486e              LDR      r0,|L14.552|
00006e  1cc0              ADDS     r0,r0,#3              ;2933
000070  5d41              LDRB     r1,[r0,r5]            ;2933
000072  1da8              ADDS     r0,r5,#6              ;2933
000074  5421              STRB     r1,[r4,r0]            ;2933
000076  1c68              ADDS     r0,r5,#1              ;2933
000078  b2c5              UXTB     r5,r0                 ;2933
                  |L14.122|
00007a  2d04              CMP      r5,#4                 ;2933
00007c  dbf6              BLT      |L14.108|
00007e  486a              LDR      r0,|L14.552|
000080  79c0              LDRB     r0,[r0,#7]            ;2935  ; Ir
000082  0700              LSLS     r0,r0,#28             ;2935
000084  0e00              LSRS     r0,r0,#24             ;2935
000086  72a0              STRB     r0,[r4,#0xa]          ;2935
000088  4867              LDR      r0,|L14.552|
00008a  7a00              LDRB     r0,[r0,#8]            ;2936  ; Ir
00008c  1c40              ADDS     r0,r0,#1              ;2936
00008e  4966              LDR      r1,|L14.552|
000090  7208              STRB     r0,[r1,#8]            ;2936
000092  4608              MOV      r0,r1                 ;2936
000094  7a00              LDRB     r0,[r0,#8]            ;2936  ; Ir
000096  280f              CMP      r0,#0xf               ;2936
000098  dd01              BLE      |L14.158|
00009a  200f              MOVS     r0,#0xf               ;2936
00009c  7208              STRB     r0,[r1,#8]            ;2936
                  |L14.158|
00009e  7aa0              LDRB     r0,[r4,#0xa]          ;2937
0000a0  4961              LDR      r1,|L14.552|
0000a2  7a09              LDRB     r1,[r1,#8]            ;2937  ; Ir
0000a4  4408              ADD      r0,r0,r1              ;2937
0000a6  72a0              STRB     r0,[r4,#0xa]          ;2937
0000a8  485f              LDR      r0,|L14.552|
0000aa  7a80              LDRB     r0,[r0,#0xa]          ;2939  ; Ir
0000ac  72e0              STRB     r0,[r4,#0xb]          ;2939
0000ae  485e              LDR      r0,|L14.552|
0000b0  7a40              LDRB     r0,[r0,#9]            ;2940  ; Ir
0000b2  7320              STRB     r0,[r4,#0xc]          ;2940
0000b4  485c              LDR      r0,|L14.552|
0000b6  7b40              LDRB     r0,[r0,#0xd]          ;2943  ; Ir
0000b8  2800              CMP      r0,#0                 ;2943
0000ba  d147              BNE      |L14.332|
0000bc  485a              LDR      r0,|L14.552|
0000be  7c47              LDRB     r7,[r0,#0x11]         ;2945  ; Ir
0000c0  7b00              LDRB     r0,[r0,#0xc]          ;2946  ; Ir
0000c2  1a38              SUBS     r0,r7,r0              ;2946
0000c4  2820              CMP      r0,#0x20              ;2946
0000c6  dd17              BLE      |L14.248|
0000c8  2020              MOVS     r0,#0x20              ;2948
0000ca  7360              STRB     r0,[r4,#0xd]          ;2948
0000cc  2500              MOVS     r5,#0                 ;2949
0000ce  e00a              B        |L14.230|
                  |L14.208|
0000d0  4855              LDR      r0,|L14.552|
0000d2  7b00              LDRB     r0,[r0,#0xc]          ;2949  ; Ir
0000d4  1941              ADDS     r1,r0,r5              ;2949
0000d6  4854              LDR      r0,|L14.552|
0000d8  3012              ADDS     r0,r0,#0x12           ;2949
0000da  5c41              LDRB     r1,[r0,r1]            ;2949
0000dc  f105000e          ADD      r0,r5,#0xe            ;2949
0000e0  5421              STRB     r1,[r4,r0]            ;2949
0000e2  1c68              ADDS     r0,r5,#1              ;2949
0000e4  b2c5              UXTB     r5,r0                 ;2949
                  |L14.230|
0000e6  2d20              CMP      r5,#0x20              ;2949
0000e8  dbf2              BLT      |L14.208|
0000ea  484f              LDR      r0,|L14.552|
0000ec  7b00              LDRB     r0,[r0,#0xc]          ;2950  ; Ir
0000ee  3020              ADDS     r0,r0,#0x20           ;2950
0000f0  494d              LDR      r1,|L14.552|
0000f2  7308              STRB     r0,[r1,#0xc]          ;2950
0000f4  e075              B        |L14.482|
                  |L14.246|
0000f6  e095              B        |L14.548|
                  |L14.248|
0000f8  484b              LDR      r0,|L14.552|
0000fa  7b00              LDRB     r0,[r0,#0xc]          ;2954  ; Ir
0000fc  1a38              SUBS     r0,r7,r0              ;2954
0000fe  7360              STRB     r0,[r4,#0xd]          ;2954
000100  f894800d          LDRB     r8,[r4,#0xd]          ;2955
000104  2500              MOVS     r5,#0                 ;2956
000106  e00a              B        |L14.286|
                  |L14.264|
000108  4847              LDR      r0,|L14.552|
00010a  7b00              LDRB     r0,[r0,#0xc]          ;2956  ; Ir
00010c  1941              ADDS     r1,r0,r5              ;2956
00010e  4846              LDR      r0,|L14.552|
000110  3012              ADDS     r0,r0,#0x12           ;2956
000112  5c41              LDRB     r1,[r0,r1]            ;2956
000114  f105000e          ADD      r0,r5,#0xe            ;2956
000118  5421              STRB     r1,[r4,r0]            ;2956
00011a  1c68              ADDS     r0,r5,#1              ;2956
00011c  b2c5              UXTB     r5,r0                 ;2956
                  |L14.286|
00011e  7b60              LDRB     r0,[r4,#0xd]          ;2956
000120  42a8              CMP      r0,r5                 ;2956
000122  dcf1              BGT      |L14.264|
000124  2600              MOVS     r6,#0                 ;2957
000126  4645              MOV      r5,r8                 ;2958
000128  e008              B        |L14.316|
                  |L14.298|
00012a  21ff              MOVS     r1,#0xff              ;2958
00012c  f108000e          ADD      r0,r8,#0xe            ;2958
000130  4430              ADD      r0,r0,r6              ;2958
000132  5421              STRB     r1,[r4,r0]            ;2958
000134  1c70              ADDS     r0,r6,#1              ;2958
000136  b2c6              UXTB     r6,r0                 ;2958
000138  1c68              ADDS     r0,r5,#1              ;2958
00013a  b2c5              UXTB     r5,r0                 ;2958
                  |L14.316|
00013c  2d20              CMP      r5,#0x20              ;2958
00013e  dbf4              BLT      |L14.298|
000140  2000              MOVS     r0,#0                 ;2959
000142  4939              LDR      r1,|L14.552|
000144  7308              STRB     r0,[r1,#0xc]          ;2959
000146  2001              MOVS     r0,#1                 ;2960
000148  7348              STRB     r0,[r1,#0xd]          ;2960
00014a  e04a              B        |L14.482|
                  |L14.332|
00014c  4836              LDR      r0,|L14.552|
00014e  f8907076          LDRB     r7,[r0,#0x76]         ;2966  ; Ir
000152  7b00              LDRB     r0,[r0,#0xc]          ;2967  ; Ir
000154  1a38              SUBS     r0,r7,r0              ;2967
000156  2820              CMP      r0,#0x20              ;2967
000158  dd16              BLE      |L14.392|
00015a  2020              MOVS     r0,#0x20              ;2969
00015c  7360              STRB     r0,[r4,#0xd]          ;2969
00015e  2500              MOVS     r5,#0                 ;2970
000160  e00a              B        |L14.376|
                  |L14.354|
000162  4831              LDR      r0,|L14.552|
000164  7b00              LDRB     r0,[r0,#0xc]          ;2970  ; Ir
000166  1941              ADDS     r1,r0,r5              ;2970
000168  482f              LDR      r0,|L14.552|
00016a  3077              ADDS     r0,r0,#0x77           ;2970
00016c  5c41              LDRB     r1,[r0,r1]            ;2970
00016e  f105000e          ADD      r0,r5,#0xe            ;2970
000172  5421              STRB     r1,[r4,r0]            ;2970
000174  1c68              ADDS     r0,r5,#1              ;2970
000176  b2c5              UXTB     r5,r0                 ;2970
                  |L14.376|
000178  2d20              CMP      r5,#0x20              ;2970
00017a  dbf2              BLT      |L14.354|
00017c  482a              LDR      r0,|L14.552|
00017e  7b00              LDRB     r0,[r0,#0xc]          ;2971  ; Ir
000180  3020              ADDS     r0,r0,#0x20           ;2971
000182  4929              LDR      r1,|L14.552|
000184  7308              STRB     r0,[r1,#0xc]          ;2971
000186  e028              B        |L14.474|
                  |L14.392|
000188  4827              LDR      r0,|L14.552|
00018a  7b00              LDRB     r0,[r0,#0xc]          ;2975  ; Ir
00018c  1a38              SUBS     r0,r7,r0              ;2975
00018e  7360              STRB     r0,[r4,#0xd]          ;2975
000190  f894800d          LDRB     r8,[r4,#0xd]          ;2976
000194  2500              MOVS     r5,#0                 ;2977
000196  e00a              B        |L14.430|
                  |L14.408|
000198  4823              LDR      r0,|L14.552|
00019a  7b00              LDRB     r0,[r0,#0xc]          ;2977  ; Ir
00019c  1941              ADDS     r1,r0,r5              ;2977
00019e  4822              LDR      r0,|L14.552|
0001a0  3077              ADDS     r0,r0,#0x77           ;2977
0001a2  5c41              LDRB     r1,[r0,r1]            ;2977
0001a4  f105000e          ADD      r0,r5,#0xe            ;2977
0001a8  5421              STRB     r1,[r4,r0]            ;2977
0001aa  1c68              ADDS     r0,r5,#1              ;2977
0001ac  b2c5              UXTB     r5,r0                 ;2977
                  |L14.430|
0001ae  7b60              LDRB     r0,[r4,#0xd]          ;2977
0001b0  42a8              CMP      r0,r5                 ;2977
0001b2  dcf1              BGT      |L14.408|
0001b4  2600              MOVS     r6,#0                 ;2978
0001b6  4645              MOV      r5,r8                 ;2979
0001b8  e008              B        |L14.460|
                  |L14.442|
0001ba  21ff              MOVS     r1,#0xff              ;2979
0001bc  f108000e          ADD      r0,r8,#0xe            ;2979
0001c0  4430              ADD      r0,r0,r6              ;2979
0001c2  5421              STRB     r1,[r4,r0]            ;2979
0001c4  1c70              ADDS     r0,r6,#1              ;2979
0001c6  b2c6              UXTB     r6,r0                 ;2979
0001c8  1c68              ADDS     r0,r5,#1              ;2979
0001ca  b2c5              UXTB     r5,r0                 ;2979
                  |L14.460|
0001cc  2d20              CMP      r5,#0x20              ;2979
0001ce  dbf4              BLT      |L14.442|
0001d0  2000              MOVS     r0,#0                 ;2980
0001d2  4915              LDR      r1,|L14.552|
0001d4  7308              STRB     r0,[r1,#0xc]          ;2980
0001d6  7348              STRB     r0,[r1,#0xd]          ;2981
0001d8  7048              STRB     r0,[r1,#1]            ;2982
                  |L14.474|
0001da  7b60              LDRB     r0,[r4,#0xd]          ;2985
0001dc  f0400040          ORR      r0,r0,#0x40           ;2985
0001e0  7360              STRB     r0,[r4,#0xd]          ;2985
                  |L14.482|
0001e2  212e              MOVS     r1,#0x2e              ;2988
0001e4  4620              MOV      r0,r4                 ;2988
0001e6  f7fffffe          BL       Crc8CheckSum
0001ea  f884002e          STRB     r0,[r4,#0x2e]         ;2988
0001ee  212e              MOVS     r1,#0x2e              ;2989
0001f0  4620              MOV      r0,r4                 ;2989
0001f2  f7fffffe          BL       SumCheck
0001f6  f10404ae          ADD      r4,r4,#0xae           ;2989
0001fa  f8040c7f          STRB     r0,[r4,#-0x7f]        ;2989
0001fe  f04f0030          MOV      r0,#0x30              ;2991
000202  76a0              STRB     r0,[r4,#0x1a]         ;2991
000204  f04f0001          MOV      r0,#1                 ;2992
000208  76e0              STRB     r0,[r4,#0x1b]         ;2992
00020a  f04f0002          MOV      r0,#2                 ;2993
00020e  7720              STRB     r0,[r4,#0x1c]         ;2993
000210  f04f0000          MOV      r0,#0                 ;2994
000214  77a0              STRB     r0,[r4,#0x1e]         ;2994
000216  77e0              STRB     r0,[r4,#0x1f]         ;2995
000218  f1a404ae          SUB      r4,r4,#0xae           ;2995
00021c  4649              MOV      r1,r9                 ;2996
00021e  4803              LDR      r0,|L14.556|
000220  f7fffffe          BL       EnQueueBuf
                  |L14.548|
000224  bf00              NOP      
000226  e6f9              B        |L14.28|
;;;3001   
                          ENDP

                  |L14.552|
                          DCD      ||Ir||
                  |L14.556|
                          DCD      WirelessSend_Queue
                  |L14.560|
                          DCD      Ex_Table+0x36

                          AREA ||i.IT1_IR_Setup||, CODE, READONLY, ALIGN=2

                  IT1_IR_Setup PROC
;;;2749   //
;;;2750   void IT1_IR_Setup(void)
000000  b538              PUSH     {r3-r5,lr}
;;;2751   {
;;;2752   						uint8_t tmp;
;;;2753   						//===========================================================================================================
;;;2754   						//2017.1.6修改，红外解码部分放在遥控器上
;;;2755   						__IO uint8_t i;
;;;2756   						
;;;2757   						Ir.addr=(RxDat.buf[5]&0x0f)-1;
000002  486f              LDR      r0,|L15.448|
000004  79c0              LDRB     r0,[r0,#7]
000006  f000000f          AND      r0,r0,#0xf
00000a  1e40              SUBS     r0,r0,#1
00000c  496d              LDR      r1,|L15.452|
00000e  7008              STRB     r0,[r1,#0]
;;;2758   						Ir.cmd_key=RxDat.buf[7];
000010  486b              LDR      r0,|L15.448|
000012  7a40              LDRB     r0,[r0,#9]
000014  7248              STRB     r0,[r1,#9]
;;;2759   	          Ir.key_mode=RxDat.buf[8];
000016  486a              LDR      r0,|L15.448|
000018  7a80              LDRB     r0,[r0,#0xa]
00001a  7288              STRB     r0,[r1,#0xa]
;;;2760   						//复制遥控器类型
;;;2761   	          Ir.typelen=RxDat.buf[9];
00001c  4868              LDR      r0,|L15.448|
00001e  7ac0              LDRB     r0,[r0,#0xb]
000020  7448              STRB     r0,[r1,#0x11]
;;;2762   	          if(Ir.typelen>IR_DAT_MAX)Ir.typelen=IR_DAT_MAX;
000022  4608              MOV      r0,r1
000024  7c40              LDRB     r0,[r0,#0x11]  ; Ir
000026  2864              CMP      r0,#0x64
000028  dd01              BLE      |L15.46|
00002a  2064              MOVS     r0,#0x64
00002c  7448              STRB     r0,[r1,#0x11]
                  |L15.46|
;;;2763   						for(i=0;i<Ir.typelen;i++)Ir.typebuf[i]=RxDat.buf[i+10];
00002e  2000              MOVS     r0,#0
000030  9000              STR      r0,[sp,#0]
000032  e00f              B        |L15.84|
                  |L15.52|
000034  4862              LDR      r0,|L15.448|
000036  1c80              ADDS     r0,r0,#2
000038  f89d1000          LDRB     r1,[sp,#0]
00003c  310a              ADDS     r1,r1,#0xa
00003e  5c41              LDRB     r1,[r0,r1]
000040  4860              LDR      r0,|L15.452|
000042  3012              ADDS     r0,r0,#0x12
000044  f89d2000          LDRB     r2,[sp,#0]
000048  5481              STRB     r1,[r0,r2]
00004a  f89d0000          LDRB     r0,[sp,#0]
00004e  1c40              ADDS     r0,r0,#1
000050  b2c0              UXTB     r0,r0
000052  9000              STR      r0,[sp,#0]
                  |L15.84|
000054  485b              LDR      r0,|L15.452|
000056  7c40              LDRB     r0,[r0,#0x11]  ; Ir
000058  f89d1000          LDRB     r1,[sp,#0]
00005c  4288              CMP      r0,r1
00005e  dce9              BGT      |L15.52|
;;;2764   				    Ir.typechm=0;
000060  2000              MOVS     r0,#0
000062  4958              LDR      r1,|L15.452|
000064  f88100db          STRB     r0,[r1,#0xdb]
;;;2765   						for(i=0;i<Ir.typelen;i++)Ir.typechm=Ir.typechm+Ir.typebuf[i];
000068  9000              STR      r0,[sp,#0]
00006a  e00f              B        |L15.140|
                  |L15.108|
00006c  4855              LDR      r0,|L15.452|
00006e  f89010db          LDRB     r1,[r0,#0xdb]  ; Ir
000072  3012              ADDS     r0,r0,#0x12
000074  f89d2000          LDRB     r2,[sp,#0]
000078  5c80              LDRB     r0,[r0,r2]
00007a  4408              ADD      r0,r0,r1
00007c  4951              LDR      r1,|L15.452|
00007e  f88100db          STRB     r0,[r1,#0xdb]
000082  f89d0000          LDRB     r0,[sp,#0]
000086  1c40              ADDS     r0,r0,#1
000088  b2c0              UXTB     r0,r0
00008a  9000              STR      r0,[sp,#0]
                  |L15.140|
00008c  484d              LDR      r0,|L15.452|
00008e  7c40              LDRB     r0,[r0,#0x11]  ; Ir
000090  f89d1000          LDRB     r1,[sp,#0]
000094  4288              CMP      r0,r1
000096  dce9              BGT      |L15.108|
;;;2766   					
;;;2767   						//复制按键数据
;;;2768   						Ir.keylen=RxDat.buf[Ir.typelen+10];
000098  484a              LDR      r0,|L15.452|
00009a  7c40              LDRB     r0,[r0,#0x11]  ; Ir
00009c  300a              ADDS     r0,r0,#0xa
00009e  4948              LDR      r1,|L15.448|
0000a0  1c89              ADDS     r1,r1,#2
0000a2  5c08              LDRB     r0,[r1,r0]
0000a4  4947              LDR      r1,|L15.452|
0000a6  f8810076          STRB     r0,[r1,#0x76]
;;;2769   						if(Ir.keylen>IR_DAT_MAX)Ir.keylen=IR_DAT_MAX;
0000aa  4608              MOV      r0,r1
0000ac  f8900076          LDRB     r0,[r0,#0x76]  ; Ir
0000b0  2864              CMP      r0,#0x64
0000b2  dd02              BLE      |L15.186|
0000b4  2064              MOVS     r0,#0x64
0000b6  f8810076          STRB     r0,[r1,#0x76]
                  |L15.186|
;;;2770   						
;;;2771   						for(i=0;i<Ir.keylen;i++)Ir.keybuf[i]=RxDat.buf[Ir.typelen+11+i];
0000ba  2000              MOVS     r0,#0
0000bc  9000              STR      r0,[sp,#0]
0000be  e012              B        |L15.230|
                  |L15.192|
0000c0  4840              LDR      r0,|L15.452|
0000c2  7c40              LDRB     r0,[r0,#0x11]  ; Ir
0000c4  300b              ADDS     r0,r0,#0xb
0000c6  f89d1000          LDRB     r1,[sp,#0]
0000ca  4401              ADD      r1,r1,r0
0000cc  483c              LDR      r0,|L15.448|
0000ce  1c80              ADDS     r0,r0,#2
0000d0  5c41              LDRB     r1,[r0,r1]
0000d2  483c              LDR      r0,|L15.452|
0000d4  3077              ADDS     r0,r0,#0x77
0000d6  f89d2000          LDRB     r2,[sp,#0]
0000da  5481              STRB     r1,[r0,r2]
0000dc  f89d0000          LDRB     r0,[sp,#0]
0000e0  1c40              ADDS     r0,r0,#1
0000e2  b2c0              UXTB     r0,r0
0000e4  9000              STR      r0,[sp,#0]
                  |L15.230|
0000e6  4837              LDR      r0,|L15.452|
0000e8  f8900076          LDRB     r0,[r0,#0x76]  ; Ir
0000ec  f89d1000          LDRB     r1,[sp,#0]
0000f0  4288              CMP      r0,r1
0000f2  dce5              BGT      |L15.192|
;;;2772   	          Ir.keychm=0;
0000f4  2000              MOVS     r0,#0
0000f6  4933              LDR      r1,|L15.452|
0000f8  f88100dc          STRB     r0,[r1,#0xdc]
;;;2773   			      for(i=0;i<Ir.keylen;i++)
0000fc  9000              STR      r0,[sp,#0]
0000fe  e00f              B        |L15.288|
                  |L15.256|
;;;2774   						{
;;;2775   							Ir.keychm=Ir.keychm+Ir.keybuf[i];
000100  4830              LDR      r0,|L15.452|
000102  f89010dc          LDRB     r1,[r0,#0xdc]  ; Ir
000106  3077              ADDS     r0,r0,#0x77
000108  f89d2000          LDRB     r2,[sp,#0]
00010c  5c80              LDRB     r0,[r0,r2]
00010e  4408              ADD      r0,r0,r1
000110  492c              LDR      r1,|L15.452|
000112  f88100dc          STRB     r0,[r1,#0xdc]
000116  f89d0000          LDRB     r0,[sp,#0]            ;2773
00011a  1c40              ADDS     r0,r0,#1              ;2773
00011c  b2c0              UXTB     r0,r0                 ;2773
00011e  9000              STR      r0,[sp,#0]            ;2773
                  |L15.288|
000120  4828              LDR      r0,|L15.452|
000122  f8900076          LDRB     r0,[r0,#0x76]         ;2773  ; Ir
000126  f89d1000          LDRB     r1,[sp,#0]            ;2773
00012a  4288              CMP      r0,r1                 ;2773
00012c  dce8              BGT      |L15.256|
;;;2776   						}
;;;2777   				
;;;2778   
;;;2779   						Ir.flag=1;																	//表示数据装入完毕
00012e  2001              MOVS     r0,#1
000130  4924              LDR      r1,|L15.452|
000132  7048              STRB     r0,[r1,#1]
;;;2780   						Ir.sendtime=SEND_TIME_MAX;									//最大发送时间
000134  f44f7016          MOV      r0,#0x258
000138  81c8              STRH     r0,[r1,#0xe]
;;;2781   						IT1_Load_RS485_Ack(OPT_OK); 
00013a  20fb              MOVS     r0,#0xfb
00013c  f7fffffe          BL       IT1_Load_RS485_Ack
;;;2782   						
;;;2783   						//============取得总包数=========
;;;2784   						Ir.FrameNum=Ir.typelen/32;
000140  4920              LDR      r1,|L15.452|
000142  7c48              LDRB     r0,[r1,#0x11]  ; Ir
000144  17c1              ASRS     r1,r0,#31
000146  eb0061d1          ADD      r1,r0,r1,LSR #27
00014a  1149              ASRS     r1,r1,#5
00014c  4a1d              LDR      r2,|L15.452|
00014e  71d1              STRB     r1,[r2,#7]
;;;2785   						tmp=Ir.typelen%32;
000150  4611              MOV      r1,r2
000152  7c48              LDRB     r0,[r1,#0x11]  ; Ir
000154  17c1              ASRS     r1,r0,#31
000156  eb0061d1          ADD      r1,r0,r1,LSR #27
00015a  1149              ASRS     r1,r1,#5
00015c  eba01141          SUB      r1,r0,r1,LSL #5
000160  b2cc              UXTB     r4,r1
;;;2786   						if(tmp!=0)Ir.FrameNum++;
000162  b124              CBZ      r4,|L15.366|
000164  4610              MOV      r0,r2
000166  79c0              LDRB     r0,[r0,#7]  ; Ir
000168  1c40              ADDS     r0,r0,#1
00016a  4611              MOV      r1,r2
00016c  71c8              STRB     r0,[r1,#7]
                  |L15.366|
;;;2787   						tmp=Ir.keylen/32;
00016e  4915              LDR      r1,|L15.452|
000170  f8910076          LDRB     r0,[r1,#0x76]  ; Ir
000174  17c1              ASRS     r1,r0,#31
000176  eb0061d1          ADD      r1,r0,r1,LSR #27
00017a  114c              ASRS     r4,r1,#5
;;;2788   						Ir.FrameNum=Ir.FrameNum+tmp;
00017c  4811              LDR      r0,|L15.452|
00017e  79c0              LDRB     r0,[r0,#7]  ; Ir
000180  4420              ADD      r0,r0,r4
000182  4910              LDR      r1,|L15.452|
000184  71c8              STRB     r0,[r1,#7]
;;;2789   						tmp=Ir.keylen%32;
000186  f8910076          LDRB     r0,[r1,#0x76]  ; Ir
00018a  17c1              ASRS     r1,r0,#31
00018c  eb0061d1          ADD      r1,r0,r1,LSR #27
000190  1149              ASRS     r1,r1,#5
000192  eba01141          SUB      r1,r0,r1,LSL #5
000196  b2cc              UXTB     r4,r1
;;;2790   						if(tmp!=0)Ir.FrameNum++;
000198  b124              CBZ      r4,|L15.420|
00019a  480a              LDR      r0,|L15.452|
00019c  79c0              LDRB     r0,[r0,#7]  ; Ir
00019e  1c40              ADDS     r0,r0,#1
0001a0  4908              LDR      r1,|L15.452|
0001a2  71c8              STRB     r0,[r1,#7]
                  |L15.420|
;;;2791   						if(Ir.FrameNum>15)Ir.FrameNum=15;
0001a4  4807              LDR      r0,|L15.452|
0001a6  79c0              LDRB     r0,[r0,#7]  ; Ir
0001a8  280f              CMP      r0,#0xf
0001aa  dd02              BLE      |L15.434|
0001ac  200f              MOVS     r0,#0xf
0001ae  4905              LDR      r1,|L15.452|
0001b0  71c8              STRB     r0,[r1,#7]
                  |L15.434|
;;;2792   						Ir.serial=0;
0001b2  2000              MOVS     r0,#0
0001b4  4903              LDR      r1,|L15.452|
0001b6  7208              STRB     r0,[r1,#8]
;;;2793   						//================================
;;;2794   						
;;;2795   						IT1_IR_LoadToWireless(Ir.addr);		
0001b8  7808              LDRB     r0,[r1,#0]  ; Ir
0001ba  f7fffffe          BL       IT1_IR_LoadToWireless
;;;2796   }
0001be  bd38              POP      {r3-r5,pc}
;;;2797   
                          ENDP

                  |L15.448|
                          DCD      RxDat
                  |L15.452|
                          DCD      ||Ir||

                          AREA ||i.IT1_IR_StuLoad||, CODE, READONLY, ALIGN=2

                  IT1_IR_StuLoad PROC
;;;2710   //参数2: 命令
;;;2711   void IT1_IR_StuLoad(uint8_t index,uint8_t len,uint8_t *pdat)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2712   {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
;;;2713   	
;;;2714   				_Frame *ps;
;;;2715   	      uint8_t i;
;;;2716   				
;;;2717   				ps=GetQueue_InQ(&RS485_Queue,8);
00000a  2108              MOVS     r1,#8
00000c  481d              LDR      r0,|L16.132|
00000e  f7fffffe          BL       GetQueue_InQ
000012  4604              MOV      r4,r0
;;;2718   				//缓冲区溢出
;;;2719   				if(ps==NULL)
000014  b90c              CBNZ     r4,|L16.26|
                  |L16.22|
;;;2720   				{
;;;2721   					return;
;;;2722   				}
;;;2723   				
;;;2724   				ps->buf[0]=0x04;			//帧控制
;;;2725   				ps->buf[1]=(Master_Address>>8)&0x00ff;  //目标地址H
;;;2726   				ps->buf[2]=Master_Address;		//目标地址L
;;;2727   				ps->buf[3]=0x00;	
;;;2728   				ps->buf[4]=Dev.addr[0];
;;;2729   				ps->buf[5]=0x80+index+1;//0x10;
;;;2730   				
;;;2731   
;;;2732   				ps->buf[6]=len;                        	   //数据长度
;;;2733   				if(len>3)len=3;
;;;2734   				for(i=0;i<len;i++)ps->buf[7+i]=*(pdat+i);
;;;2735   
;;;2736   				ps->buf[7+len]=Crc8CheckSum(ps->buf,7+len);		//CRC8校验
;;;2737   				ps->cnt=8+len;					//发送总的字节数
;;;2738   
;;;2739   
;;;2740   				ps->flag=1;
;;;2741   				ps->resend=4;
;;;2742   				ps->rand=0;
;;;2743   				ps->ackwait=30;					//等待应答时间最大300mS
;;;2744   				EnQueueBuf(&RS485_Queue,8);
;;;2745   }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L16.26|
00001a  2004              MOVS     r0,#4                 ;2724
00001c  7020              STRB     r0,[r4,#0]            ;2724
00001e  2000              MOVS     r0,#0                 ;2725
000020  7060              STRB     r0,[r4,#1]            ;2725
000022  70a0              STRB     r0,[r4,#2]            ;2726
000024  70e0              STRB     r0,[r4,#3]            ;2727
000026  4818              LDR      r0,|L16.136|
000028  7880              LDRB     r0,[r0,#2]            ;2728  ; Dev
00002a  7120              STRB     r0,[r4,#4]            ;2728
00002c  f1070081          ADD      r0,r7,#0x81           ;2729
000030  7160              STRB     r0,[r4,#5]            ;2729
000032  71a5              STRB     r5,[r4,#6]            ;2732
000034  2d03              CMP      r5,#3                 ;2733
000036  dd00              BLE      |L16.58|
000038  2503              MOVS     r5,#3                 ;2733
                  |L16.58|
00003a  2600              MOVS     r6,#0                 ;2734
00003c  e005              B        |L16.74|
                  |L16.62|
00003e  f8181006          LDRB     r1,[r8,r6]            ;2734
000042  1df0              ADDS     r0,r6,#7              ;2734
000044  5421              STRB     r1,[r4,r0]            ;2734
000046  1c70              ADDS     r0,r6,#1              ;2734
000048  b2c6              UXTB     r6,r0                 ;2734
                  |L16.74|
00004a  42ae              CMP      r6,r5                 ;2734
00004c  dbf7              BLT      |L16.62|
00004e  1de8              ADDS     r0,r5,#7              ;2736
000050  b2c1              UXTB     r1,r0                 ;2736
000052  4620              MOV      r0,r4                 ;2736
000054  f7fffffe          BL       Crc8CheckSum
000058  1de9              ADDS     r1,r5,#7              ;2736
00005a  5460              STRB     r0,[r4,r1]            ;2736
00005c  1c48              ADDS     r0,r1,#1              ;2737
00005e  f8040fc8          STRB     r0,[r4,#0xc8]!        ;2737
000062  2001              MOVS     r0,#1                 ;2740
000064  7060              STRB     r0,[r4,#1]            ;2740
000066  2004              MOVS     r0,#4                 ;2741
000068  70a0              STRB     r0,[r4,#2]            ;2741
00006a  2000              MOVS     r0,#0                 ;2742
00006c  7120              STRB     r0,[r4,#4]            ;2742
00006e  201e              MOVS     r0,#0x1e              ;2743
000070  7160              STRB     r0,[r4,#5]            ;2743
000072  f1a404c8          SUB      r4,r4,#0xc8           ;2743
000076  f04f0108          MOV      r1,#8                 ;2744
00007a  4802              LDR      r0,|L16.132|
00007c  f7fffffe          BL       EnQueueBuf
000080  bf00              NOP      
000082  e7c8              B        |L16.22|
;;;2746   
                          ENDP

                  |L16.132|
                          DCD      RS485_Queue
                  |L16.136|
                          DCD      ||Dev||

                          AREA ||i.IT1_IR_UnLoadToWireless||, CODE, READONLY, ALIGN=2

                  IT1_IR_UnLoadToWireless PROC
;;;3004   //红外配置数据装入无线
;;;3005   void IT1_IR_UnLoadToWireless(uint8_t chl,uint8_t key,uint8_t mode)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;3006   {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;3007   						uint8_t  i;
;;;3008   						_Frame *pws;
;;;3009   
;;;3010   	          if(chl>=8)return;
00000a  2e08              CMP      r6,#8
00000c  db01              BLT      |L17.18|
                  |L17.14|
;;;3011   	
;;;3012   						pws=GetQueue_InQ(&WirelessSend_Queue,chl);	
;;;3013   					  if(pws==0)return;
;;;3014   					
;;;3015   					  Ir.wait=1;																	//
;;;3016   						
;;;3017   						pws->buf[0]=0x10;														//包长度
;;;3018   						pws->buf[1]=MTD_IR_DEL;														//包类型
;;;3019   					
;;;3020   					  //2017.11.16增加通道，修改0为chl
;;;3021   						for(i=0;i<3;i++)pws->buf[2+i]=Ex_Table.Exchange[chl].wl_addr[i]; //目标地址
;;;3022   	          pws->buf[5]=Ex_Table.Exchange[chl].channel;
;;;3023   						for(i=0;i<4;i++)pws->buf[6+i]=Ir.TgAddr[i];											//54键遥控器地址	源地址
;;;3024   						
;;;3025   					  pws->buf[10]=Ir.serial;
;;;3026   					
;;;3027   					  pws->buf[11]=mode;									  //
;;;3028   					  pws->buf[12]=key;										//键值或命令
;;;3029   					
;;;3030   						pws->buf[13]=0x00;							//高2 bit 为类型
;;;3031   						
;;;3032   						pws->buf[14]=Crc8CheckSum(pws->buf,14);
;;;3033   						pws->buf[15]=SumCheck(pws->buf,14);
;;;3034   						
;;;3035   						pws->cnt=16;				   //发送总的字节数
;;;3036   						pws->flag=1;
;;;3037   						pws->resend=1;				 //重复上报三次	
;;;3038   						pws->rand=0;				   //第一次空闲既发送
;;;3039   						pws->ackwait=0;	
;;;3040   						EnQueueBuf(&WirelessSend_Queue,chl);	
;;;3041   					}
00000e  e8bd81f0          POP      {r4-r8,pc}
                  |L17.18|
000012  4631              MOV      r1,r6                 ;3012
000014  482a              LDR      r0,|L17.192|
000016  f7fffffe          BL       GetQueue_InQ
00001a  4604              MOV      r4,r0                 ;3012
00001c  b904              CBNZ     r4,|L17.32|
00001e  e7f6              B        |L17.14|
                  |L17.32|
000020  2001              MOVS     r0,#1                 ;3015
000022  4928              LDR      r1,|L17.196|
000024  7088              STRB     r0,[r1,#2]            ;3015
000026  2010              MOVS     r0,#0x10              ;3017
000028  7020              STRB     r0,[r4,#0]            ;3017
00002a  2044              MOVS     r0,#0x44              ;3018
00002c  7060              STRB     r0,[r4,#1]            ;3018
00002e  2500              MOVS     r5,#0                 ;3021
000030  e00a              B        |L17.72|
                  |L17.50|
000032  ebc601c6          RSB      r1,r6,r6,LSL #3       ;3021
000036  4824              LDR      r0,|L17.200|
000038  eb000041          ADD      r0,r0,r1,LSL #1       ;3021
00003c  1cc0              ADDS     r0,r0,#3              ;3021
00003e  5d41              LDRB     r1,[r0,r5]            ;3021
000040  1ca8              ADDS     r0,r5,#2              ;3021
000042  5421              STRB     r1,[r4,r0]            ;3021
000044  1c68              ADDS     r0,r5,#1              ;3021
000046  b2c5              UXTB     r5,r0                 ;3021
                  |L17.72|
000048  2d03              CMP      r5,#3                 ;3021
00004a  dbf2              BLT      |L17.50|
00004c  ebc601c6          RSB      r1,r6,r6,LSL #3       ;3022
000050  481d              LDR      r0,|L17.200|
000052  eb000041          ADD      r0,r0,r1,LSL #1       ;3022
000056  7980              LDRB     r0,[r0,#6]            ;3022
000058  7160              STRB     r0,[r4,#5]            ;3022
00005a  2500              MOVS     r5,#0                 ;3023
00005c  e006              B        |L17.108|
                  |L17.94|
00005e  4819              LDR      r0,|L17.196|
000060  1cc0              ADDS     r0,r0,#3              ;3023
000062  5d41              LDRB     r1,[r0,r5]            ;3023
000064  1da8              ADDS     r0,r5,#6              ;3023
000066  5421              STRB     r1,[r4,r0]            ;3023
000068  1c68              ADDS     r0,r5,#1              ;3023
00006a  b2c5              UXTB     r5,r0                 ;3023
                  |L17.108|
00006c  2d04              CMP      r5,#4                 ;3023
00006e  dbf6              BLT      |L17.94|
000070  4814              LDR      r0,|L17.196|
000072  7a00              LDRB     r0,[r0,#8]            ;3025  ; Ir
000074  72a0              STRB     r0,[r4,#0xa]          ;3025
000076  f884800b          STRB     r8,[r4,#0xb]          ;3027
00007a  7327              STRB     r7,[r4,#0xc]          ;3028
00007c  2000              MOVS     r0,#0                 ;3030
00007e  7360              STRB     r0,[r4,#0xd]          ;3030
000080  210e              MOVS     r1,#0xe               ;3032
000082  4620              MOV      r0,r4                 ;3032
000084  f7fffffe          BL       Crc8CheckSum
000088  73a0              STRB     r0,[r4,#0xe]          ;3032
00008a  210e              MOVS     r1,#0xe               ;3033
00008c  4620              MOV      r0,r4                 ;3033
00008e  f7fffffe          BL       SumCheck
000092  f10404ae          ADD      r4,r4,#0xae           ;3033
000096  f8040c9f          STRB     r0,[r4,#-0x9f]        ;3033
00009a  f04f0010          MOV      r0,#0x10              ;3035
00009e  76a0              STRB     r0,[r4,#0x1a]         ;3035
0000a0  f04f0001          MOV      r0,#1                 ;3036
0000a4  76e0              STRB     r0,[r4,#0x1b]         ;3036
0000a6  7720              STRB     r0,[r4,#0x1c]         ;3037
0000a8  f04f0000          MOV      r0,#0                 ;3038
0000ac  77a0              STRB     r0,[r4,#0x1e]         ;3038
0000ae  77e0              STRB     r0,[r4,#0x1f]         ;3039
0000b0  f1a404ae          SUB      r4,r4,#0xae           ;3039
0000b4  4631              MOV      r1,r6                 ;3040
0000b6  4802              LDR      r0,|L17.192|
0000b8  f7fffffe          BL       EnQueueBuf
0000bc  bf00              NOP      
0000be  e7a6              B        |L17.14|
;;;3042   //=====================================================================================================
                          ENDP

                  |L17.192|
                          DCD      WirelessSend_Queue
                  |L17.196|
                          DCD      ||Ir||
                  |L17.200|
                          DCD      Ex_Table+0x36

                          AREA ||i.IT1_IrDel_Report||, CODE, READONLY, ALIGN=2

                  IT1_IrDel_Report PROC
;;;2879   //红外配置完成后，向PC发送配置情况,如果无线部分失败，则数据全部填充0xff
;;;2880   void IT1_IrDel_Report(uint8_t index)
000000  b570              PUSH     {r4-r6,lr}
;;;2881   {
000002  4605              MOV      r5,r0
;;;2882   				_Frame *ps;
;;;2883   				
;;;2884   				ps=GetQueue_InQ(&RS485_Queue,8);
000004  2108              MOVS     r1,#8
000006  481c              LDR      r0,|L18.120|
000008  f7fffffe          BL       GetQueue_InQ
00000c  4604              MOV      r4,r0
;;;2885   				if(ps==NULL)
00000e  b904              CBNZ     r4,|L18.18|
                  |L18.16|
;;;2886   				{
;;;2887   					return;
;;;2888   				}
;;;2889   				
;;;2890   				ps->buf[0]=0x26;							//
;;;2891   				ps->buf[1]=0x00;  						//
;;;2892   				ps->buf[2]=0x00;							//
;;;2893   				ps->buf[3]=0x00;	
;;;2894   				ps->buf[4]=Dev.addr[0];
;;;2895   				ps->buf[5]=0x80+index+1;;		
;;;2896   
;;;2897   				ps->buf[6]=0x03;						//总的数据长度,在后面重新计算
;;;2898   				ps->buf[7]=0x01;						//删除	
;;;2899   				ps->buf[8]=Ir.cmd_key;
;;;2900   				ps->buf[9]=0x00;
;;;2901   				ps->buf[10]=Crc8CheckSum(ps->buf,10);		//CRC8??
;;;2902   				ps->cnt=11;	
;;;2903   
;;;2904   				ps->flag=1;
;;;2905   				ps->resend=2;
;;;2906   				//ps->rand=100;
;;;2907   				ps->ackwait=30;					//
;;;2908   				EnQueueBuf(&RS485_Queue,8);
;;;2909   }
000010  bd70              POP      {r4-r6,pc}
                  |L18.18|
000012  2026              MOVS     r0,#0x26              ;2890
000014  7020              STRB     r0,[r4,#0]            ;2890
000016  2000              MOVS     r0,#0                 ;2891
000018  7060              STRB     r0,[r4,#1]            ;2891
00001a  70a0              STRB     r0,[r4,#2]            ;2892
00001c  70e0              STRB     r0,[r4,#3]            ;2893
00001e  4817              LDR      r0,|L18.124|
000020  7880              LDRB     r0,[r0,#2]            ;2894  ; Dev
000022  7120              STRB     r0,[r4,#4]            ;2894
000024  f1050081          ADD      r0,r5,#0x81           ;2895
000028  7160              STRB     r0,[r4,#5]            ;2895
00002a  2003              MOVS     r0,#3                 ;2897
00002c  71a0              STRB     r0,[r4,#6]            ;2897
00002e  2001              MOVS     r0,#1                 ;2898
000030  71e0              STRB     r0,[r4,#7]            ;2898
000032  4813              LDR      r0,|L18.128|
000034  7a40              LDRB     r0,[r0,#9]            ;2899  ; Ir
000036  7220              STRB     r0,[r4,#8]            ;2899
000038  2000              MOVS     r0,#0                 ;2900
00003a  7260              STRB     r0,[r4,#9]            ;2900
00003c  210a              MOVS     r1,#0xa               ;2901
00003e  4620              MOV      r0,r4                 ;2901
000040  f7fffffe          BL       Crc8CheckSum
000044  f10404ae          ADD      r4,r4,#0xae           ;2901
000048  f8040ca4          STRB     r0,[r4,#-0xa4]        ;2901
00004c  f04f000b          MOV      r0,#0xb               ;2902
000050  76a0              STRB     r0,[r4,#0x1a]         ;2902
000052  f04f0001          MOV      r0,#1                 ;2904
000056  76e0              STRB     r0,[r4,#0x1b]         ;2904
000058  f04f0002          MOV      r0,#2                 ;2905
00005c  7720              STRB     r0,[r4,#0x1c]         ;2905
00005e  f04f001e          MOV      r0,#0x1e              ;2907
000062  77e0              STRB     r0,[r4,#0x1f]         ;2907
000064  f1a404ae          SUB      r4,r4,#0xae           ;2907
000068  f04f0108          MOV      r1,#8                 ;2908
00006c  4802              LDR      r0,|L18.120|
00006e  f7fffffe          BL       EnQueueBuf
000072  bf00              NOP      
000074  e7cc              B        |L18.16|
;;;2910   
                          ENDP

000076  0000              DCW      0x0000
                  |L18.120|
                          DCD      RS485_Queue
                  |L18.124|
                          DCD      ||Dev||
                  |L18.128|
                          DCD      ||Ir||

                          AREA ||i.IT1_IrSetup_Report||, CODE, READONLY, ALIGN=2

                  IT1_IrSetup_Report PROC
;;;2825   //红外配置完成后，向PC发送配置情况,如果无线部分失败，则数据全部填充0xff
;;;2826   void IT1_IrSetup_Report(uint8_t st)
000000  b570              PUSH     {r4-r6,lr}
;;;2827   {
000002  4606              MOV      r6,r0
;;;2828   				uint8_t i;
;;;2829   				_Frame *ps;
;;;2830   				
;;;2831   				ps=GetQueue_InQ(&RS485_Queue,8);
000004  2108              MOVS     r1,#8
000006  4841              LDR      r0,|L19.268|
000008  f7fffffe          BL       GetQueue_InQ
00000c  4604              MOV      r4,r0
;;;2832   				if(ps==NULL)
00000e  b904              CBNZ     r4,|L19.18|
                  |L19.16|
;;;2833   				{
;;;2834   					return;
;;;2835   				}
;;;2836   				
;;;2837   				ps->buf[0]=0x06;							//
;;;2838   				ps->buf[1]=0x00;  						//
;;;2839   				ps->buf[2]=0x00;							//
;;;2840   				ps->buf[3]=0x00;	
;;;2841   				ps->buf[4]=Dev.addr[0];
;;;2842   				ps->buf[5]=0x10;		
;;;2843   
;;;2844   				if(st==OPT_ERR)
;;;2845   				{
;;;2846   							ps->buf[6]=0;						//数据长度
;;;2847   							ps->buf[7]=Crc8CheckSum(ps->buf,7);		//CRC8??
;;;2848   							ps->cnt=8;			
;;;2849   				}
;;;2850   				else
;;;2851   				{
;;;2852   							ps->buf[6]=2+Ir.typelen+Ir.keylen+2;						//总的数据长度,在后面重新计算
;;;2853   							ps->buf[7]=Ir.cmd_key;
;;;2854   	            ps->buf[8]=Ir.key_mode;
;;;2855   					    ps->buf[9]=Ir.typelen;
;;;2856   					    for(i=0;i<Ir.typelen;i++)
;;;2857   							{
;;;2858   										ps->buf[10+i]=Ir.typebuf[i];
;;;2859   							}
;;;2860   							ps->buf[10+Ir.typelen]=Ir.keylen;
;;;2861   							for(i=0;i<Ir.keylen;i++)
;;;2862   							{
;;;2863   										ps->buf[10+Ir.typelen+1+i]=Ir.keybuf[i];
;;;2864   							}
;;;2865   							ps->buf[10+Ir.typelen+1+Ir.keylen]=Crc8CheckSum(ps->buf,10+Ir.typelen+1+Ir.keylen);		//CRC8??
;;;2866   							ps->cnt=10+Ir.typelen+Ir.keylen+1+1;	
;;;2867   				}
;;;2868   				
;;;2869   		
;;;2870   				
;;;2871   				ps->flag=1;
;;;2872   				ps->resend=4;
;;;2873   				//ps->rand=100;
;;;2874   				ps->ackwait=30;					//
;;;2875   				EnQueueBuf(&RS485_Queue,8);
;;;2876   }
000010  bd70              POP      {r4-r6,pc}
                  |L19.18|
000012  2006              MOVS     r0,#6                 ;2837
000014  7020              STRB     r0,[r4,#0]            ;2837
000016  2000              MOVS     r0,#0                 ;2838
000018  7060              STRB     r0,[r4,#1]            ;2838
00001a  70a0              STRB     r0,[r4,#2]            ;2839
00001c  70e0              STRB     r0,[r4,#3]            ;2840
00001e  483c              LDR      r0,|L19.272|
000020  7880              LDRB     r0,[r0,#2]            ;2841  ; Dev
000022  7120              STRB     r0,[r4,#4]            ;2841
000024  2010              MOVS     r0,#0x10              ;2842
000026  7160              STRB     r0,[r4,#5]            ;2842
000028  2efc              CMP      r6,#0xfc              ;2844
00002a  d10a              BNE      |L19.66|
00002c  2000              MOVS     r0,#0                 ;2846
00002e  71a0              STRB     r0,[r4,#6]            ;2846
000030  2107              MOVS     r1,#7                 ;2847
000032  4620              MOV      r0,r4                 ;2847
000034  f7fffffe          BL       Crc8CheckSum
000038  71e0              STRB     r0,[r4,#7]            ;2847
00003a  2008              MOVS     r0,#8                 ;2848
00003c  f88400c8          STRB     r0,[r4,#0xc8]         ;2848
000040  e054              B        |L19.236|
                  |L19.66|
000042  4834              LDR      r0,|L19.276|
000044  7c40              LDRB     r0,[r0,#0x11]         ;2852  ; Ir
000046  1c80              ADDS     r0,r0,#2              ;2852
000048  4932              LDR      r1,|L19.276|
00004a  f8911076          LDRB     r1,[r1,#0x76]         ;2852  ; Ir
00004e  4408              ADD      r0,r0,r1              ;2852
000050  1c80              ADDS     r0,r0,#2              ;2852
000052  71a0              STRB     r0,[r4,#6]            ;2852
000054  482f              LDR      r0,|L19.276|
000056  7a40              LDRB     r0,[r0,#9]            ;2853  ; Ir
000058  71e0              STRB     r0,[r4,#7]            ;2853
00005a  482e              LDR      r0,|L19.276|
00005c  7a80              LDRB     r0,[r0,#0xa]          ;2854  ; Ir
00005e  7220              STRB     r0,[r4,#8]            ;2854
000060  482c              LDR      r0,|L19.276|
000062  7c40              LDRB     r0,[r0,#0x11]         ;2855  ; Ir
000064  7260              STRB     r0,[r4,#9]            ;2855
000066  2500              MOVS     r5,#0                 ;2856
000068  e007              B        |L19.122|
                  |L19.106|
00006a  482a              LDR      r0,|L19.276|
00006c  3012              ADDS     r0,r0,#0x12           ;2858
00006e  5d41              LDRB     r1,[r0,r5]            ;2858
000070  f105000a          ADD      r0,r5,#0xa            ;2858
000074  5421              STRB     r1,[r4,r0]            ;2858
000076  1c68              ADDS     r0,r5,#1              ;2856
000078  b2c5              UXTB     r5,r0                 ;2856
                  |L19.122|
00007a  4826              LDR      r0,|L19.276|
00007c  7c40              LDRB     r0,[r0,#0x11]         ;2856  ; Ir
00007e  42a8              CMP      r0,r5                 ;2856
000080  dcf3              BGT      |L19.106|
000082  4824              LDR      r0,|L19.276|
000084  f8901076          LDRB     r1,[r0,#0x76]         ;2860  ; Ir
000088  7c40              LDRB     r0,[r0,#0x11]         ;2860  ; Ir
00008a  300a              ADDS     r0,r0,#0xa            ;2860
00008c  5421              STRB     r1,[r4,r0]            ;2860
00008e  2500              MOVS     r5,#0                 ;2861
000090  e009              B        |L19.166|
                  |L19.146|
000092  4820              LDR      r0,|L19.276|
000094  3077              ADDS     r0,r0,#0x77           ;2863
000096  5d41              LDRB     r1,[r0,r5]            ;2863
000098  3877              SUBS     r0,r0,#0x77           ;2863
00009a  7c40              LDRB     r0,[r0,#0x11]         ;2863  ; Ir
00009c  300b              ADDS     r0,r0,#0xb            ;2863
00009e  4428              ADD      r0,r0,r5              ;2863
0000a0  5421              STRB     r1,[r4,r0]            ;2863
0000a2  1c68              ADDS     r0,r5,#1              ;2861
0000a4  b2c5              UXTB     r5,r0                 ;2861
                  |L19.166|
0000a6  481b              LDR      r0,|L19.276|
0000a8  f8900076          LDRB     r0,[r0,#0x76]         ;2861  ; Ir
0000ac  42a8              CMP      r0,r5                 ;2861
0000ae  dcf0              BGT      |L19.146|
0000b0  4818              LDR      r0,|L19.276|
0000b2  7c40              LDRB     r0,[r0,#0x11]         ;2865  ; Ir
0000b4  300b              ADDS     r0,r0,#0xb            ;2865
0000b6  4a17              LDR      r2,|L19.276|
0000b8  f8922076          LDRB     r2,[r2,#0x76]         ;2865  ; Ir
0000bc  4410              ADD      r0,r0,r2              ;2865
0000be  b2c1              UXTB     r1,r0                 ;2865
0000c0  4620              MOV      r0,r4                 ;2865
0000c2  f7fffffe          BL       Crc8CheckSum
0000c6  4601              MOV      r1,r0                 ;2865
0000c8  4812              LDR      r0,|L19.276|
0000ca  7c40              LDRB     r0,[r0,#0x11]         ;2865  ; Ir
0000cc  300b              ADDS     r0,r0,#0xb            ;2865
0000ce  4a11              LDR      r2,|L19.276|
0000d0  f8922076          LDRB     r2,[r2,#0x76]         ;2865  ; Ir
0000d4  4410              ADD      r0,r0,r2              ;2865
0000d6  5421              STRB     r1,[r4,r0]            ;2865
0000d8  480e              LDR      r0,|L19.276|
0000da  7c40              LDRB     r0,[r0,#0x11]         ;2866  ; Ir
0000dc  300a              ADDS     r0,r0,#0xa            ;2866
0000de  490d              LDR      r1,|L19.276|
0000e0  f8911076          LDRB     r1,[r1,#0x76]         ;2866  ; Ir
0000e4  4408              ADD      r0,r0,r1              ;2866
0000e6  1c80              ADDS     r0,r0,#2              ;2866
0000e8  f88400c8          STRB     r0,[r4,#0xc8]         ;2866
                  |L19.236|
0000ec  2001              MOVS     r0,#1                 ;2871
0000ee  f8040fc9          STRB     r0,[r4,#0xc9]!        ;2871
0000f2  2004              MOVS     r0,#4                 ;2872
0000f4  7060              STRB     r0,[r4,#1]            ;2872
0000f6  201e              MOVS     r0,#0x1e              ;2874
0000f8  7120              STRB     r0,[r4,#4]            ;2874
0000fa  f1a404c9          SUB      r4,r4,#0xc9           ;2874
0000fe  f04f0108          MOV      r1,#8                 ;2875
000102  4802              LDR      r0,|L19.268|
000104  f7fffffe          BL       EnQueueBuf
000108  bf00              NOP      
00010a  e781              B        |L19.16|
;;;2877   
                          ENDP

                  |L19.268|
                          DCD      RS485_Queue
                  |L19.272|
                          DCD      ||Dev||
                  |L19.276|
                          DCD      ||Ir||

                          AREA ||i.IT1_Key_DataLoad||, CODE, READONLY, ALIGN=2

                  IT1_Key_DataLoad PROC
;;;1596   //参数2: 命令
;;;1597   void IT1_Key_DataLoad(uint8_t index,uint8_t cmd,uint8_t dat)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1598   {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4691              MOV      r9,r2
;;;1599   				uint8_t lin,row,tt;
;;;1600   	
;;;1601   				_Frame *ps;
;;;1602   	
;;;1603   	
;;;1604   				//如果是54键，42键 旋转按键，传感器等
;;;1605   				if((Ex_Table.Exchange[index].type==EX_KEY_54KEY)||(Ex_Table.Exchange[index].type==EX_KEY_42KEY) \
00000a  ebc601c6          RSB      r1,r6,r6,LSL #3
00000e  4860              LDR      r0,|L20.400|
000010  f8100011          LDRB     r0,[r0,r1,LSL #1]
000014  28fa              CMP      r0,#0xfa
000016  d022              BEQ      |L20.94|
000018  ebc601c6          RSB      r1,r6,r6,LSL #3
00001c  485c              LDR      r0,|L20.400|
00001e  f8100011          LDRB     r0,[r0,r1,LSL #1]
000022  28fb              CMP      r0,#0xfb
000024  d01b              BEQ      |L20.94|
;;;1606   					||(Ex_Table.Exchange[index].type==EX_KEY_TURN)||(Ex_Table.Exchange[index].type==EX_KEY_FULL1) \
000026  ebc601c6          RSB      r1,r6,r6,LSL #3
00002a  4859              LDR      r0,|L20.400|
00002c  f8100011          LDRB     r0,[r0,r1,LSL #1]
000030  28fc              CMP      r0,#0xfc
000032  d014              BEQ      |L20.94|
000034  ebc601c6          RSB      r1,r6,r6,LSL #3
000038  4855              LDR      r0,|L20.400|
00003a  f8100011          LDRB     r0,[r0,r1,LSL #1]
00003e  28f9              CMP      r0,#0xf9
000040  d00d              BEQ      |L20.94|
;;;1607   				  ||(Ex_Table.Exchange[index].type==EX_KEY_SCENE1)||(Ex_Table.Exchange[index].type==EX_KEY_NORMAL1))
000042  ebc601c6          RSB      r1,r6,r6,LSL #3
000046  4852              LDR      r0,|L20.400|
000048  f8100011          LDRB     r0,[r0,r1,LSL #1]
00004c  28f5              CMP      r0,#0xf5
00004e  d006              BEQ      |L20.94|
000050  ebc601c6          RSB      r1,r6,r6,LSL #3
000054  484e              LDR      r0,|L20.400|
000056  f8100011          LDRB     r0,[r0,r1,LSL #1]
00005a  28f8              CMP      r0,#0xf8
00005c  d11e              BNE      |L20.156|
                  |L20.94|
;;;1608   				  
;;;1609   				{
;;;1610   						if(cmd>0)cmd=cmd-1;
00005e  2c00              CMP      r4,#0
000060  dd01              BLE      |L20.102|
000062  1e60              SUBS     r0,r4,#1
000064  b2c4              UXTB     r4,r0
                  |L20.102|
;;;1611   						lin=cmd/8;
000066  4620              MOV      r0,r4
000068  17e1              ASRS     r1,r4,#31
00006a  eb047151          ADD      r1,r4,r1,LSR #29
00006e  f3c107c7          UBFX     r7,r1,#3,#8
;;;1612   						row=cmd%8;
000072  17e1              ASRS     r1,r4,#31
000074  eb047151          ADD      r1,r4,r1,LSR #29
000078  10c9              ASRS     r1,r1,#3
00007a  eba401c1          SUB      r1,r4,r1,LSL #3
00007e  f00108ff          AND      r8,r1,#0xff
;;;1613   						if((Pannel.item[index].onoffbuf[lin]&(0x01<<row))==0x00)return;
000082  ebc61106          RSB      r1,r6,r6,LSL #4
000086  4843              LDR      r0,|L20.404|
000088  4408              ADD      r0,r0,r1
00008a  3008              ADDS     r0,r0,#8
00008c  5dc0              LDRB     r0,[r0,r7]
00008e  2101              MOVS     r1,#1
000090  fa01f108          LSL      r1,r1,r8
000094  4208              TST      r0,r1
000096  d101              BNE      |L20.156|
                  |L20.152|
;;;1614   				}
;;;1615   				//如果是通用遥控器
;;;1616   				if((Ex_Table.Exchange[index].type>=EX_KEY_SCENE1)&&(Ex_Table.Exchange[index].type<=EX_KEY_FULL1))
;;;1617   				{
;;;1618   							if(cmd>0)cmd=cmd-1;
;;;1619   							lin=cmd/8;
;;;1620   							row=cmd%8;
;;;1621   							tt=(Pannel.item[index].onoffbuf[lin]&(0x01<<row));
;;;1622   
;;;1623   //							//无线灯光
;;;1624   //							if(Ex_Table.Exchange[index].type==EX_KEY_LIGHT1)
;;;1625   //							{
;;;1626   //										if((tt&0x01)==0x00){if((dat==1)||(dat==2))return;}
;;;1627   //										if((tt&0x02)==0x00){if((dat==3)||(dat==4))return;}
;;;1628   //							}
;;;1629   //							//无线电机
;;;1630   //							else if(Ex_Table.Exchange[index].type==EX_KEY_MOTOR1)
;;;1631   //							{
;;;1632   //										if((tt&0x01)==0x00)return;
;;;1633   //								
;;;1634   //							}
;;;1635   //							//其他无线面板
;;;1636   //							else
;;;1637   //							{
;;;1638   //									if(((tt&0x01)==0x00)&&(dat==1))return;
;;;1639   //									if(((tt&0x02)==0x00)&&(dat==2))return;
;;;1640   //									if(((tt&0x04)==0x00)&&(dat==3))return;
;;;1641   //									if(((tt&0x08)==0x00)&&(dat==4))return;
;;;1642   //							}
;;;1643   							
;;;1644   							if((Ex_Table.Exchange[index].type==EX_KEY_LIGHT1)||(Ex_Table.Exchange[index].type==EX_KEY_MOTOR1))
;;;1645   							{
;;;1646   									if(Pannel.item[0].onoffbuf[0]==0)return;
;;;1647   							}
;;;1648   							//其他无线面板
;;;1649   							else
;;;1650   							{
;;;1651   									if(tt==0)return;
;;;1652   							}
;;;1653   				}
;;;1654   		
;;;1655   				
;;;1656   				ps=GetQueue_InQ(&RS485_Queue,index);
;;;1657   				//缓冲区溢出
;;;1658   				if(ps==NULL)
;;;1659   				{
;;;1660   					return;
;;;1661   				}
;;;1662   				
;;;1663   				ps->buf[0]=0x04;			//帧控制
;;;1664   				ps->buf[1]=(Master_Address>>8)&0x00ff;  //目标地址H
;;;1665   				ps->buf[2]=Master_Address;		//目标地址L
;;;1666   				ps->buf[3]=0x00;	
;;;1667   				ps->buf[4]=Dev.addr[0];
;;;1668   				ps->buf[5]=0x80+index+1;		//通道号
;;;1669   				
;;;1670   
;;;1671   				ps->buf[6]=2;                        	  //数据长度
;;;1672   				ps->buf[7]=cmd+1;													//键值
;;;1673   				ps->buf[8]=dat;												  //模式
;;;1674   
;;;1675   				ps->buf[9]=Crc8CheckSum(ps->buf,9);		//CRC8校验
;;;1676   				ps->cnt=10;					//发送总的字节数
;;;1677   
;;;1678   
;;;1679   				ps->flag=1;
;;;1680   				ps->resend=4;
;;;1681   				ps->rand=0;
;;;1682   				ps->ackwait=30;					//等待应答时间最大300mS
;;;1683   				EnQueueBuf(&RS485_Queue,index);
;;;1684   }
000098  e8bd87f0          POP      {r4-r10,pc}
                  |L20.156|
00009c  ebc601c6          RSB      r1,r6,r6,LSL #3       ;1616
0000a0  483b              LDR      r0,|L20.400|
0000a2  f8100011          LDRB     r0,[r0,r1,LSL #1]     ;1616
0000a6  28f5              CMP      r0,#0xf5              ;1616
0000a8  db3a              BLT      |L20.288|
0000aa  ebc601c6          RSB      r1,r6,r6,LSL #3       ;1616
0000ae  4838              LDR      r0,|L20.400|
0000b0  f8100011          LDRB     r0,[r0,r1,LSL #1]     ;1616
0000b4  28f9              CMP      r0,#0xf9              ;1616
0000b6  dc33              BGT      |L20.288|
0000b8  2c00              CMP      r4,#0                 ;1618
0000ba  dd01              BLE      |L20.192|
0000bc  1e60              SUBS     r0,r4,#1              ;1618
0000be  b2c4              UXTB     r4,r0                 ;1618
                  |L20.192|
0000c0  4620              MOV      r0,r4                 ;1619
0000c2  17e1              ASRS     r1,r4,#31             ;1619
0000c4  eb047151          ADD      r1,r4,r1,LSR #29      ;1619
0000c8  f3c107c7          UBFX     r7,r1,#3,#8           ;1619
0000cc  17e1              ASRS     r1,r4,#31             ;1620
0000ce  eb047151          ADD      r1,r4,r1,LSR #29      ;1620
0000d2  10c9              ASRS     r1,r1,#3              ;1620
0000d4  eba401c1          SUB      r1,r4,r1,LSL #3       ;1620
0000d8  f00108ff          AND      r8,r1,#0xff           ;1620
0000dc  ebc61106          RSB      r1,r6,r6,LSL #4       ;1621
0000e0  482c              LDR      r0,|L20.404|
0000e2  4408              ADD      r0,r0,r1              ;1621
0000e4  3008              ADDS     r0,r0,#8              ;1621
0000e6  5dc0              LDRB     r0,[r0,r7]            ;1621
0000e8  2101              MOVS     r1,#1                 ;1621
0000ea  fa01f108          LSL      r1,r1,r8              ;1621
0000ee  ea000a01          AND      r10,r0,r1             ;1621
0000f2  ebc601c6          RSB      r1,r6,r6,LSL #3       ;1644
0000f6  4826              LDR      r0,|L20.400|
0000f8  f8100011          LDRB     r0,[r0,r1,LSL #1]     ;1644
0000fc  28f7              CMP      r0,#0xf7              ;1644
0000fe  d006              BEQ      |L20.270|
000100  ebc601c6          RSB      r1,r6,r6,LSL #3       ;1644
000104  4822              LDR      r0,|L20.400|
000106  f8100011          LDRB     r0,[r0,r1,LSL #1]     ;1644
00010a  28f6              CMP      r0,#0xf6              ;1644
00010c  d104              BNE      |L20.280|
                  |L20.270|
00010e  4821              LDR      r0,|L20.404|
000110  1e40              SUBS     r0,r0,#1              ;1646
000112  7a40              LDRB     r0,[r0,#9]            ;1646
000114  b920              CBNZ     r0,|L20.288|
000116  e7bf              B        |L20.152|
                  |L20.280|
000118  f1ba0f00          CMP      r10,#0                ;1651
00011c  d100              BNE      |L20.288|
00011e  e7bb              B        |L20.152|
                  |L20.288|
000120  4631              MOV      r1,r6                 ;1656
000122  481d              LDR      r0,|L20.408|
000124  f7fffffe          BL       GetQueue_InQ
000128  4605              MOV      r5,r0                 ;1656
00012a  b905              CBNZ     r5,|L20.302|
00012c  e7b4              B        |L20.152|
                  |L20.302|
00012e  2004              MOVS     r0,#4                 ;1663
000130  7028              STRB     r0,[r5,#0]            ;1663
000132  2000              MOVS     r0,#0                 ;1664
000134  7068              STRB     r0,[r5,#1]            ;1664
000136  70a8              STRB     r0,[r5,#2]            ;1665
000138  70e8              STRB     r0,[r5,#3]            ;1666
00013a  4818              LDR      r0,|L20.412|
00013c  7880              LDRB     r0,[r0,#2]            ;1667  ; Dev
00013e  7128              STRB     r0,[r5,#4]            ;1667
000140  f1060081          ADD      r0,r6,#0x81           ;1668
000144  7168              STRB     r0,[r5,#5]            ;1668
000146  2002              MOVS     r0,#2                 ;1671
000148  71a8              STRB     r0,[r5,#6]            ;1671
00014a  1c60              ADDS     r0,r4,#1              ;1672
00014c  71e8              STRB     r0,[r5,#7]            ;1672
00014e  f8859008          STRB     r9,[r5,#8]            ;1673
000152  2109              MOVS     r1,#9                 ;1675
000154  4628              MOV      r0,r5                 ;1675
000156  f7fffffe          BL       Crc8CheckSum
00015a  f10505ae          ADD      r5,r5,#0xae           ;1675
00015e  f8050ca5          STRB     r0,[r5,#-0xa5]        ;1675
000162  f04f000a          MOV      r0,#0xa               ;1676
000166  76a8              STRB     r0,[r5,#0x1a]         ;1676
000168  f04f0001          MOV      r0,#1                 ;1679
00016c  76e8              STRB     r0,[r5,#0x1b]         ;1679
00016e  f04f0004          MOV      r0,#4                 ;1680
000172  7728              STRB     r0,[r5,#0x1c]         ;1680
000174  f04f0000          MOV      r0,#0                 ;1681
000178  77a8              STRB     r0,[r5,#0x1e]         ;1681
00017a  f04f001e          MOV      r0,#0x1e              ;1682
00017e  77e8              STRB     r0,[r5,#0x1f]         ;1682
000180  f1a505ae          SUB      r5,r5,#0xae           ;1682
000184  4631              MOV      r1,r6                 ;1683
000186  4804              LDR      r0,|L20.408|
000188  f7fffffe          BL       EnQueueBuf
00018c  bf00              NOP      
00018e  e783              B        |L20.152|
;;;1685   
                          ENDP

                  |L20.400|
                          DCD      Ex_Table+0x36
                  |L20.404|
                          DCD      Pannel+0x1
                  |L20.408|
                          DCD      RS485_Queue
                  |L20.412|
                          DCD      ||Dev||

                          AREA ||i.IT1_Key_Handle||, CODE, READONLY, ALIGN=1

                  IT1_Key_Handle PROC
;;;100    //按键处理
;;;101    void IT1_Key_Handle(void)
000000  4770              BX       lr
;;;102    {
;;;103    //	#if 0
;;;104    //      uint8_t ucKeyCode;
;;;105    //	    uint8_t index,key_value;//,i;
;;;106    //	
;;;107    //	    if(Dev.power_time<5)return; 
;;;108    //	
;;;109    //		ucKeyCode = bsp_GetKey();	/* 读取键值, 无键按下时返回 KEY_NONE = 0 */
;;;110    
;;;111    //    if (ucKeyCode != KEY_NONE)
;;;112    //		{
;;;113    //			//================================================================================
;;;114    //			index=(ucKeyCode-1)/3;							//按键通道0~7					
;;;115    //			key_value=(ucKeyCode-1)%3;					//按键值0-压下，1-弹起，2-长按	
;;;116    //			//非设置状态
;;;117    //			if(Dev.stu<=DEV_NORMAL)
;;;118    //			{			
;;;119    //						//==========================================================================
;;;120    //				    //面板按键
;;;121    //						if(index<KEY_NUM)
;;;122    //						{
;;;123    //								//非长按键弹起,需要判断单击或双击
;;;124    //								if((key_value==1)&&(Pannel[index].key_old!=2))
;;;125    //								{
;;;126    //									  Pannel[index].key_old=key_value;
;;;127    //									  //Pannel[index].key_times=50;
;;;128    //									  //Pannel[index].key_cnt++;
;;;129    //                    IT1_RS485_DataLoad(index,S_CLICK,0);
;;;130    //								}
;;;131    //								//长按键，查表判断是否有数据要发送
;;;132    //								else if(key_value==2)
;;;133    //								{
;;;134    //									  //Pannel[index].key_cnt=0;
;;;135    //									  //Pannel[index].key_times=0;
;;;136    //									  Pannel[index].key_old=key_value;
;;;137    //									  IT1_RS485_DataLoad(index,L_KEYDOWN,0);
;;;138    //								}
;;;139    //								//长按键弹起，查表判断是否有数据发送
;;;140    //								else if((key_value==1)&&(Pannel[index].key_old==2))
;;;141    //								{
;;;142    //									  //Pannel[index].key_cnt=0;
;;;143    //									  //Pannel[index].key_times=0;
;;;144    //									  Pannel[index].key_old=key_value;
;;;145    //									  IT1_RS485_DataLoad(index,L_KEYUP,0);
;;;146    //								}
;;;147    //									
;;;148    //								//短按键按下和其他情况
;;;149    //								else 
;;;150    //								{
;;;151    //									  Pannel[index].key_old=key_value;
;;;152    //									
;;;153    //									  Led_Disp(10,5);
;;;154    //								}	
;;;155    //						}
;;;156    //						//以下为设置按键处理
;;;157    //		        else
;;;158    //						{
;;;159    //								if((ucKeyCode==KEY_SETUP_LONG)&&(Dev.stu==DEV_NORMAL))
;;;160    //								{
;;;161    //											Dev.stu=DEV_SETUP;				//进入设置键
;;;162    //									    Dev.encode_time=8;
;;;163    //									    encode_index=0;
;;;164    //									    Led_Disp(50,1);
;;;165    //								}
;;;166    //						}
;;;167    //			 }
;;;168    //			 //==============================================================================
;;;169    //			 //设置状态
;;;170    //			 else
;;;171    //			 {
;;;172    //						LedMode_SetForKey(index,key_value);
;;;173    //		   }
;;;174    //		 }
;;;175    //	#endif
;;;176    }
;;;177    
                          ENDP


                          AREA ||i.IT1_Learn54Key||, CODE, READONLY, ALIGN=2

                  IT1_Learn54Key PROC
;;;3132   //进入学习54键遥控器
;;;3133   void IT1_Learn54Key(void)
000000  b508              PUSH     {r3,lr}
;;;3134   {
;;;3135   				Dev.stu=DEV_SETUP;
000002  2003              MOVS     r0,#3
000004  490c              LDR      r1,|L22.56|
000006  7188              STRB     r0,[r1,#6]
;;;3136   				Dev.learn_time=LEARN_TIME_MAX;
000008  200a              MOVS     r0,#0xa
00000a  72c8              STRB     r0,[r1,#0xb]
;;;3137   				Dev.encode_time=0;
00000c  2000              MOVS     r0,#0
00000e  7308              STRB     r0,[r1,#0xc]
;;;3138   
;;;3139   				//不要求无线发送，只等待遥控器发送
;;;3140   				Exchangebuf.type= EX_KEY_54KEY;                                    //设备类型
000010  20fa              MOVS     r0,#0xfa
000012  490a              LDR      r1,|L22.60|
000014  7008              STRB     r0,[r1,#0]
;;;3141   				Exchangebuf.addr= 0;;
000016  2000              MOVS     r0,#0
000018  7048              STRB     r0,[r1,#1]
;;;3142   				Exchangebuf.channel=0;
00001a  7188              STRB     r0,[r1,#6]
;;;3143   				Exchangebuf.wl_addr[0]=	0;				                  			//等待接收遥控器的地址
00001c  70c8              STRB     r0,[r1,#3]
;;;3144   				Exchangebuf.wl_addr[1]= 0;  		                      		//
00001e  2100              MOVS     r1,#0
000020  4806              LDR      r0,|L22.60|
000022  7101              STRB     r1,[r0,#4]
;;;3145   				Exchangebuf.wl_addr[2]= 0;  
000024  7141              STRB     r1,[r0,#5]
;;;3146   
;;;3147   				Led_set(1,0xff,1,0xff,2);	
000026  2002              MOVS     r0,#2
000028  23ff              MOVS     r3,#0xff
00002a  2201              MOVS     r2,#1
00002c  4619              MOV      r1,r3
00002e  9000              STR      r0,[sp,#0]
000030  4610              MOV      r0,r2
000032  f7fffffe          BL       Led_set
;;;3148   }
000036  bd08              POP      {r3,pc}
;;;3149   //================================================================================================
                          ENDP

                  |L22.56|
                          DCD      ||Dev||
                  |L22.60|
                          DCD      Exchangebuf

                          AREA ||i.IT1_LearnLock||, CODE, READONLY, ALIGN=2

                  IT1_LearnLock PROC
;;;3150   //进入学习锁
;;;3151   void IT1_LearnLock(void)
000000  b508              PUSH     {r3,lr}
;;;3152   {
;;;3153   				//uint8_t i;
;;;3154   				Dev.stu=DEV_SETUP;
000002  2003              MOVS     r0,#3
000004  4908              LDR      r1,|L23.40|
000006  7188              STRB     r0,[r1,#6]
;;;3155   				Dev.learn_time=LEARN_TIME_MAX;
000008  200a              MOVS     r0,#0xa
00000a  72c8              STRB     r0,[r1,#0xb]
;;;3156   				Dev.encode_time=0;
00000c  2000              MOVS     r0,#0
00000e  7308              STRB     r0,[r1,#0xc]
;;;3157   
;;;3158   				//不要求无线发送，只等待遥控器发送
;;;3159   
;;;3160   				lock.index=0;
000010  4906              LDR      r1,|L23.44|
000012  7008              STRB     r0,[r1,#0]
;;;3161   	
;;;3162   				Led_set(1,0xff,1,0xff,2);	
000014  2002              MOVS     r0,#2
000016  23ff              MOVS     r3,#0xff
000018  2201              MOVS     r2,#1
00001a  4619              MOV      r1,r3
00001c  9000              STR      r0,[sp,#0]
00001e  4610              MOV      r0,r2
000020  f7fffffe          BL       Led_set
;;;3163   }
000024  bd08              POP      {r3,pc}
;;;3164   
                          ENDP

000026  0000              DCW      0x0000
                  |L23.40|
                          DCD      ||Dev||
                  |L23.44|
                          DCD      lock

                          AREA ||i.IT1_LoadInfo_Report||, CODE, READONLY, ALIGN=2

                  IT1_LoadInfo_Report PROC
;;;2664   //装入上报信息
;;;2665   void IT1_LoadInfo_Report(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2666   {
;;;2667   	uint8_t i;
;;;2668   	_Frame *ps;
;;;2669   	
;;;2670   	ps=GetQueue_InQ(&RS485_Queue,8);
000002  2108              MOVS     r1,#8
000004  4831              LDR      r0,|L24.204|
000006  f7fffffe          BL       GetQueue_InQ
00000a  4604              MOV      r4,r0
;;;2671   	if(ps==NULL)
00000c  b904              CBNZ     r4,|L24.16|
                  |L24.14|
;;;2672   	{
;;;2673   		return;
;;;2674   	}
;;;2675   	
;;;2676   	ps->buf[0]=0x20;							//???
;;;2677   	ps->buf[1]=0x00;  						//????H
;;;2678   	ps->buf[2]=0x00;							//????L
;;;2679   	ps->buf[3]=0x00;	
;;;2680   	ps->buf[4]=Dev.addr[0];
;;;2681   	
;;;2682   	ps->buf[5]=0x10;							//???
;;;2683   	ps->buf[6]=DEV_INFO_NUM+1;
;;;2684   	ps->buf[7]=0x00;
;;;2685   	if((Dev.type&0xff00)==0x3200)
;;;2686   	{
;;;2687   				for(i=0;i<DEV_INFO_NUM;i++)ps->buf[8+i]=DEV_INFO[i];
;;;2688   	}
;;;2689   	else if((Dev.type&0xf000)==0xb000)
;;;2690   	{
;;;2691   				for(i=0;i<DEV_INFO_NUM;i++)ps->buf[8+i]=DEV_INFO_1[i];
;;;2692   	}
;;;2693   	else
;;;2694   	{
;;;2695   		    for(i=0;i<DEV_INFO_NUM;i++)ps->buf[8+i]=DEV_INFO_2[i];
;;;2696   	}
;;;2697   	ps->buf[8+DEV_INFO_NUM]=Crc8CheckSum(ps->buf,8+DEV_INFO_NUM);		//CRC8??
;;;2698   	ps->cnt=9+DEV_INFO_NUM;					                 //???????
;;;2699   	
;;;2700   	ps->flag=1;
;;;2701   	ps->resend=4;
;;;2702   	//ps->rand=100;
;;;2703   	ps->ackwait=30;					//
;;;2704   	EnQueueBuf(&RS485_Queue,8);
;;;2705   }
00000e  bd70              POP      {r4-r6,pc}
                  |L24.16|
000010  2020              MOVS     r0,#0x20              ;2676
000012  7020              STRB     r0,[r4,#0]            ;2676
000014  2000              MOVS     r0,#0                 ;2677
000016  7060              STRB     r0,[r4,#1]            ;2677
000018  70a0              STRB     r0,[r4,#2]            ;2678
00001a  70e0              STRB     r0,[r4,#3]            ;2679
00001c  482c              LDR      r0,|L24.208|
00001e  7880              LDRB     r0,[r0,#2]            ;2680  ; Dev
000020  7120              STRB     r0,[r4,#4]            ;2680
000022  2010              MOVS     r0,#0x10              ;2682
000024  7160              STRB     r0,[r4,#5]            ;2682
000026  2016              MOVS     r0,#0x16              ;2683
000028  71a0              STRB     r0,[r4,#6]            ;2683
00002a  2000              MOVS     r0,#0                 ;2684
00002c  71e0              STRB     r0,[r4,#7]            ;2684
00002e  4828              LDR      r0,|L24.208|
000030  8880              LDRH     r0,[r0,#4]            ;2685  ; Dev
000032  f400407f          AND      r0,r0,#0xff00         ;2685
000036  f5b05f48          CMP      r0,#0x3200            ;2685
00003a  d10b              BNE      |L24.84|
00003c  2500              MOVS     r5,#0                 ;2687
00003e  e006              B        |L24.78|
                  |L24.64|
000040  4824              LDR      r0,|L24.212|
000042  5d41              LDRB     r1,[r0,r5]            ;2687
000044  f1050008          ADD      r0,r5,#8              ;2687
000048  5421              STRB     r1,[r4,r0]            ;2687
00004a  1c68              ADDS     r0,r5,#1              ;2687
00004c  b2c5              UXTB     r5,r0                 ;2687
                  |L24.78|
00004e  2d15              CMP      r5,#0x15              ;2687
000050  dbf6              BLT      |L24.64|
000052  e01d              B        |L24.144|
                  |L24.84|
000054  481e              LDR      r0,|L24.208|
000056  8880              LDRH     r0,[r0,#4]            ;2689  ; Dev
000058  f4004070          AND      r0,r0,#0xf000         ;2689
00005c  f5b04f30          CMP      r0,#0xb000            ;2689
000060  d10b              BNE      |L24.122|
000062  2500              MOVS     r5,#0                 ;2691
000064  e006              B        |L24.116|
                  |L24.102|
000066  481c              LDR      r0,|L24.216|
000068  5d41              LDRB     r1,[r0,r5]            ;2691
00006a  f1050008          ADD      r0,r5,#8              ;2691
00006e  5421              STRB     r1,[r4,r0]            ;2691
000070  1c68              ADDS     r0,r5,#1              ;2691
000072  b2c5              UXTB     r5,r0                 ;2691
                  |L24.116|
000074  2d15              CMP      r5,#0x15              ;2691
000076  dbf6              BLT      |L24.102|
000078  e00a              B        |L24.144|
                  |L24.122|
00007a  2500              MOVS     r5,#0                 ;2695
00007c  e006              B        |L24.140|
                  |L24.126|
00007e  4817              LDR      r0,|L24.220|
000080  5d41              LDRB     r1,[r0,r5]            ;2695
000082  f1050008          ADD      r0,r5,#8              ;2695
000086  5421              STRB     r1,[r4,r0]            ;2695
000088  1c68              ADDS     r0,r5,#1              ;2695
00008a  b2c5              UXTB     r5,r0                 ;2695
                  |L24.140|
00008c  2d15              CMP      r5,#0x15              ;2695
00008e  dbf6              BLT      |L24.126|
                  |L24.144|
000090  211d              MOVS     r1,#0x1d              ;2697
000092  4620              MOV      r0,r4                 ;2697
000094  f7fffffe          BL       Crc8CheckSum
000098  f10404ae          ADD      r4,r4,#0xae           ;2697
00009c  f8040c91          STRB     r0,[r4,#-0x91]        ;2697
0000a0  f04f001e          MOV      r0,#0x1e              ;2698
0000a4  76a0              STRB     r0,[r4,#0x1a]         ;2698
0000a6  f04f0001          MOV      r0,#1                 ;2700
0000aa  76e0              STRB     r0,[r4,#0x1b]         ;2700
0000ac  f04f0004          MOV      r0,#4                 ;2701
0000b0  7720              STRB     r0,[r4,#0x1c]         ;2701
0000b2  f04f001e          MOV      r0,#0x1e              ;2703
0000b6  77e0              STRB     r0,[r4,#0x1f]         ;2703
0000b8  f1a404ae          SUB      r4,r4,#0xae           ;2703
0000bc  f04f0108          MOV      r1,#8                 ;2704
0000c0  4802              LDR      r0,|L24.204|
0000c2  f7fffffe          BL       EnQueueBuf
0000c6  bf00              NOP      
0000c8  e7a1              B        |L24.14|
;;;2706   //============================================================================================================
                          ENDP

0000ca  0000              DCW      0x0000
                  |L24.204|
                          DCD      RS485_Queue
                  |L24.208|
                          DCD      ||Dev||
                  |L24.212|
                          DCD      DEV_INFO
                  |L24.216|
                          DCD      DEV_INFO_1
                  |L24.220|
                          DCD      DEV_INFO_2

                          AREA ||i.IT1_Load_RS485_Ack||, CODE, READONLY, ALIGN=2

                  IT1_Load_RS485_Ack PROC
;;;1517   //RS485命令应答
;;;1518   void IT1_Load_RS485_Ack(unsigned char st)
000000  b510              PUSH     {r4,lr}
;;;1519   {
000002  4604              MOV      r4,r0
;;;1520   
;;;1521   	TxDat.buf[0]=0x03;														//帧控制-应答报文
000004  2003              MOVS     r0,#3
000006  491c              LDR      r1,|L25.120|
000008  70c8              STRB     r0,[r1,#3]
;;;1522   	TxDat.buf[1]=(Master_Address>>8)&0x00ff;			//目标地址H
00000a  2100              MOVS     r1,#0
00000c  481a              LDR      r0,|L25.120|
00000e  7101              STRB     r1,[r0,#4]
;;;1523   	TxDat.buf[2]=Master_Address;									//目标地址L
000010  7141              STRB     r1,[r0,#5]
;;;1524   
;;;1525     TxDat.buf[3]=0X00;														//帧序列号
000012  7181              STRB     r1,[r0,#6]
;;;1526   
;;;1527   	TxDat.buf[4]=RxDat.buf[2];										//网络ID
000014  4819              LDR      r0,|L25.124|
000016  7901              LDRB     r1,[r0,#4]
000018  4817              LDR      r0,|L25.120|
00001a  71c1              STRB     r1,[r0,#7]
;;;1528   	
;;;1529   			if((st==OPT_OK)||(st==RE_OK))							//错误应答
00001c  2cfb              CMP      r4,#0xfb
00001e  d001              BEQ      |L25.36|
000020  2cfe              CMP      r4,#0xfe
000022  d10f              BNE      |L25.68|
                  |L25.36|
;;;1530   			{
;;;1531   					TxDat.buf[5]=0x20;		
000024  2120              MOVS     r1,#0x20
000026  4814              LDR      r0,|L25.120|
000028  7201              STRB     r1,[r0,#8]
;;;1532   					TxDat.buf[6]=0x00;														//数据个数
00002a  2100              MOVS     r1,#0
00002c  7241              STRB     r1,[r0,#9]
;;;1533   					TxDat.buf[7]=Crc8CheckSum(TxDat.buf,7);				//CRC8校验
00002e  2107              MOVS     r1,#7
000030  1cc0              ADDS     r0,r0,#3
000032  f7fffffe          BL       Crc8CheckSum
000036  4910              LDR      r1,|L25.120|
000038  7288              STRB     r0,[r1,#0xa]
;;;1534   					TxDat.cnt=8;																	//发送总的字节数
00003a  2008              MOVS     r0,#8
00003c  7008              STRB     r0,[r1,#0]
;;;1535   					TxDat.f_tx=1;		
00003e  2001              MOVS     r0,#1
000040  7088              STRB     r0,[r1,#2]
000042  e017              B        |L25.116|
                  |L25.68|
;;;1536   			}
;;;1537   			else								//正常应答
;;;1538   			{
;;;1539   				TxDat.buf[5]=0x20;						//网络控制命令
000044  2120              MOVS     r1,#0x20
000046  480c              LDR      r0,|L25.120|
000048  7201              STRB     r1,[r0,#8]
;;;1540   				TxDat.buf[6]=0x01;	
00004a  2101              MOVS     r1,#1
00004c  7241              STRB     r1,[r0,#9]
;;;1541   				if(st==OPT_ERR_SETUP)TxDat.buf[7]=0xf3;	
00004e  2cf9              CMP      r4,#0xf9
000050  d102              BNE      |L25.88|
000052  21f3              MOVS     r1,#0xf3
000054  7281              STRB     r1,[r0,#0xa]
000056  e002              B        |L25.94|
                  |L25.88|
;;;1542   				else                 TxDat.buf[7]=0xf1;	
000058  21f1              MOVS     r1,#0xf1
00005a  4807              LDR      r0,|L25.120|
00005c  7281              STRB     r1,[r0,#0xa]
                  |L25.94|
;;;1543   				TxDat.buf[8]=Crc8CheckSum(TxDat.buf,8);				//CRC8校验
00005e  2108              MOVS     r1,#8
000060  4805              LDR      r0,|L25.120|
000062  1cc0              ADDS     r0,r0,#3
000064  f7fffffe          BL       Crc8CheckSum
000068  4903              LDR      r1,|L25.120|
00006a  72c8              STRB     r0,[r1,#0xb]
;;;1544   				TxDat.cnt=9;																	//发送总的字节数
00006c  2009              MOVS     r0,#9
00006e  7008              STRB     r0,[r1,#0]
;;;1545   				TxDat.f_tx=1;					
000070  2001              MOVS     r0,#1
000072  7088              STRB     r0,[r1,#2]
                  |L25.116|
;;;1546   			}
;;;1547   }
000074  bd10              POP      {r4,pc}
;;;1548   
                          ENDP

000076  0000              DCW      0x0000
                  |L25.120|
                          DCD      TxDat
                  |L25.124|
                          DCD      RxDat

                          AREA ||i.IT1_Load_RS485_InfoReport||, CODE, READONLY, ALIGN=2

                  IT1_Load_RS485_InfoReport PROC
;;;1552   //从机:0x06 + 0x0000 + 0xXX + Addr + 0xXX（设备总数）+ 数据长度+ 数据 + CRC
;;;1553   void IT1_Load_RS485_InfoReport(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1554   {
;;;1555   		_Frame *ps;
;;;1556   	  uint8_t i;	
;;;1557   	  uint8_t *p;
;;;1558   	
;;;1559   		ps=GetQueue_InQ(&RS485_Queue,8);
000002  2108              MOVS     r1,#8
000004  481c              LDR      r0,|L26.120|
000006  f7fffffe          BL       GetQueue_InQ
00000a  4604              MOV      r4,r0
;;;1560   		//缓冲区溢出
;;;1561   		if(ps==NULL)
00000c  b904              CBNZ     r4,|L26.16|
                  |L26.14|
;;;1562   		{
;;;1563   			return;
;;;1564   		}
;;;1565   		
;;;1566   		ps->buf[0]=0x06;			//帧控制
;;;1567   		ps->buf[1]=(Master_Address>>8)&0x00ff;  //目标地址H
;;;1568   		ps->buf[2]=Master_Address;		//目标地址L
;;;1569   		ps->buf[3]=0x00;	
;;;1570   		ps->buf[4]=Dev.addr[0];
;;;1571   		ps->buf[5]=0x88;		//通道号
;;;1572   		ps->buf[6]=0x08;						//数据长度
;;;1573   		
;;;1574   		//2016.5.12修改
;;;1575   		//for(i=0;i<8;i++)ps->buf[7+i]=(uint8_t)(IT_INFO[i]);								//产品信息
;;;1576   		p=(uint8_t*)0x0800fc00;
;;;1577   		for(i=0;i<8;i++)
;;;1578   		{
;;;1579   				ps->buf[7+i]=p[i];
;;;1580   		}
;;;1581   		
;;;1582   		ps->buf[15]=Crc8CheckSum(ps->buf,15);		//CRC8校验
;;;1583   		ps->cnt=16;					                 //发送总的字节数
;;;1584   		
;;;1585   		ps->flag=1;
;;;1586   		ps->resend=4;
;;;1587   		//ps->rand=100;
;;;1588   		ps->ackwait=30;					//等待应答时间最大300mS
;;;1589   		EnQueueBuf(&RS485_Queue,8);
;;;1590   }
00000e  bd70              POP      {r4-r6,pc}
                  |L26.16|
000010  2006              MOVS     r0,#6                 ;1566
000012  7020              STRB     r0,[r4,#0]            ;1566
000014  2000              MOVS     r0,#0                 ;1567
000016  7060              STRB     r0,[r4,#1]            ;1567
000018  70a0              STRB     r0,[r4,#2]            ;1568
00001a  70e0              STRB     r0,[r4,#3]            ;1569
00001c  4817              LDR      r0,|L26.124|
00001e  7880              LDRB     r0,[r0,#2]            ;1570  ; Dev
000020  7120              STRB     r0,[r4,#4]            ;1570
000022  2088              MOVS     r0,#0x88              ;1571
000024  7160              STRB     r0,[r4,#5]            ;1571
000026  2008              MOVS     r0,#8                 ;1572
000028  71a0              STRB     r0,[r4,#6]            ;1572
00002a  4e15              LDR      r6,|L26.128|
00002c  2500              MOVS     r5,#0                 ;1577
00002e  e004              B        |L26.58|
                  |L26.48|
000030  5d71              LDRB     r1,[r6,r5]            ;1579
000032  1de8              ADDS     r0,r5,#7              ;1579
000034  5421              STRB     r1,[r4,r0]            ;1579
000036  1c68              ADDS     r0,r5,#1              ;1577
000038  b2c5              UXTB     r5,r0                 ;1577
                  |L26.58|
00003a  2d08              CMP      r5,#8                 ;1577
00003c  dbf8              BLT      |L26.48|
00003e  210f              MOVS     r1,#0xf               ;1582
000040  4620              MOV      r0,r4                 ;1582
000042  f7fffffe          BL       Crc8CheckSum
000046  f10404ae          ADD      r4,r4,#0xae           ;1582
00004a  f8040c9f          STRB     r0,[r4,#-0x9f]        ;1582
00004e  f04f0010          MOV      r0,#0x10              ;1583
000052  76a0              STRB     r0,[r4,#0x1a]         ;1583
000054  f04f0001          MOV      r0,#1                 ;1585
000058  76e0              STRB     r0,[r4,#0x1b]         ;1585
00005a  f04f0004          MOV      r0,#4                 ;1586
00005e  7720              STRB     r0,[r4,#0x1c]         ;1586
000060  f04f001e          MOV      r0,#0x1e              ;1588
000064  77e0              STRB     r0,[r4,#0x1f]         ;1588
000066  f1a404ae          SUB      r4,r4,#0xae           ;1588
00006a  f04f0108          MOV      r1,#8                 ;1589
00006e  4802              LDR      r0,|L26.120|
000070  f7fffffe          BL       EnQueueBuf
000074  bf00              NOP      
000076  e7ca              B        |L26.14|
;;;1591   
                          ENDP

                  |L26.120|
                          DCD      RS485_Queue
                  |L26.124|
                          DCD      ||Dev||
                  |L26.128|
                          DCD      0x0800fc00

                          AREA ||i.IT1_Lock_DataLoad||, CODE, READONLY, ALIGN=2

                  IT1_Lock_DataLoad PROC
;;;1799   //分为状态上报和报警功能上报
;;;1800   void IT1_Lock_DataLoad(uint8_t index,uint8_t type,uint8_t dat)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1801   {
000004  4680              MOV      r8,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;1802   
;;;1803   				_Frame *ps;
;;;1804   				uint8_t i;
;;;1805   				//=====================================================================================================
;;;1806   				
;;;1807   				ps=GetQueue_InQ(&RS485_Queue,index);
00000a  4641              MOV      r1,r8
00000c  4873              LDR      r0,|L27.476|
00000e  f7fffffe          BL       GetQueue_InQ
000012  4604              MOV      r4,r0
;;;1808   				//缓冲区溢出
;;;1809   				if(ps==NULL){return;}
000014  b90c              CBNZ     r4,|L27.26|
                  |L27.22|
;;;1810   				
;;;1811   				//锁触发命令
;;;1812   				if(type==0x00)
;;;1813   				{
;;;1814   //						ps->buf[0]=0x24;			//帧控制
;;;1815   //						ps->buf[1]=(Master_Address>>8)&0x00ff;  //目标地址H
;;;1816   //						ps->buf[2]=Master_Address;		//目标地址L
;;;1817   //						ps->buf[3]=0x00;	
;;;1818   //						ps->buf[4]=Dev.addr[0];
;;;1819   //						ps->buf[5]=index;		//通道号	
;;;1820   //						ps->buf[6]=9;                        	  //数据长度
;;;1821   //						ps->buf[7]=dat;												  //键值
;;;1822   //						for(i=0;i<8;i++)ps->buf[8+i]=lock.randkey[i];												//模式，这里默认为单击
;;;1823   //						ps->buf[16]=Crc8CheckSum(ps->buf,16);		//CRC8校验
;;;1824   //						ps->cnt=17;					//发送总的字节数
;;;1825   //						lock.report=1;
;;;1826   					
;;;1827   						ps->buf[0]=0x24;			//帧控制
;;;1828   						ps->buf[1]=(Master_Address>>8)&0x00ff;  //目标地址H
;;;1829   						ps->buf[2]=Master_Address;		//目标地址L
;;;1830   						ps->buf[3]=0x00;	
;;;1831   						ps->buf[4]=Dev.addr[0];
;;;1832   						ps->buf[5]=0x10+index;		//通道号	
;;;1833   						ps->buf[6]=0x03;                        	  //数据长度
;;;1834   					  ps->buf[7]=0x01; 
;;;1835   						ps->buf[8]=0x00; 
;;;1836   						ps->buf[9]=dat;												  //键值
;;;1837   						ps->buf[10]=Crc8CheckSum(ps->buf,10);		//CRC8校验
;;;1838   						ps->cnt=11;					//发送总的字节数
;;;1839   						lock.report=1;
;;;1840   				}
;;;1841   				//锁状态上报
;;;1842   				else if(type==0x01)
;;;1843   				{			
;;;1844   						ps->buf[0]=0x04;			//帧控制
;;;1845   						ps->buf[1]=(Master_Address>>8)&0x00ff;  //目标地址H
;;;1846   						ps->buf[2]=Master_Address;		//目标地址L
;;;1847   						ps->buf[3]=0x00;	
;;;1848   						ps->buf[4]=Dev.addr[0];
;;;1849   						ps->buf[5]=index;		//通道号	
;;;1850   						ps->buf[6]=9;                        	  //数据长度
;;;1851   						ps->buf[7]=dat;												  //键值
;;;1852   						for(i=0;i<8;i++)ps->buf[8+i]=lock.randkey[i];												//模式，这里默认为单击
;;;1853   						ps->buf[16]=Crc8CheckSum(ps->buf,16);		//CRC8校验
;;;1854   						ps->cnt=17;					//发送总的字节数
;;;1855   					  lock.report=1;
;;;1856   					
;;;1857   					  if((dat&0x01)==0x00){/*Dev.mode&=0xfe;*/LockItem.stu&=0xfe;}						//20180326 add tail
;;;1858   					  else                {/*Dev.mode|=0x01;;*/LockItem.stu|=0x01;}
;;;1859   				}
;;;1860   				//添加指纹或删除指纹
;;;1861   				else if(type==0x02)
;;;1862   				{
;;;1863   						ps->buf[0]=0x05;			//帧控制
;;;1864   						ps->buf[1]=(Master_Address>>8)&0x00ff;  //目标地址H
;;;1865   						ps->buf[2]=Master_Address;		//目标地址L
;;;1866   						ps->buf[3]=0x00;	
;;;1867   						ps->buf[4]=Dev.addr[0];
;;;1868   						ps->buf[5]=index;		//通道号
;;;1869   						if(dat==0xbb)
;;;1870   						{
;;;1871   									ps->buf[6]=3;                        	  //数据长度
;;;1872   									ps->buf[7]=dat;												  //键值
;;;1873   									ps->buf[8]=0x8e;
;;;1874   							    ps->buf[9]=0x00;
;;;1875   									ps->buf[10]=Crc8CheckSum(ps->buf,10);		//CRC8校验
;;;1876   									ps->cnt=11;					//发送总的字节数
;;;1877   									lock.report=1;
;;;1878   						}
;;;1879   						else
;;;1880   						{
;;;1881   									ps->buf[6]=1;                        	  //数据长度
;;;1882   									ps->buf[7]=dat;												  //键值
;;;1883   									ps->buf[8]=Crc8CheckSum(ps->buf,8);		//CRC8校验
;;;1884   									ps->cnt=9;					//发送总的字节数
;;;1885   									lock.report=1;
;;;1886   						}
;;;1887   				}
;;;1888   				//锁推送指令
;;;1889   				if(type==0x03)
;;;1890   				{
;;;1891   
;;;1892   #if 0				//不验证密码发送				
;;;1893   						ps->buf[0]=0x25;			//帧控制
;;;1894   						ps->buf[1]=(Master_Address>>8)&0x00ff;  //目标地址H
;;;1895   						ps->buf[2]=Master_Address;		//目标地址L
;;;1896   						ps->buf[3]=0x00;	
;;;1897   						ps->buf[4]=Dev.addr[0];
;;;1898   						ps->buf[5]=0x10;//index;		//通道号	
;;;1899   						ps->buf[6]=0x01;                        	  //数据长度
;;;1900   						ps->buf[7]=dat;												  //键值
;;;1901   						ps->buf[8]=Crc8CheckSum(ps->buf,8);		//CRC8校验
;;;1902   						ps->cnt=9;					//发送总的字节数
;;;1903   						lock.report=1;
;;;1904   #else       //验证密码发送
;;;1905   						ps->buf[0]=0x25;			//帧控制
;;;1906   						ps->buf[1]=(Master_Address>>8)&0x00ff;  //目标地址H
;;;1907   						ps->buf[2]=Master_Address;		//目标地址L
;;;1908   						ps->buf[3]=0x00;	
;;;1909   						ps->buf[4]=Dev.addr[0];
;;;1910   						ps->buf[5]=0x10;		//通道号	
;;;1911   						ps->buf[6]=9;                        	  //数据长度
;;;1912   						ps->buf[7]=dat;												  //键值
;;;1913   						for(i=0;i<8;i++)ps->buf[8+i]=lock.randkey[i];												//模式，这里默认为单击
;;;1914   						ps->buf[16]=Crc8CheckSum(ps->buf,16);		//CRC8校验
;;;1915   						ps->cnt=17;					//发送总的字节数
;;;1916   						lock.report=1;
;;;1917   
;;;1918   #endif
;;;1919   				}
;;;1920   				else if(type==0x04)
;;;1921   				{
;;;1922   					
;;;1923   						ps->buf[0] =0x04;											//帧控制,从设备请求命令
;;;1924   						ps->buf[1] =0x00;
;;;1925   						ps->buf[2] =0x00;
;;;1926   						ps->buf[3] =Dev.serial++;							//帧序列号
;;;1927   						ps->buf[4] =Dev.addr[0];							//网络ID
;;;1928   						ps->buf[5] =0x10+index;											//设备总通道和当前通道
;;;1929   						ps->buf[6] =01;						      			//数据长度
;;;1930   				    ps->buf[7]=dat;	
;;;1931   						ps->buf[8]=Crc8CheckSum(ps->buf,8);		//CRC8校验
;;;1932   						ps->cnt=9;					                 	//发送总的字节数  
;;;1933   				}
;;;1934   				ps->flag=1;
;;;1935   				ps->resend=4;
;;;1936   				ps->rand=0;
;;;1937   				ps->ackwait=30;					//等待应答时间最大300mS
;;;1938   				EnQueueBuf(&RS485_Queue,index);
;;;1939   }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L27.26|
00001a  b9f7              CBNZ     r7,|L27.90|
00001c  2024              MOVS     r0,#0x24              ;1827
00001e  7020              STRB     r0,[r4,#0]            ;1827
000020  2000              MOVS     r0,#0                 ;1828
000022  7060              STRB     r0,[r4,#1]            ;1828
000024  70a0              STRB     r0,[r4,#2]            ;1829
000026  70e0              STRB     r0,[r4,#3]            ;1830
000028  486d              LDR      r0,|L27.480|
00002a  7880              LDRB     r0,[r0,#2]            ;1831  ; Dev
00002c  7120              STRB     r0,[r4,#4]            ;1831
00002e  f1080010          ADD      r0,r8,#0x10           ;1832
000032  7160              STRB     r0,[r4,#5]            ;1832
000034  2003              MOVS     r0,#3                 ;1833
000036  71a0              STRB     r0,[r4,#6]            ;1833
000038  2001              MOVS     r0,#1                 ;1834
00003a  71e0              STRB     r0,[r4,#7]            ;1834
00003c  2000              MOVS     r0,#0                 ;1835
00003e  7220              STRB     r0,[r4,#8]            ;1835
000040  7265              STRB     r5,[r4,#9]            ;1836
000042  210a              MOVS     r1,#0xa               ;1837
000044  4620              MOV      r0,r4                 ;1837
000046  f7fffffe          BL       Crc8CheckSum
00004a  72a0              STRB     r0,[r4,#0xa]          ;1837
00004c  200b              MOVS     r0,#0xb               ;1838
00004e  f88400c8          STRB     r0,[r4,#0xc8]         ;1838
000052  2001              MOVS     r0,#1                 ;1839
000054  4963              LDR      r1,|L27.484|
000056  7048              STRB     r0,[r1,#1]            ;1839
000058  e067              B        |L27.298|
                  |L27.90|
00005a  2f01              CMP      r7,#1                 ;1842
00005c  d135              BNE      |L27.202|
00005e  2004              MOVS     r0,#4                 ;1844
000060  7020              STRB     r0,[r4,#0]            ;1844
000062  2000              MOVS     r0,#0                 ;1845
000064  7060              STRB     r0,[r4,#1]            ;1845
000066  70a0              STRB     r0,[r4,#2]            ;1846
000068  70e0              STRB     r0,[r4,#3]            ;1847
00006a  485d              LDR      r0,|L27.480|
00006c  7880              LDRB     r0,[r0,#2]            ;1848  ; Dev
00006e  7120              STRB     r0,[r4,#4]            ;1848
000070  f8848005          STRB     r8,[r4,#5]            ;1849
000074  2009              MOVS     r0,#9                 ;1850
000076  71a0              STRB     r0,[r4,#6]            ;1850
000078  71e5              STRB     r5,[r4,#7]            ;1851
00007a  2600              MOVS     r6,#0                 ;1852
00007c  e007              B        |L27.142|
                  |L27.126|
00007e  4859              LDR      r0,|L27.484|
000080  1cc0              ADDS     r0,r0,#3              ;1852
000082  5d81              LDRB     r1,[r0,r6]            ;1852
000084  f1060008          ADD      r0,r6,#8              ;1852
000088  5421              STRB     r1,[r4,r0]            ;1852
00008a  1c70              ADDS     r0,r6,#1              ;1852
00008c  b2c6              UXTB     r6,r0                 ;1852
                  |L27.142|
00008e  2e08              CMP      r6,#8                 ;1852
000090  dbf5              BLT      |L27.126|
000092  2110              MOVS     r1,#0x10              ;1853
000094  4620              MOV      r0,r4                 ;1853
000096  f7fffffe          BL       Crc8CheckSum
00009a  7420              STRB     r0,[r4,#0x10]         ;1853
00009c  2011              MOVS     r0,#0x11              ;1854
00009e  f88400c8          STRB     r0,[r4,#0xc8]         ;1854
0000a2  2001              MOVS     r0,#1                 ;1855
0000a4  494f              LDR      r1,|L27.484|
0000a6  7048              STRB     r0,[r1,#1]            ;1855
0000a8  f0150f01          TST      r5,#1                 ;1857
0000ac  d106              BNE      |L27.188|
0000ae  484e              LDR      r0,|L27.488|
0000b0  7d00              LDRB     r0,[r0,#0x14]         ;1857  ; LockItem
0000b2  f00000fe          AND      r0,r0,#0xfe           ;1857
0000b6  494c              LDR      r1,|L27.488|
0000b8  8288              STRH     r0,[r1,#0x14]         ;1857
0000ba  e036              B        |L27.298|
                  |L27.188|
0000bc  484a              LDR      r0,|L27.488|
0000be  8a80              LDRH     r0,[r0,#0x14]         ;1858  ; LockItem
0000c0  f0400001          ORR      r0,r0,#1              ;1858
0000c4  4948              LDR      r1,|L27.488|
0000c6  8288              STRH     r0,[r1,#0x14]         ;1858
0000c8  e02f              B        |L27.298|
                  |L27.202|
0000ca  2f02              CMP      r7,#2                 ;1861
0000cc  d12d              BNE      |L27.298|
0000ce  2005              MOVS     r0,#5                 ;1863
0000d0  7020              STRB     r0,[r4,#0]            ;1863
0000d2  2000              MOVS     r0,#0                 ;1864
0000d4  7060              STRB     r0,[r4,#1]            ;1864
0000d6  70a0              STRB     r0,[r4,#2]            ;1865
0000d8  70e0              STRB     r0,[r4,#3]            ;1866
0000da  4841              LDR      r0,|L27.480|
0000dc  7880              LDRB     r0,[r0,#2]            ;1867  ; Dev
0000de  7120              STRB     r0,[r4,#4]            ;1867
0000e0  f8848005          STRB     r8,[r4,#5]            ;1868
0000e4  2dbb              CMP      r5,#0xbb              ;1869
0000e6  d112              BNE      |L27.270|
0000e8  2003              MOVS     r0,#3                 ;1871
0000ea  71a0              STRB     r0,[r4,#6]            ;1871
0000ec  71e5              STRB     r5,[r4,#7]            ;1872
0000ee  208e              MOVS     r0,#0x8e              ;1873
0000f0  7220              STRB     r0,[r4,#8]            ;1873
0000f2  2000              MOVS     r0,#0                 ;1874
0000f4  7260              STRB     r0,[r4,#9]            ;1874
0000f6  210a              MOVS     r1,#0xa               ;1875
0000f8  4620              MOV      r0,r4                 ;1875
0000fa  f7fffffe          BL       Crc8CheckSum
0000fe  72a0              STRB     r0,[r4,#0xa]          ;1875
000100  200b              MOVS     r0,#0xb               ;1876
000102  f88400c8          STRB     r0,[r4,#0xc8]         ;1876
000106  2001              MOVS     r0,#1                 ;1877
000108  4936              LDR      r1,|L27.484|
00010a  7048              STRB     r0,[r1,#1]            ;1877
00010c  e00d              B        |L27.298|
                  |L27.270|
00010e  2001              MOVS     r0,#1                 ;1881
000110  71a0              STRB     r0,[r4,#6]            ;1881
000112  71e5              STRB     r5,[r4,#7]            ;1882
000114  2108              MOVS     r1,#8                 ;1883
000116  4620              MOV      r0,r4                 ;1883
000118  f7fffffe          BL       Crc8CheckSum
00011c  7220              STRB     r0,[r4,#8]            ;1883
00011e  2009              MOVS     r0,#9                 ;1884
000120  f88400c8          STRB     r0,[r4,#0xc8]         ;1884
000124  2001              MOVS     r0,#1                 ;1885
000126  492f              LDR      r1,|L27.484|
000128  7048              STRB     r0,[r1,#1]            ;1885
                  |L27.298|
00012a  2f03              CMP      r7,#3                 ;1889
00012c  d125              BNE      |L27.378|
00012e  2025              MOVS     r0,#0x25              ;1905
000130  7020              STRB     r0,[r4,#0]            ;1905
000132  2000              MOVS     r0,#0                 ;1906
000134  7060              STRB     r0,[r4,#1]            ;1906
000136  70a0              STRB     r0,[r4,#2]            ;1907
000138  70e0              STRB     r0,[r4,#3]            ;1908
00013a  4829              LDR      r0,|L27.480|
00013c  7880              LDRB     r0,[r0,#2]            ;1909  ; Dev
00013e  7120              STRB     r0,[r4,#4]            ;1909
000140  2010              MOVS     r0,#0x10              ;1910
000142  7160              STRB     r0,[r4,#5]            ;1910
000144  2009              MOVS     r0,#9                 ;1911
000146  71a0              STRB     r0,[r4,#6]            ;1911
000148  71e5              STRB     r5,[r4,#7]            ;1912
00014a  2600              MOVS     r6,#0                 ;1913
00014c  e007              B        |L27.350|
                  |L27.334|
00014e  4825              LDR      r0,|L27.484|
000150  1cc0              ADDS     r0,r0,#3              ;1913
000152  5d81              LDRB     r1,[r0,r6]            ;1913
000154  f1060008          ADD      r0,r6,#8              ;1913
000158  5421              STRB     r1,[r4,r0]            ;1913
00015a  1c70              ADDS     r0,r6,#1              ;1913
00015c  b2c6              UXTB     r6,r0                 ;1913
                  |L27.350|
00015e  2e08              CMP      r6,#8                 ;1913
000160  dbf5              BLT      |L27.334|
000162  2110              MOVS     r1,#0x10              ;1914
000164  4620              MOV      r0,r4                 ;1914
000166  f7fffffe          BL       Crc8CheckSum
00016a  7420              STRB     r0,[r4,#0x10]         ;1914
00016c  2011              MOVS     r0,#0x11              ;1915
00016e  f88400c8          STRB     r0,[r4,#0xc8]         ;1915
000172  2001              MOVS     r0,#1                 ;1916
000174  491b              LDR      r1,|L27.484|
000176  7048              STRB     r0,[r1,#1]            ;1916
000178  e01f              B        |L27.442|
                  |L27.378|
00017a  2f04              CMP      r7,#4                 ;1920
00017c  d11d              BNE      |L27.442|
00017e  2004              MOVS     r0,#4                 ;1923
000180  7020              STRB     r0,[r4,#0]            ;1923
000182  2000              MOVS     r0,#0                 ;1924
000184  7060              STRB     r0,[r4,#1]            ;1924
000186  70a0              STRB     r0,[r4,#2]            ;1925
000188  4815              LDR      r0,|L27.480|
00018a  7a00              LDRB     r0,[r0,#8]            ;1926  ; Dev
00018c  70e0              STRB     r0,[r4,#3]            ;1926
00018e  4814              LDR      r0,|L27.480|
000190  7a00              LDRB     r0,[r0,#8]            ;1926  ; Dev
000192  1c40              ADDS     r0,r0,#1              ;1926
000194  4912              LDR      r1,|L27.480|
000196  7208              STRB     r0,[r1,#8]            ;1926
000198  4608              MOV      r0,r1                 ;1927
00019a  7880              LDRB     r0,[r0,#2]            ;1927  ; Dev
00019c  7120              STRB     r0,[r4,#4]            ;1927
00019e  f1080010          ADD      r0,r8,#0x10           ;1928
0001a2  7160              STRB     r0,[r4,#5]            ;1928
0001a4  2001              MOVS     r0,#1                 ;1929
0001a6  71a0              STRB     r0,[r4,#6]            ;1929
0001a8  71e5              STRB     r5,[r4,#7]            ;1930
0001aa  2108              MOVS     r1,#8                 ;1931
0001ac  4620              MOV      r0,r4                 ;1931
0001ae  f7fffffe          BL       Crc8CheckSum
0001b2  7220              STRB     r0,[r4,#8]            ;1931
0001b4  2009              MOVS     r0,#9                 ;1932
0001b6  f88400c8          STRB     r0,[r4,#0xc8]         ;1932
                  |L27.442|
0001ba  2001              MOVS     r0,#1                 ;1934
0001bc  f8040fc9          STRB     r0,[r4,#0xc9]!        ;1934
0001c0  2004              MOVS     r0,#4                 ;1935
0001c2  7060              STRB     r0,[r4,#1]            ;1935
0001c4  2000              MOVS     r0,#0                 ;1936
0001c6  70e0              STRB     r0,[r4,#3]            ;1936
0001c8  201e              MOVS     r0,#0x1e              ;1937
0001ca  7120              STRB     r0,[r4,#4]            ;1937
0001cc  f1a404c9          SUB      r4,r4,#0xc9           ;1937
0001d0  4641              MOV      r1,r8                 ;1938
0001d2  4802              LDR      r0,|L27.476|
0001d4  f7fffffe          BL       EnQueueBuf
0001d8  bf00              NOP      
0001da  e71c              B        |L27.22|
;;;1940   //============================================================================================================
                          ENDP

                  |L27.476|
                          DCD      RS485_Queue
                  |L27.480|
                          DCD      ||Dev||
                  |L27.484|
                          DCD      lock
                  |L27.488|
                          DCD      LockItem

                          AREA ||i.IT1_Modify_Addr_Old||, CODE, READONLY, ALIGN=2

                  IT1_Modify_Addr_Old PROC
;;;2392   //修改地址，老的方式
;;;2393   void IT1_Modify_Addr_Old(void)
000000  b510              PUSH     {r4,lr}
;;;2394   {
;;;2395       if(RxDat.buf[3]==0xaa&&RxDat.buf[4]==0xaa&&RxDat.buf[5]==0xaa&&\
000002  4828              LDR      r0,|L28.164|
000004  7940              LDRB     r0,[r0,#5]
000006  28aa              CMP      r0,#0xaa
000008  d14b              BNE      |L28.162|
00000a  4826              LDR      r0,|L28.164|
00000c  7980              LDRB     r0,[r0,#6]
00000e  28aa              CMP      r0,#0xaa
000010  d147              BNE      |L28.162|
000012  4824              LDR      r0,|L28.164|
000014  79c0              LDRB     r0,[r0,#7]
000016  28aa              CMP      r0,#0xaa
000018  d143              BNE      |L28.162|
;;;2396         RxDat.buf[6]==0xaa&&RxDat.buf[7]==0x00)
00001a  4822              LDR      r0,|L28.164|
00001c  7a00              LDRB     r0,[r0,#8]
00001e  28aa              CMP      r0,#0xaa
000020  d13f              BNE      |L28.162|
000022  4820              LDR      r0,|L28.164|
000024  7a40              LDRB     r0,[r0,#9]
000026  2800              CMP      r0,#0
000028  d13b              BNE      |L28.162|
;;;2397       { 		
;;;2398   					TxDat.buf[0] =0xCD;						//帧控制,从设备请求命令
00002a  20cd              MOVS     r0,#0xcd
00002c  491e              LDR      r1,|L28.168|
00002e  70c8              STRB     r0,[r1,#3]
;;;2399   					TxDat.buf[1] =0x00;						//目标地址
000030  2100              MOVS     r1,#0
000032  481d              LDR      r0,|L28.168|
000034  7101              STRB     r1,[r0,#4]
;;;2400   					TxDat.buf[2] =0x0A;						//目标地址
000036  210a              MOVS     r1,#0xa
000038  7141              STRB     r1,[r0,#5]
;;;2401   					TxDat.buf[3] =0x03;						//帧序列号
00003a  2103              MOVS     r1,#3
00003c  7181              STRB     r1,[r0,#6]
;;;2402   					TxDat.buf[4] =0X00;						//设备总数以及设备子地址
00003e  2100              MOVS     r1,#0
000040  71c1              STRB     r1,[r0,#7]
;;;2403   					TxDat.buf[5] =0X00;						//网络ID，
000042  7201              STRB     r1,[r0,#8]
;;;2404   					TxDat.buf[6] =0X00;						//数据个数  	
000044  7241              STRB     r1,[r0,#9]
;;;2405   					TxDat.buf[7] =RxDat.buf[7];				//数据个数 
000046  4817              LDR      r0,|L28.164|
000048  7a41              LDRB     r1,[r0,#9]
00004a  4817              LDR      r0,|L28.168|
00004c  7281              STRB     r1,[r0,#0xa]
;;;2406   					TxDat.buf[8] =RxDat.buf[8];				//数据个数 
00004e  4815              LDR      r0,|L28.164|
000050  7a81              LDRB     r1,[r0,#0xa]
000052  4815              LDR      r0,|L28.168|
000054  72c1              STRB     r1,[r0,#0xb]
;;;2407   					TxDat.buf[9] =Crc8CheckSum(TxDat.buf,9);	
000056  2109              MOVS     r1,#9
000058  1cc0              ADDS     r0,r0,#3
00005a  f7fffffe          BL       Crc8CheckSum
00005e  4912              LDR      r1,|L28.168|
000060  7308              STRB     r0,[r1,#0xc]
;;;2408   					RS485_Send(TxDat.buf,10);  
000062  210a              MOVS     r1,#0xa
000064  4810              LDR      r0,|L28.168|
000066  1cc0              ADDS     r0,r0,#3
000068  f7fffffe          BL       RS485_Send
;;;2409   					
;;;2410   			
;;;2411   					if((Dev.err&ERR_POWER)==0)										//电压正常才能写，低压禁止
00006c  480f              LDR      r0,|L28.172|
00006e  7b80              LDRB     r0,[r0,#0xe]  ; Dev
000070  f0100f10          TST      r0,#0x10
000074  d107              BNE      |L28.134|
;;;2412   					{
;;;2413   						    Dev.addr[0]=RxDat.buf[8];    
000076  480b              LDR      r0,|L28.164|
000078  7a80              LDRB     r0,[r0,#0xa]
00007a  490c              LDR      r1,|L28.172|
00007c  7088              STRB     r0,[r1,#2]
;;;2414                   Write_Dev(Dev.addr[0],TYPE_EE_ADDR_ADDR0);							
00007e  7888              LDRB     r0,[r1,#2]  ; Dev
000080  2101              MOVS     r1,#1
000082  f7fffffe          BL       Write_Dev
                  |L28.134|
;;;2415   					}
;;;2416   					
;;;2417   					InitQueueBUF(&RS485_Queue);					//清队列	
000086  480a              LDR      r0,|L28.176|
000088  f7fffffe          BL       InitQueueBUF
;;;2418             InitQueueBUF(&WirelessSend_Queue);					//清队列						
00008c  4809              LDR      r0,|L28.180|
00008e  f7fffffe          BL       InitQueueBUF
;;;2419   					Dev.stu=DEV_REGISTER;
000092  2001              MOVS     r0,#1
000094  4905              LDR      r1,|L28.172|
000096  7188              STRB     r0,[r1,#6]
;;;2420   					RegTimeClr(); 
000098  f7fffffe          BL       RegTimeClr
;;;2421   					TxDat.f_tx=1;
00009c  2001              MOVS     r0,#1
00009e  4902              LDR      r1,|L28.168|
0000a0  7088              STRB     r0,[r1,#2]
                  |L28.162|
;;;2422   	   }
;;;2423   }
0000a2  bd10              POP      {r4,pc}
;;;2424   //============================================================================================================
                          ENDP

                  |L28.164|
                          DCD      RxDat
                  |L28.168|
                          DCD      TxDat
                  |L28.172|
                          DCD      ||Dev||
                  |L28.176|
                          DCD      RS485_Queue
                  |L28.180|
                          DCD      WirelessSend_Queue

                          AREA ||i.IT1_Modify_Type||, CODE, READONLY, ALIGN=2

                  IT1_Modify_Type PROC
;;;1488   // 08 00 FF 00 00 88 07 BB AA BB FF 72 20 08 F6 
;;;1489   uint8_t IT1_Modify_Type(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1490   {
;;;1491   	uint8_t t1,t2;
;;;1492   	uint16_t tt;
;;;1493   	//因为修改指令0x08在广播设地址时，不屏蔽
;;;1494   	if(RxDat.buf[2]!=Dev.addr[0])return 0;
000002  4816              LDR      r0,|L29.92|
000004  7900              LDRB     r0,[r0,#4]
000006  4916              LDR      r1,|L29.96|
000008  7889              LDRB     r1,[r1,#2]  ; Dev
00000a  4288              CMP      r0,r1
00000c  d001              BEQ      |L29.18|
00000e  2000              MOVS     r0,#0
                  |L29.16|
;;;1495   
;;;1496   	t1=RxDat.buf[11];
;;;1497   	t2=RxDat.buf[12];
;;;1498   	tt=(uint16_t)(t1<<8)+(uint16_t)t2;
;;;1499   	//if((tt==0xb100)||(tt==0xb140))
;;;1500   	if((tt==0xb100)||(tt==0xb140)||((tt&0xf000)==0x3000))		//增加锁转发器支持
;;;1501   	{
;;;1502   			Write_Dev(t1,TYPE_EE_ADDR_TYPESH);
;;;1503   			Write_Dev(t2,TYPE_EE_ADDR_TYPES);
;;;1504   		  Dev.type=tt;
;;;1505   		  Dev.stu=DEV_REGISTER;
;;;1506   		  RegTimeClr(); 
;;;1507   			return 0;
;;;1508   	}
;;;1509   	else
;;;1510   	{
;;;1511   			return 1;
;;;1512   	}
;;;1513   
;;;1514   }
000010  bd70              POP      {r4-r6,pc}
                  |L29.18|
000012  4812              LDR      r0,|L29.92|
000014  7b45              LDRB     r5,[r0,#0xd]          ;1496
000016  7b86              LDRB     r6,[r0,#0xe]          ;1497
000018  eb062005          ADD      r0,r6,r5,LSL #8       ;1498
00001c  b284              UXTH     r4,r0                 ;1498
00001e  f5b44f31          CMP      r4,#0xb100            ;1500
000022  d008              BEQ      |L29.54|
000024  f5a44031          SUB      r0,r4,#0xb100         ;1500
000028  3840              SUBS     r0,r0,#0x40           ;1500
00002a  d004              BEQ      |L29.54|
00002c  f4044070          AND      r0,r4,#0xf000         ;1500
000030  f5b05f40          CMP      r0,#0x3000            ;1500
000034  d110              BNE      |L29.88|
                  |L29.54|
000036  2107              MOVS     r1,#7                 ;1502
000038  4628              MOV      r0,r5                 ;1502
00003a  f7fffffe          BL       Write_Dev
00003e  2106              MOVS     r1,#6                 ;1503
000040  4630              MOV      r0,r6                 ;1503
000042  f7fffffe          BL       Write_Dev
000046  4806              LDR      r0,|L29.96|
000048  8084              STRH     r4,[r0,#4]            ;1504
00004a  2001              MOVS     r0,#1                 ;1505
00004c  4904              LDR      r1,|L29.96|
00004e  7188              STRB     r0,[r1,#6]            ;1505
000050  f7fffffe          BL       RegTimeClr
000054  2000              MOVS     r0,#0                 ;1507
000056  e7db              B        |L29.16|
                  |L29.88|
000058  2001              MOVS     r0,#1                 ;1511
00005a  e7d9              B        |L29.16|
;;;1515   
                          ENDP

                  |L29.92|
                          DCD      RxDat
                  |L29.96|
                          DCD      ||Dev||

                          AREA ||i.IT1_PROGRAM_Uadata||, CODE, READONLY, ALIGN=2

                  IT1_PROGRAM_Uadata PROC
;;;2425   //程序升级更新,先复位，进入BOOTLOADER程序
;;;2426   void IT1_PROGRAM_Uadata(void)
000000  480f              LDR      r0,|L30.64|
;;;2427   {
;;;2428   	
;;;2429   		 if(RxDat.buf[3]==0xaa&&RxDat.buf[4]==0xaa&&RxDat.buf[5]==0xcf&&\
000002  7940              LDRB     r0,[r0,#5]
000004  28aa              CMP      r0,#0xaa
000006  d119              BNE      |L30.60|
000008  480d              LDR      r0,|L30.64|
00000a  7980              LDRB     r0,[r0,#6]
00000c  28aa              CMP      r0,#0xaa
00000e  d115              BNE      |L30.60|
000010  480b              LDR      r0,|L30.64|
000012  79c0              LDRB     r0,[r0,#7]
000014  28cf              CMP      r0,#0xcf
000016  d111              BNE      |L30.60|
;;;2430         RxDat.buf[6]==0xcf&&RxDat.buf[7]==0xfe&&RxDat.buf[8]==0x01)
000018  4809              LDR      r0,|L30.64|
00001a  7a00              LDRB     r0,[r0,#8]
00001c  28cf              CMP      r0,#0xcf
00001e  d10d              BNE      |L30.60|
000020  4807              LDR      r0,|L30.64|
000022  7a40              LDRB     r0,[r0,#9]
000024  28fe              CMP      r0,#0xfe
000026  d109              BNE      |L30.60|
000028  4805              LDR      r0,|L30.64|
00002a  7a80              LDRB     r0,[r0,#0xa]
00002c  2801              CMP      r0,#1
00002e  d105              BNE      |L30.60|
;;;2431   		 {
;;;2432   			 
;;;2433   			  //*pt=OPT_OK;
;;;2434   				//==================================================================================================
;;;2435   				//停止喂狗,等待复位
;;;2436   				Dev.err|=ERR_RESET;
000030  4804              LDR      r0,|L30.68|
000032  7b80              LDRB     r0,[r0,#0xe]  ; Dev
000034  f0400008          ORR      r0,r0,#8
000038  4902              LDR      r1,|L30.68|
00003a  7388              STRB     r0,[r1,#0xe]
                  |L30.60|
;;;2437   		 }
;;;2438   }
00003c  4770              BX       lr
;;;2439   
                          ENDP

00003e  0000              DCW      0x0000
                  |L30.64|
                          DCD      RxDat
                  |L30.68|
                          DCD      ||Dev||

                          AREA ||i.IT1_ParseFrame||, CODE, READONLY, ALIGN=2

                  IT1_ParseFrame PROC
;;;179    //接收帧处理
;;;180    void IT1_ParseFrame(void)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;181    {
;;;182      unsigned char tmp1,tmp_addr;
;;;183    	//unsigned int temp_address;
;;;184    
;;;185    	unsigned char CheckSum/*,i*/;
;;;186    	unsigned int temp_address;
;;;187    	uint8_t buf[4];
;;;188    	
;;;189    	if(RxDat.cnt==0)return;
000004  4859              LDR      r0,|L31.364|
000006  7800              LDRB     r0,[r0,#0]  ; RxDat
000008  b908              CBNZ     r0,|L31.14|
                  |L31.10|
;;;190    		
;;;191    	if(RxDat.buf[0]==0x02)return;	
;;;192    
;;;193    	temp_address=RxDat.buf[1];
;;;194    	temp_address=(temp_address<<8)+RxDat.buf[2];
;;;195    
;;;196    	tmp_addr=RxDat.buf[2];
;;;197    	
;;;198    	if(temp_address!=0xffff && tmp_addr!=Dev.addr[0])
;;;199      {
;;;200    			RxDat.cnt=0;						                        		//清接收数据个数
;;;201    			return;								                        			//跳出
;;;202    	}
;;;203    		
;;;204    	CheckSum=Crc8CheckSum(RxDat.buf,(RxDat.cnt-1));		    	//计算Crc8值
;;;205    	if(CheckSum==RxDat.buf[RxDat.cnt-1])				          	//判断Crc校验是否正确
;;;206    	{
;;;207    	  	
;;;208    	  if(Reg.fullflag==0)Led_set(0,12,12,1,1);
;;;209    		tmp1=RxDat.buf[0];
;;;210    		switch(tmp1)		
;;;211    		{
;;;212    			//============================================================================
;;;213    			case MSG_broadcast:					                        //广播地址不需要应答				
;;;214    				    IT1_Function_BroadCast();		
;;;215    			break;
;;;216    			//==============================================================================
;;;217          case MSG_command:					        	            		//命令报文
;;;218                IT1_Function_CMD();			
;;;219    			break;
;;;220    			//===============================================================================
;;;221    			case MSG_request:										    						//请求报文
;;;222    
;;;223    			break;
;;;224    			//================================================================================
;;;225    			case MSG_ask:					    					    						//应答报文
;;;226    						//此处没有用到
;;;227    			break;
;;;228    			//=================================================================================
;;;229    			case MSG_data:					    				        				//数据报文 
;;;230    			     	IT1_Function_Date();					            		//要转发的数据				
;;;231    			break;
;;;232    			//==================================================================================
;;;233    			case MSG_setup:											    						//设置报文	
;;;234    						IT1_Function_Setup(); 
;;;235    			break;
;;;236    			//==================================================================================
;;;237    			case MSG_modify:							                			//RS485地址设置		
;;;238    						IT1_Function_Modfiy();
;;;239    			break;
;;;240    			//==================================================================================
;;;241    			//20161226修改为支持红外数据下载
;;;242    			case 0x06:
;;;243    			     IT1_IR_Setup();
;;;244    			break;	
;;;245    			//===================================================================================
;;;246    			//红外配置数据删除
;;;247    			case 0x26:
;;;248    					IT1_IR_DEL();
;;;249    			break;
;;;250    			//==================================================================================
;;;251    			case 0x07:                      		//升级程序
;;;252    				    IT1_PROGRAM_Uadata();
;;;253    			break;
;;;254    						//==================================================================================
;;;255    			//上报产品信息和版本
;;;256    			case 0x20:
;;;257    						if((RxDat.buf[S_DATLEN]==0x01)&&(RxDat.buf[S_DAT]==0x00))
;;;258    						{
;;;259    								IT1_LoadInfo_Report();
;;;260    								IT1_Load_RS485_Ack(OPT_OK); 
;;;261    						}
;;;262    						else if(RxDat.buf[6]>0x01)
;;;263    						{
;;;264    								IT1_DevPara_Report(RxDat.buf[5],RxDat.buf[7],RxDat.buf[8]);
;;;265    								IT1_Load_RS485_Ack(OPT_OK); 
;;;266    							
;;;267    							  //=====================================
;;;268    							  //2017.05.12增加向遥控器请求红外配置指令
;;;269    							  buf[0]=0x03;
;;;270    							  buf[1]=Dev.rand;
;;;271    							  buf[2]=0x01;
;;;272    							  buf[3]=0x00;
;;;273    							  Wireless_Control_IR(0,3,&buf[0]);
;;;274    							  //======================================
;;;275    						}
;;;276    			break;
;;;277    			//===================================================================================
;;;278    			//复位，用于升级
;;;279    			case 0x22:
;;;280    						Dev.err|=ERR_RESET;
;;;281    						IT1_Load_RS485_Ack(OPT_OK);
;;;282    			break;
;;;283    			//===================================================================================
;;;284    			//参数设置
;;;285    			//23 00 xx 00 00 10 01 xx
;;;286    			case 0x23:			
;;;287    					  IT1_Load_RS485_Ack(OPT_ERR);
;;;288    			break;
;;;289    			
;;;290    			//===================================================================================
;;;291    			//????
;;;292    			//e0 00 b1 00 00 10 08 11 22 33 44 55 66 77 88 8f
;;;293    			//e0 00 b1 00 00 10 08 ff ff ff ff ff ff ff ff 61
;;;294    			case 0xe0:
;;;295    
;;;296    			break;
;;;297    			//===================================================================================
;;;298    			default:
;;;299    			     IT1_Load_RS485_Ack(OPT_ERR);  
;;;300    			break;
;;;301    			//====================================================================================
;;;302    		}
;;;303    
;;;304    	}
;;;305    	RxDat.cnt=0;	
;;;306    
;;;307    }
00000a  e8bd81fc          POP      {r2-r8,pc}
                  |L31.14|
00000e  4857              LDR      r0,|L31.364|
000010  7880              LDRB     r0,[r0,#2]            ;191  ; RxDat
000012  2802              CMP      r0,#2                 ;191
000014  d100              BNE      |L31.24|
000016  e7f8              B        |L31.10|
                  |L31.24|
000018  4854              LDR      r0,|L31.364|
00001a  78c7              LDRB     r7,[r0,#3]            ;193
00001c  7900              LDRB     r0,[r0,#4]            ;194
00001e  eb002707          ADD      r7,r0,r7,LSL #8       ;194
000022  4852              LDR      r0,|L31.364|
000024  7906              LDRB     r6,[r0,#4]            ;196
000026  f5a7407f          SUB      r0,r7,#0xff00         ;198
00002a  38ff              SUBS     r0,r0,#0xff           ;198
00002c  d007              BEQ      |L31.62|
00002e  4850              LDR      r0,|L31.368|
000030  7880              LDRB     r0,[r0,#2]            ;198  ; Dev
000032  42b0              CMP      r0,r6                 ;198
000034  d003              BEQ      |L31.62|
000036  2000              MOVS     r0,#0                 ;200
000038  494c              LDR      r1,|L31.364|
00003a  7008              STRB     r0,[r1,#0]            ;200
00003c  e7e5              B        |L31.10|
                  |L31.62|
00003e  484b              LDR      r0,|L31.364|
000040  7800              LDRB     r0,[r0,#0]            ;204  ; RxDat
000042  1e40              SUBS     r0,r0,#1              ;204
000044  b2c1              UXTB     r1,r0                 ;204
000046  4849              LDR      r0,|L31.364|
000048  1c80              ADDS     r0,r0,#2              ;204
00004a  f7fffffe          BL       Crc8CheckSum
00004e  4604              MOV      r4,r0                 ;204
000050  4846              LDR      r0,|L31.364|
000052  7800              LDRB     r0,[r0,#0]            ;205  ; RxDat
000054  1e40              SUBS     r0,r0,#1              ;205
000056  4945              LDR      r1,|L31.364|
000058  1c89              ADDS     r1,r1,#2              ;205
00005a  5c09              LDRB     r1,[r1,r0]            ;205
00005c  42a1              CMP      r1,r4                 ;205
00005e  d175              BNE      |L31.332|
000060  4844              LDR      r0,|L31.372|
000062  7880              LDRB     r0,[r0,#2]            ;208  ; Reg
000064  b938              CBNZ     r0,|L31.118|
000066  2001              MOVS     r0,#1                 ;208
000068  4603              MOV      r3,r0                 ;208
00006a  220c              MOVS     r2,#0xc               ;208
00006c  4611              MOV      r1,r2                 ;208
00006e  9000              STR      r0,[sp,#0]            ;208
000070  2000              MOVS     r0,#0                 ;208
000072  f7fffffe          BL       Led_set
                  |L31.118|
000076  483d              LDR      r0,|L31.364|
000078  7885              LDRB     r5,[r0,#2]            ;209  ; RxDat
00007a  2d07              CMP      r5,#7                 ;210
00007c  d02d              BEQ      |L31.218|
00007e  dc06              BGT      |L31.142|
000080  d26a              BCS      |L31.344|
000082  e8dff005          TBB      [pc,r5]               ;210
000086  1316              DCB      0x13,0x16
000088  191a1b1e          DCB      0x19,0x1a,0x1b,0x1e
00008c  2400              DCB      0x24,0x00
                  |L31.142|
00008e  2d23              CMP      r5,#0x23              ;210
000090  d05d              BEQ      |L31.334|
000092  dc06              BGT      |L31.162|
000094  2d08              CMP      r5,#8                 ;210
000096  d017              BEQ      |L31.200|
000098  2d20              CMP      r5,#0x20              ;210
00009a  d021              BEQ      |L31.224|
00009c  2d22              CMP      r5,#0x22              ;210
00009e  d15b              BNE      |L31.344|
0000a0  e04a              B        |L31.312|
                  |L31.162|
0000a2  2d26              CMP      r5,#0x26              ;210
0000a4  d016              BEQ      |L31.212|
0000a6  2de0              CMP      r5,#0xe0              ;210
0000a8  d156              BNE      |L31.344|
0000aa  e054              B        |L31.342|
0000ac  f7fffffe          BL       IT1_Function_BroadCast
0000b0  e056              B        |L31.352|
0000b2  f7fffffe          BL       IT1_Function_CMD
0000b6  e053              B        |L31.352|
0000b8  e052              B        |L31.352|
0000ba  e051              B        |L31.352|
0000bc  f7fffffe          BL       IT1_Function_Date
0000c0  e04e              B        |L31.352|
0000c2  f7fffffe          BL       IT1_Function_Setup
0000c6  e04b              B        |L31.352|
                  |L31.200|
0000c8  f7fffffe          BL       IT1_Function_Modfiy
0000cc  e048              B        |L31.352|
0000ce  f7fffffe          BL       IT1_IR_Setup
0000d2  e045              B        |L31.352|
                  |L31.212|
0000d4  f7fffffe          BL       IT1_IR_DEL
0000d8  e042              B        |L31.352|
                  |L31.218|
0000da  f7fffffe          BL       IT1_PROGRAM_Uadata
0000de  e03f              B        |L31.352|
                  |L31.224|
0000e0  4822              LDR      r0,|L31.364|
0000e2  7a00              LDRB     r0,[r0,#8]            ;257
0000e4  2801              CMP      r0,#1                 ;257
0000e6  d108              BNE      |L31.250|
0000e8  4820              LDR      r0,|L31.364|
0000ea  7a40              LDRB     r0,[r0,#9]            ;257
0000ec  b928              CBNZ     r0,|L31.250|
0000ee  f7fffffe          BL       IT1_LoadInfo_Report
0000f2  20fb              MOVS     r0,#0xfb              ;260
0000f4  f7fffffe          BL       IT1_Load_RS485_Ack
0000f8  e01d              B        |L31.310|
                  |L31.250|
0000fa  481c              LDR      r0,|L31.364|
0000fc  7a00              LDRB     r0,[r0,#8]            ;262
0000fe  2801              CMP      r0,#1                 ;262
000100  dd19              BLE      |L31.310|
000102  4b1a              LDR      r3,|L31.364|
000104  7a9a              LDRB     r2,[r3,#0xa]          ;264
000106  7a59              LDRB     r1,[r3,#9]            ;264
000108  79d8              LDRB     r0,[r3,#7]            ;264
00010a  f7fffffe          BL       IT1_DevPara_Report
00010e  20fb              MOVS     r0,#0xfb              ;265
000110  f7fffffe          BL       IT1_Load_RS485_Ack
000114  2003              MOVS     r0,#3                 ;269
000116  f88d0004          STRB     r0,[sp,#4]            ;269
00011a  4815              LDR      r0,|L31.368|
00011c  79c0              LDRB     r0,[r0,#7]            ;270  ; Dev
00011e  f88d0005          STRB     r0,[sp,#5]            ;270
000122  2001              MOVS     r0,#1                 ;271
000124  f88d0006          STRB     r0,[sp,#6]            ;271
000128  2000              MOVS     r0,#0                 ;272
00012a  f88d0007          STRB     r0,[sp,#7]            ;272
00012e  aa01              ADD      r2,sp,#4              ;273
000130  2103              MOVS     r1,#3                 ;273
000132  f7fffffe          BL       Wireless_Control_IR
                  |L31.310|
000136  e013              B        |L31.352|
                  |L31.312|
000138  480d              LDR      r0,|L31.368|
00013a  7b80              LDRB     r0,[r0,#0xe]          ;280  ; Dev
00013c  f0400008          ORR      r0,r0,#8              ;280
000140  490b              LDR      r1,|L31.368|
000142  7388              STRB     r0,[r1,#0xe]          ;280
000144  20fb              MOVS     r0,#0xfb              ;281
000146  f7fffffe          BL       IT1_Load_RS485_Ack
00014a  e009              B        |L31.352|
                  |L31.332|
00014c  e009              B        |L31.354|
                  |L31.334|
00014e  20fc              MOVS     r0,#0xfc              ;287
000150  f7fffffe          BL       IT1_Load_RS485_Ack
000154  e004              B        |L31.352|
                  |L31.342|
000156  e003              B        |L31.352|
                  |L31.344|
000158  20fc              MOVS     r0,#0xfc              ;299
00015a  f7fffffe          BL       IT1_Load_RS485_Ack
00015e  bf00              NOP                            ;300
                  |L31.352|
000160  bf00              NOP                            ;215
                  |L31.354|
000162  2000              MOVS     r0,#0                 ;305
000164  4901              LDR      r1,|L31.364|
000166  7008              STRB     r0,[r1,#0]            ;305
000168  bf00              NOP      
00016a  e74e              B        |L31.10|
;;;308    
                          ENDP

                  |L31.364|
                          DCD      RxDat
                  |L31.368|
                          DCD      ||Dev||
                  |L31.372|
                          DCD      ||Reg||

                          AREA ||i.IT1_PraseASK||, CODE, READONLY, ALIGN=2

                  IT1_PraseASK PROC
;;;561    //应答帧处理
;;;562    unsigned char IT1_PraseASK(void)
000000  b538              PUSH     {r3-r5,lr}
;;;563    {
;;;564      	unsigned short int tempdata;
;;;565      	//unsigned char tmp;
;;;566    	if(RxDat.cnt>=4)
000002  4820              LDR      r0,|L32.132|
000004  7800              LDRB     r0,[r0,#0]  ; RxDat
000006  2804              CMP      r0,#4
000008  db39              BLT      |L32.126|
;;;567    	{
;;;568    		//=========================================================================================		
;;;569    		if(RxDat.buf[0]==MSG_ask)	        //如果是应答包
00000a  481e              LDR      r0,|L32.132|
00000c  7880              LDRB     r0,[r0,#2]  ; RxDat
00000e  2803              CMP      r0,#3
000010  d135              BNE      |L32.126|
;;;570    		{
;;;571    		  	//tempdata=RxDat.buf[1];
;;;572    				//tempdata=(tempdata<<8)+RxDat.buf[2];
;;;573    				tempdata=RxDat.buf[2];
000012  481c              LDR      r0,|L32.132|
000014  7904              LDRB     r4,[r0,#4]
;;;574    			//========================================================================================
;;;575    			//判断是否是设备本身地址，或者虚拟设备地址
;;;576    		  if(tempdata==Dev.addr[0])
000016  481c              LDR      r0,|L32.136|
000018  7880              LDRB     r0,[r0,#2]  ; Dev
00001a  42a0              CMP      r0,r4
00001c  d12f              BNE      |L32.126|
;;;577    			{
;;;578    				if(Dev.stu<DEV_NORMAL)
00001e  481a              LDR      r0,|L32.136|
000020  7980              LDRB     r0,[r0,#6]  ; Dev
000022  2802              CMP      r0,#2
000024  da29              BGE      |L32.122|
;;;579    				{
;;;580    						if(RxDat.buf[S_DATLEN]==0X01)
000026  4817              LDR      r0,|L32.132|
000028  7a00              LDRB     r0,[r0,#8]
00002a  2801              CMP      r0,#1
00002c  d11a              BNE      |L32.100|
;;;581    						{
;;;582    									if(RxDat.buf[S_DAT]==0xf2)
00002e  4815              LDR      r0,|L32.132|
000030  7a40              LDRB     r0,[r0,#9]
000032  28f2              CMP      r0,#0xf2
000034  d10b              BNE      |L32.78|
;;;583    									{
;;;584    												Reg.fullflag=1;
000036  2001              MOVS     r0,#1
000038  4914              LDR      r1,|L32.140|
00003a  7088              STRB     r0,[r1,#2]
;;;585    										    Led_set(0,25,25,0xff,1);
00003c  23ff              MOVS     r3,#0xff
00003e  2219              MOVS     r2,#0x19
000040  4611              MOV      r1,r2
000042  9000              STR      r0,[sp,#0]
000044  2000              MOVS     r0,#0
000046  f7fffffe          BL       Led_set
;;;586    												return 0;
00004a  2000              MOVS     r0,#0
                  |L32.76|
;;;587    									}
;;;588    									else if(RxDat.buf[S_DAT]==0x00)
;;;589    									{
;;;590    												Dev.stu=DEV_NORMAL;
;;;591    												InitQueueBUF(&RS485_Queue);
;;;592    												return 1;
;;;593    									}
;;;594    						}
;;;595    						else if(RxDat.buf[S_DATLEN]==0X00)
;;;596    						{
;;;597    									Dev.stu=DEV_NORMAL;
;;;598    									InitQueueBUF(&RS485_Queue);
;;;599    									return 1;
;;;600    						}
;;;601    				}
;;;602    				else
;;;603    				{
;;;604    						return 1;
;;;605    				}
;;;606    			}
;;;607    		}
;;;608    	}
;;;609    	return 0;
;;;610    }
00004c  bd38              POP      {r3-r5,pc}
                  |L32.78|
00004e  480d              LDR      r0,|L32.132|
000050  7a40              LDRB     r0,[r0,#9]            ;588
000052  b9a0              CBNZ     r0,|L32.126|
000054  2002              MOVS     r0,#2                 ;590
000056  490c              LDR      r1,|L32.136|
000058  7188              STRB     r0,[r1,#6]            ;590
00005a  480d              LDR      r0,|L32.144|
00005c  f7fffffe          BL       InitQueueBUF
000060  2001              MOVS     r0,#1                 ;592
000062  e7f3              B        |L32.76|
                  |L32.100|
000064  4807              LDR      r0,|L32.132|
000066  7a00              LDRB     r0,[r0,#8]            ;595
000068  b948              CBNZ     r0,|L32.126|
00006a  2002              MOVS     r0,#2                 ;597
00006c  4906              LDR      r1,|L32.136|
00006e  7188              STRB     r0,[r1,#6]            ;597
000070  4807              LDR      r0,|L32.144|
000072  f7fffffe          BL       InitQueueBUF
000076  2001              MOVS     r0,#1                 ;599
000078  e7e8              B        |L32.76|
                  |L32.122|
00007a  2001              MOVS     r0,#1                 ;604
00007c  e7e6              B        |L32.76|
                  |L32.126|
00007e  2000              MOVS     r0,#0                 ;609
000080  e7e4              B        |L32.76|
;;;611    
                          ENDP

000082  0000              DCW      0x0000
                  |L32.132|
                          DCD      RxDat
                  |L32.136|
                          DCD      ||Dev||
                  |L32.140|
                          DCD      ||Reg||
                  |L32.144|
                          DCD      RS485_Queue

                          AREA ||i.IT1_RS4852Wireless||, CODE, READONLY, ALIGN=1

                  IT1_RS4852Wireless PROC
;;;2441   //类型转换，RS485--->无线
;;;2442   unsigned char IT1_RS4852Wireless(unsigned char pa1,unsigned char pa2)
000000  4602              MOV      r2,r0
;;;2443   {
;;;2444    	unsigned char tmp;
;;;2445    	
;;;2446   // 	if((pa1==0x71)&&(pa2==0x00))
;;;2447   // 	{
;;;2448   // 		tmp=EX_KEY_SCENE;
;;;2449   // 	}
;;;2450   // 	else if((pa1==0x72)&&(pa2==0x10))
;;;2451   // 	{
;;;2452   // 		tmp=EX_KEY_MOTOR;	
;;;2453   // 	}
;;;2454   // 	else if((pa1==0x72)&&(pa2==0x20))
;;;2455   // 	{
;;;2456   // 		tmp=EX_KEY_LIGHT;
;;;2457   // 	}
;;;2458   //	else if((pa1==0x75)&&(pa2==0x10))
;;;2459   //	{
;;;2460   //		tmp=EX_KEY_GENERAL;
;;;2461   //	}
;;;2462   	
;;;2463   //	if((pa1==0x72)&&(pa2==0x40))			//无线灯光面板
;;;2464   // 	{
;;;2465   // 		tmp=EX_KEY_LIGHT1;
;;;2466   // 	}
;;;2467   //	else if((pa1==0x71)&&(pa2==0x40))//无线场景面板
;;;2468   // 	{
;;;2469   // 		tmp=EX_KEY_SCENE1;
;;;2470   // 	}
;;;2471   //	else if((pa1==0x72)&&(pa2==0x60))//无线场景面板
;;;2472   // 	{
;;;2473   // 		tmp=EX_KEY_MOTOR1;
;;;2474   // 	}
;;;2475   	if((pa1==0x75)&&(pa2==0x40))//无线通用面板?
000002  2a75              CMP      r2,#0x75
000004  d103              BNE      |L33.14|
000006  2940              CMP      r1,#0x40
000008  d101              BNE      |L33.14|
;;;2476    	{
;;;2477    		tmp=EX_KEY_NORMAL1;
00000a  20f8              MOVS     r0,#0xf8
00000c  e01d              B        |L33.74|
                  |L33.14|
;;;2478    	}
;;;2479   	else if((pa1==0x77)&&(pa2==0x40))//无线智能面板
00000e  2a77              CMP      r2,#0x77
000010  d103              BNE      |L33.26|
000012  2940              CMP      r1,#0x40
000014  d101              BNE      |L33.26|
;;;2480    	{
;;;2481    		tmp=EX_KEY_FULL1;
000016  20f9              MOVS     r0,#0xf9
000018  e017              B        |L33.74|
                  |L33.26|
;;;2482    	}
;;;2483   	
;;;2484   //	else if((pa1==0x91)&&(pa2==0x00))
;;;2485   // 	{
;;;2486   // 		tmp=EX_DEV_SOCKET;	
;;;2487   // 	}
;;;2488   // 	else if((pa1==0x01)&&(pa2==0x00))
;;;2489   // 	{
;;;2490   // 		tmp=EX_DEV_LIGHT;
;;;2491   // 	}
;;;2492   //	else if((pa1==0x02)&&(pa2==0x00))				//调光灯
;;;2493   // 	{
;;;2494   // 		tmp=EX_DEV_LIGHT_ADJ;
;;;2495   // 	}
;;;2496   // 	else if((pa1==0x11)&&(pa2==0x00))
;;;2497   // 	{
;;;2498   // 		tmp=EX_DEV_MOTOR_R;	
;;;2499   // 	}
;;;2500     //else if((pa1==0x12)&&(pa2==0x00))
;;;2501     //{
;;;2502    	//	tmp=EX_DEV_BLIND_R;
;;;2503     //}
;;;2504   //	else if((pa1==0x13)&&(pa2==0x30))       //电子E型手动
;;;2505   // 	{
;;;2506   // 		tmp=EX_DEV_MOTOR_E;	
;;;2507   // 	}
;;;2508   //	else if((pa1==0x14)&&(pa2==0x00))
;;;2509   //  {
;;;2510   // 		tmp=EX_DEV_BLIND_E;
;;;2511   //  }
;;;2512   	else if((pa1==0x76)&&(pa2==0x10))
00001a  2a76              CMP      r2,#0x76
00001c  d103              BNE      |L33.38|
00001e  2910              CMP      r1,#0x10
000020  d101              BNE      |L33.38|
;;;2513     {
;;;2514    		tmp=EX_KEY_54KEY;
000022  20fa              MOVS     r0,#0xfa
000024  e011              B        |L33.74|
                  |L33.38|
;;;2515     }
;;;2516   	else if((pa1==0x76)&&(pa2==0x20))
000026  2a76              CMP      r2,#0x76
000028  d103              BNE      |L33.50|
00002a  2920              CMP      r1,#0x20
00002c  d101              BNE      |L33.50|
;;;2517     {
;;;2518    		tmp=EX_KEY_42KEY;
00002e  20fb              MOVS     r0,#0xfb
000030  e00b              B        |L33.74|
                  |L33.50|
;;;2519     }
;;;2520   	else if((pa1==0x8b)&&(pa2==0x00))
000032  2a8b              CMP      r2,#0x8b
000034  d102              BNE      |L33.60|
000036  b909              CBNZ     r1,|L33.60|
;;;2521     {
;;;2522    		tmp=EX_DEV_SUN;
000038  20e2              MOVS     r0,#0xe2
00003a  e006              B        |L33.74|
                  |L33.60|
;;;2523     }
;;;2524   	else if((pa1==0x8b)&&(pa2==0x20))
00003c  2a8b              CMP      r2,#0x8b
00003e  d103              BNE      |L33.72|
000040  2920              CMP      r1,#0x20
000042  d101              BNE      |L33.72|
;;;2525     {
;;;2526    		tmp=EX_DEV_SUN1;
000044  20e4              MOVS     r0,#0xe4
000046  e000              B        |L33.74|
                  |L33.72|
;;;2527     }
;;;2528   //	else if((pa1==0x79)&&(pa2==0x10))
;;;2529   //  {
;;;2530   // 		tmp=EX_KEY_TURN;
;;;2531   //  }
;;;2532    	else
;;;2533    	{
;;;2534    		tmp=RE_ERR;				//类型不明
000048  20ff              MOVS     r0,#0xff
                  |L33.74|
;;;2535    	}
;;;2536    	
;;;2537    	return tmp;
;;;2538   }
00004a  4770              BX       lr
;;;2539   //============================================================================================================
                          ENDP


                          AREA ||i.IT1_RS485_DataLoad||, CODE, READONLY, ALIGN=1

                  IT1_RS485_DataLoad PROC
;;;2007   //参数2: 命令
;;;2008   void IT1_RS485_DataLoad(uint8_t index,uint8_t cmd,uint8_t dat)
000000  4770              BX       lr
;;;2009   {
;;;2010   	
;;;2011   ////	uint8_t wlrbuf[5];
;;;2012   ////	uint16_t wlrdat;
;;;2013   ////	uint8_t flagload;
;;;2014   ////	
;;;2015   ////	_Frame *ps;
;;;2016   ////	
;;;2017   ////	ps=GetQueue_InQ(&RS485_Queue,index);
;;;2018   ////	//缓冲区溢出
;;;2019   ////	if(ps==NULL)
;;;2020   ////	{
;;;2021   ////		return;
;;;2022   ////	}
;;;2023   ////	
;;;2024   ////	ps->buf[0]=0x04;			//帧控制
;;;2025   ////	ps->buf[1]=(Master_Address>>8)&0x00ff;  //目标地址H
;;;2026   ////	ps->buf[2]=Master_Address;		//目标地址L
;;;2027   ////	ps->buf[3]=0x00;	
;;;2028   ////	ps->buf[4]=Dev.addr[0];
;;;2029   ////	ps->buf[5]=0x80+index+1;		//通道号
;;;2030   ////	
;;;2031   ////	flagload=1;
;;;2032   ////	//装入遥控器上报数据或命令
;;;2033   ////	if((Ex_Table.Exchange[index].type>=EX_DEV_KEY)||(Ex_Table.Exchange[index].type==EX_DEV_WSR)||(Ex_Table.Exchange[index].type==EX_DEV_RAIN))
;;;2034   ////	{
;;;2035   ////				if(cmd==0x1e)cmd=0x08;
;;;2036   ////							
;;;2037   ////				if     (cmd==0x07)dat=1;
;;;2038   ////				else if((cmd==0x08)||(cmd==0xe0))dat=2;
;;;2039   ////				else if(cmd==0x09)dat=3;
;;;2040   ////				else if((cmd==0x21)||(cmd==0x22))dat=4;
;;;2041   ////		    else if(cmd==0x26)dat=5;
;;;2042   ////		    else if(cmd==0x25)dat=6;
;;;2043   ////		    else if(cmd==0x24)dat=7;
;;;2044   ////		    else if(cmd==0x23)dat=8;
;;;2045   ////			
;;;2046   ////		
;;;2047   ////		    //2016.5.10增加通用随时贴
;;;2048   ////				if((Ex_Table.Exchange[index].type==EX_KEY_SCENE)||(Ex_Table.Exchange[index].type==EX_KEY_GENERAL))	//场景随身贴+通用随时贴
;;;2049   ////				{
;;;2050   ////							ps->buf[6]=1;                        	//数据长度
;;;2051   ////							ps->buf[7]=dat;
;;;2052   ////							ps->buf[8]=Crc8CheckSum(ps->buf,8);		//CRC8校验
;;;2053   ////							ps->cnt=9;					//发送总的字节数
;;;2054   ////				}                                       
;;;2055   ////        else if(Ex_Table.Exchange[index].type==EX_KEY_LIGHT)  //灯光随身贴                              
;;;2056   ////        {
;;;2057   ////							ps->buf[6]=2;                         	//数据长度
;;;2058   ////							ps->buf[7]=dat;
;;;2059   ////							if((dat==1)||(dat==3))ps->buf[8]=0x02;
;;;2060   ////							else                  ps->buf[8]=0x01;           
;;;2061   ////							ps->buf[9]=Crc8CheckSum(ps->buf,9);		//CRC8校验
;;;2062   ////    		      ps->cnt=10;					//发送总的字节数
;;;2063   ////        }
;;;2064   ////				else if(Ex_Table.Exchange[index].type==EX_KEY_MOTOR)								//电机随心贴
;;;2065   ////				{
;;;2066   ////							ps->buf[6]=2;                         	//数据长度
;;;2067   ////							ps->buf[7]=dat;
;;;2068   ////							if(dat==1)ps->buf[8]=0x10;
;;;2069   ////							else if(dat==2)ps->buf[8]=0x12;
;;;2070   ////							else if(dat==3)ps->buf[8]=0x11;
;;;2071   ////							else  return;           
;;;2072   ////							ps->buf[9]=Crc8CheckSum(ps->buf,9);		//CRC8校验
;;;2073   ////							ps->cnt=10;					//发送总的字节数
;;;2074   ////				}
;;;2075   ////				//2016.9.7增加风光雨传感器 综合
;;;2076   ////				else if(Ex_Table.Exchange[index].type==EX_DEV_WSR)								//电机随心贴
;;;2077   ////				{
;;;2078   ////							ps->buf[6]=3;                         	//数据长度
;;;2079   ////					    //取得风光雨数据
;;;2080   ////					    wlrdat=(uint16_t)((wbuf[12]<<8)+wbuf[13]);
;;;2081   ////					    Get_WLR_Data(wlrdat,wlrbuf);
;;;2082   ////					    if(wlrbuf[0]<3)
;;;2083   ////							{						
;;;2084   ////									ps->buf[7]=0x01;
;;;2085   ////									ps->buf[8]=0x00;
;;;2086   ////									
;;;2087   ////									ps->buf[9]=wlrbuf[1];
;;;2088   ////									ps->buf[5]=0x30+wlrbuf[0];								//通道号 通道0-风，通道1-光，通道2-雨
;;;2089   ////							
;;;2090   ////									ps->buf[10]=Crc8CheckSum(ps->buf,10);		//CRC8校验
;;;2091   ////									ps->cnt=11;					//发送总的字节数
;;;2092   ////								
;;;2093   ////							}
;;;2094   ////							else
;;;2095   ////							{
;;;2096   ////									flagload=0;
;;;2097   ////							}
;;;2098   ////				}	
;;;2099   ////				//雨量传感器
;;;2100   ////				else if(Ex_Table.Exchange[index].type==EX_DEV_RAIN)
;;;2101   ////				{
;;;2102   ////							ps->buf[6]=3;                         	//数据长度
;;;2103   ////					    //取得风光雨数据
;;;2104   ////					    wlrdat=(uint16_t)((wbuf[12]<<8)+wbuf[13]);
;;;2105   ////					    Get_WLR_Data(wlrdat,wlrbuf);
;;;2106   ////					    if(wlrbuf[0]==0X02)
;;;2107   ////							{						
;;;2108   ////									ps->buf[7]=0x01;
;;;2109   ////									ps->buf[8]=0x00;
;;;2110   ////									
;;;2111   ////									ps->buf[9]=wlrbuf[1];
;;;2112   ////									ps->buf[5]=0x30;								//
;;;2113   ////							
;;;2114   ////									ps->buf[10]=Crc8CheckSum(ps->buf,10);		//CRC8校验
;;;2115   ////									ps->cnt=11;					//发送总的字节数
;;;2116   ////							}
;;;2117   ////							else
;;;2118   ////							{
;;;2119   ////									flagload=0;
;;;2120   ////							}
;;;2121   ////							
;;;2122   ////				}
;;;2123   ////				//默认为场景随身贴
;;;2124   ////				else
;;;2125   ////				{
;;;2126   //////							ps->buf[6]=1;                        	//数据长度
;;;2127   //////							ps->buf[7]=dat;
;;;2128   //////							ps->buf[8]=Crc8CheckSum(ps->buf,8);		//CRC8校验
;;;2129   //////							ps->cnt=9;					//发送总的字节数
;;;2130   ////					
;;;2131   ////								flagload=0;
;;;2132   ////				}
;;;2133   ////				if(flagload==1)
;;;2134   ////				{
;;;2135   ////								ps->flag=1;
;;;2136   ////								ps->resend=4;
;;;2137   ////								ps->rand=0;
;;;2138   ////								ps->ackwait=30;					//等待应答时间最大300mS
;;;2139   ////								EnQueueBuf(&RS485_Queue,index);
;;;2140   ////				}
;;;2141   ////	}
;;;2142   ////	//装入设备主动上报数据
;;;2143   ////	#if 0    //clf mod 20161216只做传感器
;;;2144   ////	else 
;;;2145   ////	{
;;;2146   ////								dat=cmd;
;;;2147   ////								//if(dat>100)dat=100;				//没行程时上报为0xff
;;;2148   ////							  ps->buf[6]=3;
;;;2149   ////	
;;;2150   ////								if(Ex_Table.Exchange[index].type==EX_DEV_LIGHT)	            //灯光上报
;;;2151   ////                {
;;;2152   ////                	if(dat==0x00) ps->buf[7]=0x01;
;;;2153   ////                	else          ps->buf[7]=0x00;
;;;2154   ////                  ps->buf[8]=0x00;
;;;2155   ////                  ps->buf[9]=0x00;
;;;2156   ////                }
;;;2157   ////								//==================================================================
;;;2158   ////								//调光灯上报 add 2016.2.23
;;;2159   ////								else if(Ex_Table.Exchange[index].type==EX_DEV_LIGHT_ADJ)	  //调灯光上报
;;;2160   ////                {
;;;2161   ////									if(dat>100)dat=100;
;;;2162   ////									
;;;2163   ////                	if(dat==0x00)
;;;2164   ////									{										
;;;2165   ////											ps->buf[7]=0x00;									  									
;;;2166   ////											ps->buf[8]=0x00;
;;;2167   ////											ps->buf[9]=0;
;;;2168   ////									}
;;;2169   ////                	else
;;;2170   ////									{									
;;;2171   ////											ps->buf[7]=0x01;
;;;2172   ////										  ps->buf[8]=0x00;
;;;2173   ////											ps->buf[9]=dat;
;;;2174   ////									}	
;;;2175   ////                }
;;;2176   ////								
;;;2177   ////                else if(Ex_Table.Exchange[index].type==EX_DEV_SOCKET)	//智能插座
;;;2178   ////                {
;;;2179   ////                        if(dat==0x00) ps->buf[7]=0x02;
;;;2180   ////                	      else          ps->buf[7]=0x03;
;;;2181   ////                        ps->buf[8]=0x00;
;;;2182   ////                        ps->buf[9]=0x00;
;;;2183   ////                }
;;;2184   ////								//=========================================================================================================
;;;2185   ////                else                                                           //电机主动上报状态
;;;2186   ////                {
;;;2187   ////                        if((Ex_Table.Exchange[index].type==EX_DEV_MOTOR_E)||(Ex_Table.Exchange[index].type==EX_DEV_BLIND_E))
;;;2188   ////                        {
;;;2189   ////																//ID无线868 和 IT485 行程表示相反
;;;2190   ////                                //if(((Ex_Table.Exchange[index].channel&0x80)==0x80)&&(dat<=0x64))
;;;2191   ////																
;;;2192   ////																if(dat>0x64)
;;;2193   ////																{
;;;2194   ////																				 ps->buf[7]=0x12;
;;;2195   ////																				 ps->buf[8]=0x00;
;;;2196   ////																				 ps->buf[9]=0x00;
;;;2197   ////																}
;;;2198   ////																else					//处理行程
;;;2199   ////																{
;;;2200   ////																	       if(Ex_Table.Exchange[index].stu==1)dat=0x64-dat; 
;;;2201   ////																				 ps->buf[7]=0x12;
;;;2202   ////																				 ps->buf[8]=0x00;
;;;2203   ////																				 ps->buf[9]=0x64-dat;
;;;2204   ////						
;;;2205   ////																				 //=========================================
;;;2206   ////																}
;;;2207   ////												
;;;2208   ////                        } 
;;;2209   ////												else if((Ex_Table.Exchange[index].type==EX_DEV_MOTOR_R)||(Ex_Table.Exchange[index].type==EX_DEV_BLIND_R))
;;;2210   ////												{
;;;2211   ////																ps->buf[7]=Ex_Table.stu[index];
;;;2212   ////																ps->buf[8]=0x00;
;;;2213   ////																ps->buf[9]=0x00;
;;;2214   ////												}
;;;2215   ////			
;;;2216   ////               } 
;;;2217   ////							 ps->buf[10]=Crc8CheckSum(ps->buf,10);		//CRC8校验
;;;2218   ////							 ps->cnt=11;					//发送总的字节数
;;;2219   ////							 ps->flag=1;
;;;2220   ////							 ps->resend=4;
;;;2221   ////							 ps->rand=0;
;;;2222   ////							 ps->flag=1;
;;;2223   ////							 ps->ackwait=30;					//等待应答时间最大300mS
;;;2224   ////							 EnQueueBuf(&RS485_Queue,index);     
;;;2225   ////         } 
;;;2226   ////	//=========================================================================================================
;;;2227   ////	#endif  //clf mod 20161216只做传感器转发器
;;;2228                                     
;;;2229   }
;;;2230   
                          ENDP


                          AREA ||i.IT1_RS485_Report||, CODE, READONLY, ALIGN=2

                  IT1_RS485_Report PROC
;;;2277   //参数2: 命令
;;;2278   void IT1_RS485_Report(uint8_t index)
000000  b570              PUSH     {r4-r6,lr}
;;;2279   {	
000002  4605              MOV      r5,r0
;;;2280    		_Frame *ps;
;;;2281    		
;;;2282    		ps=GetQueue_InQ(&RS485_Queue,index);
000004  4629              MOV      r1,r5
000006  482c              LDR      r0,|L35.184|
000008  f7fffffe          BL       GetQueue_InQ
00000c  4604              MOV      r4,r0
;;;2283    		//缓冲区溢出
;;;2284    		if(ps==NULL)
00000e  b904              CBNZ     r4,|L35.18|
                  |L35.16|
;;;2285    		{
;;;2286    			return;
;;;2287    		}
;;;2288    		
;;;2289    		ps->buf[0]=0x04;			//帧控制
;;;2290    		ps->buf[1]=(Master_Address>>8)&0x00ff;  //目标地址H
;;;2291    		ps->buf[2]=Master_Address;		//目标地址L
;;;2292    		ps->buf[3]=0x00;	
;;;2293    		ps->buf[4]=Dev.addr[0];
;;;2294    		ps->buf[5]=0x80+index+1;		//通道号
;;;2295    		
;;;2296    		//装入遥控器上报数据或命令
;;;2297    		if((Ex_Table.Exchange[index].type==EX_DEV_LIGHT)||(Ex_Table.Exchange[index].type==EX_DEV_SOCKET))
;;;2298    		{
;;;2299    				ps->buf[6]=1;		
;;;2300    				ps->buf[7]=Ex_Table.stu[index];
;;;2301    				ps->buf[8]=Crc8CheckSum(ps->buf,8);		//CRC8校验
;;;2302    				ps->cnt=9;					                 //发送总的字节数
;;;2303    		}
;;;2304    		else if(Ex_Table.Exchange[index].type==EX_DEV_MOTOR_R)
;;;2305    		{
;;;2306    				ps->buf[6]=3;		
;;;2307    				ps->buf[7]=Ex_Table.stu[index];
;;;2308    				ps->buf[8]=0x00;										 //
;;;2309    				ps->buf[9]=0x00;
;;;2310    				ps->buf[10]=Crc8CheckSum(ps->buf,10);		//CRC8校验
;;;2311    				ps->cnt=11;					                 //发送总的字节数
;;;2312    		}
;;;2313    		else
;;;2314    		{
;;;2315    			  return;
;;;2316    		}
;;;2317    		ps->flag=1;
;;;2318    		ps->resend=4;
;;;2319    		//ps->rand=100;
;;;2320    		ps->ackwait=30;					//等待应答时间最大300mS
;;;2321    		EnQueueBuf(&RS485_Queue,index);
;;;2322   	
;;;2323   	}
000010  bd70              POP      {r4-r6,pc}
                  |L35.18|
000012  2004              MOVS     r0,#4                 ;2289
000014  7020              STRB     r0,[r4,#0]            ;2289
000016  2000              MOVS     r0,#0                 ;2290
000018  7060              STRB     r0,[r4,#1]            ;2290
00001a  70a0              STRB     r0,[r4,#2]            ;2291
00001c  70e0              STRB     r0,[r4,#3]            ;2292
00001e  4827              LDR      r0,|L35.188|
000020  7880              LDRB     r0,[r0,#2]            ;2293  ; Dev
000022  7120              STRB     r0,[r4,#4]            ;2293
000024  f1050081          ADD      r0,r5,#0x81           ;2294
000028  7160              STRB     r0,[r4,#5]            ;2294
00002a  ebc501c5          RSB      r1,r5,r5,LSL #3       ;2297
00002e  4824              LDR      r0,|L35.192|
000030  f8100011          LDRB     r0,[r0,r1,LSL #1]     ;2297
000034  2831              CMP      r0,#0x31              ;2297
000036  d006              BEQ      |L35.70|
000038  ebc501c5          RSB      r1,r5,r5,LSL #3       ;2297
00003c  4820              LDR      r0,|L35.192|
00003e  f8100011          LDRB     r0,[r0,r1,LSL #1]     ;2297
000042  2821              CMP      r0,#0x21              ;2297
000044  d10e              BNE      |L35.100|
                  |L35.70|
000046  2001              MOVS     r0,#1                 ;2299
000048  71a0              STRB     r0,[r4,#6]            ;2299
00004a  481d              LDR      r0,|L35.192|
00004c  3810              SUBS     r0,r0,#0x10           ;2300
00004e  5d40              LDRB     r0,[r0,r5]            ;2300
000050  71e0              STRB     r0,[r4,#7]            ;2300
000052  2108              MOVS     r1,#8                 ;2301
000054  4620              MOV      r0,r4                 ;2301
000056  f7fffffe          BL       Crc8CheckSum
00005a  7220              STRB     r0,[r4,#8]            ;2301
00005c  2009              MOVS     r0,#9                 ;2302
00005e  f88400c8          STRB     r0,[r4,#0xc8]         ;2302
000062  e019              B        |L35.152|
                  |L35.100|
000064  ebc501c5          RSB      r1,r5,r5,LSL #3       ;2304
000068  4815              LDR      r0,|L35.192|
00006a  f8100011          LDRB     r0,[r0,r1,LSL #1]     ;2304
00006e  2802              CMP      r0,#2                 ;2304
000070  d111              BNE      |L35.150|
000072  2003              MOVS     r0,#3                 ;2306
000074  71a0              STRB     r0,[r4,#6]            ;2306
000076  4812              LDR      r0,|L35.192|
000078  3810              SUBS     r0,r0,#0x10           ;2307
00007a  5d40              LDRB     r0,[r0,r5]            ;2307
00007c  71e0              STRB     r0,[r4,#7]            ;2307
00007e  2000              MOVS     r0,#0                 ;2308
000080  7220              STRB     r0,[r4,#8]            ;2308
000082  7260              STRB     r0,[r4,#9]            ;2309
000084  210a              MOVS     r1,#0xa               ;2310
000086  4620              MOV      r0,r4                 ;2310
000088  f7fffffe          BL       Crc8CheckSum
00008c  72a0              STRB     r0,[r4,#0xa]          ;2310
00008e  200b              MOVS     r0,#0xb               ;2311
000090  f88400c8          STRB     r0,[r4,#0xc8]         ;2311
000094  e000              B        |L35.152|
                  |L35.150|
000096  e7bb              B        |L35.16|
                  |L35.152|
000098  2001              MOVS     r0,#1                 ;2317
00009a  f8040fc9          STRB     r0,[r4,#0xc9]!        ;2317
00009e  2004              MOVS     r0,#4                 ;2318
0000a0  7060              STRB     r0,[r4,#1]            ;2318
0000a2  201e              MOVS     r0,#0x1e              ;2320
0000a4  7120              STRB     r0,[r4,#4]            ;2320
0000a6  f1a404c9          SUB      r4,r4,#0xc9           ;2320
0000aa  4629              MOV      r1,r5                 ;2321
0000ac  4802              LDR      r0,|L35.184|
0000ae  f7fffffe          BL       EnQueueBuf
0000b2  bf00              NOP      
0000b4  e7ac              B        |L35.16|
;;;2324   	
                          ENDP

0000b6  0000              DCW      0x0000
                  |L35.184|
                          DCD      RS485_Queue
                  |L35.188|
                          DCD      ||Dev||
                  |L35.192|
                          DCD      Ex_Table+0x36

                          AREA ||i.IT1_RS485_StuLoad||, CODE, READONLY, ALIGN=2

                  IT1_RS485_StuLoad PROC
;;;2235   //状态上报
;;;2236   void IT1_RS485_StuLoad(uint8_t index,uint8_t len,uint8_t *pdat)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2237   {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
;;;2238   	
;;;2239   				_Frame *ps;
;;;2240   	      uint8_t i;
;;;2241   				
;;;2242   				ps=GetQueue_InQ(&RS485_Queue,index);
00000a  4639              MOV      r1,r7
00000c  481c              LDR      r0,|L36.128|
00000e  f7fffffe          BL       GetQueue_InQ
000012  4604              MOV      r4,r0
;;;2243   				//缓冲区溢出
;;;2244   				if(ps==NULL)
000014  b90c              CBNZ     r4,|L36.26|
                  |L36.22|
;;;2245   				{
;;;2246   					return;
;;;2247   				}
;;;2248   				
;;;2249   				ps->buf[0]=0x04;			//帧控制
;;;2250   				ps->buf[1]=(Master_Address>>8)&0x00ff;  //目标地址H
;;;2251   				ps->buf[2]=Master_Address;		//目标地址L
;;;2252   				ps->buf[3]=0x00;	
;;;2253   				ps->buf[4]=Dev.addr[0];
;;;2254   				ps->buf[5]=0x10;//0x80+index+1;		//通道号
;;;2255   				
;;;2256   
;;;2257   				ps->buf[6]=len;                        	   //数据长度
;;;2258   				if(len>3)len=3;
;;;2259   				for(i=0;i<len;i++)ps->buf[7+i]=*(pdat+i);
;;;2260   
;;;2261   				ps->buf[7+len]=Crc8CheckSum(ps->buf,7+len);		//CRC8校验
;;;2262   				ps->cnt=8+len;					//发送总的字节数
;;;2263   
;;;2264   
;;;2265   				ps->flag=1;
;;;2266   				ps->resend=4;
;;;2267   				ps->rand=0;
;;;2268   				ps->ackwait=30;					//等待应答时间最大300mS
;;;2269   				EnQueueBuf(&RS485_Queue,index);
;;;2270   }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L36.26|
00001a  2004              MOVS     r0,#4                 ;2249
00001c  7020              STRB     r0,[r4,#0]            ;2249
00001e  2000              MOVS     r0,#0                 ;2250
000020  7060              STRB     r0,[r4,#1]            ;2250
000022  70a0              STRB     r0,[r4,#2]            ;2251
000024  70e0              STRB     r0,[r4,#3]            ;2252
000026  4817              LDR      r0,|L36.132|
000028  7880              LDRB     r0,[r0,#2]            ;2253  ; Dev
00002a  7120              STRB     r0,[r4,#4]            ;2253
00002c  2010              MOVS     r0,#0x10              ;2254
00002e  7160              STRB     r0,[r4,#5]            ;2254
000030  71a5              STRB     r5,[r4,#6]            ;2257
000032  2d03              CMP      r5,#3                 ;2258
000034  dd00              BLE      |L36.56|
000036  2503              MOVS     r5,#3                 ;2258
                  |L36.56|
000038  2600              MOVS     r6,#0                 ;2259
00003a  e005              B        |L36.72|
                  |L36.60|
00003c  f8181006          LDRB     r1,[r8,r6]            ;2259
000040  1df0              ADDS     r0,r6,#7              ;2259
000042  5421              STRB     r1,[r4,r0]            ;2259
000044  1c70              ADDS     r0,r6,#1              ;2259
000046  b2c6              UXTB     r6,r0                 ;2259
                  |L36.72|
000048  42ae              CMP      r6,r5                 ;2259
00004a  dbf7              BLT      |L36.60|
00004c  1de8              ADDS     r0,r5,#7              ;2261
00004e  b2c1              UXTB     r1,r0                 ;2261
000050  4620              MOV      r0,r4                 ;2261
000052  f7fffffe          BL       Crc8CheckSum
000056  1de9              ADDS     r1,r5,#7              ;2261
000058  5460              STRB     r0,[r4,r1]            ;2261
00005a  1c48              ADDS     r0,r1,#1              ;2262
00005c  f8040fc8          STRB     r0,[r4,#0xc8]!        ;2262
000060  2001              MOVS     r0,#1                 ;2265
000062  7060              STRB     r0,[r4,#1]            ;2265
000064  2004              MOVS     r0,#4                 ;2266
000066  70a0              STRB     r0,[r4,#2]            ;2266
000068  2000              MOVS     r0,#0                 ;2267
00006a  7120              STRB     r0,[r4,#4]            ;2267
00006c  201e              MOVS     r0,#0x1e              ;2268
00006e  7160              STRB     r0,[r4,#5]            ;2268
000070  f1a404c8          SUB      r4,r4,#0xc8           ;2268
000074  4639              MOV      r1,r7                 ;2269
000076  4802              LDR      r0,|L36.128|
000078  f7fffffe          BL       EnQueueBuf
00007c  bf00              NOP      
00007e  e7ca              B        |L36.22|
;;;2271   				
                          ENDP

                  |L36.128|
                          DCD      RS485_Queue
                  |L36.132|
                          DCD      ||Dev||

                          AREA ||i.IT1_SendData||, CODE, READONLY, ALIGN=2

                  IT1_SendData PROC
;;;310    //发送函数，内部采用总线竞争方式
;;;311    void IT1_SendData(void)
000000  b570              PUSH     {r4-r6,lr}
;;;312    {
;;;313    	static uint8_t send_step=0,index=0;														 //发送阶段
;;;314    	static uint8_t t_buf[200],t_cnt,t_resend,t_offline;
;;;315    	
;;;316    	_Frame *ps;
;;;317    	
;;;318    	uint8_t i,ret;
;;;319    	
;;;320      //=========================================================================================	
;;;321    	if(send_step==0)																								//还未进入发送状态
000002  48a8              LDR      r0,|L37.676|
000004  7800              LDRB     r0,[r0,#0]  ; send_step
000006  2800              CMP      r0,#0
000008  d151              BNE      |L37.174|
;;;322    	{
;;;323    		if(Bus.distime>0)				//总线竞争				
00000a  48a7              LDR      r0,|L37.680|
00000c  88c0              LDRH     r0,[r0,#6]  ; Bus
00000e  2800              CMP      r0,#0
000010  dd00              BLE      |L37.20|
                  |L37.18|
;;;324    		{
;;;325    					return;												
;;;326    		}
;;;327    		else
;;;328    		{
;;;329    					ps=GetQueue_OutQ(&RS485_Queue,&index);											//优先发送
;;;330    					if(ps!=0)
;;;331    					{     
;;;332    
;;;333    									if(ps->flag==1)
;;;334    									{
;;;335    													t_cnt=ps->cnt;
;;;336    													t_resend=ps->resend;
;;;337    										      t_offline=ps->offline;
;;;338    													for(i=0;i<t_cnt;i++)
;;;339    													{
;;;340    																t_buf[i]=ps->buf[i];
;;;341    																ps->buf[i]=0;
;;;342    													}					
;;;343    													send_step=1;															//有数据要发送		
;;;344    
;;;345    													Bus.randtime=GetRandTime();								//随机时间为40mmS+rand%40	
;;;346    													Bus.WaitForSend=1;
;;;347    													Bus.SelfSend=1;
;;;348    													Bus.timeout=0;
;;;349    													Bus.time=0;
;;;350    																				
;;;351    									
;;;352    									}
;;;353    									else
;;;354    									{
;;;355    										      t_cnt=0;
;;;356    										      send_step=0;
;;;357    									}
;;;358    									ps->resend=0;
;;;359    									ps->cnt=0;
;;;360    									ps->flag=0;
;;;361    									DeQueueBuf(&RS485_Queue,index);//清队列
;;;362    					}
;;;363    					else     
;;;364    					{
;;;365    									send_step=0;															//有数据要发送		
;;;366    									Bus.WaitForSend=0;
;;;367    									Bus.SelfSend=0;
;;;368    									return;
;;;369    					}
;;;370    		}		    
;;;371    	}
;;;372    	//================================================================================================
;;;373    	else if(send_step==1)					//有数据要发送
;;;374    	{				
;;;375    				//判断总线是否空闲
;;;376    				if((Bus.WaitForSend==1)&&(Bus.time>=Bus.randtime))
;;;377    				{
;;;378    									Bus.SelfSend=1;
;;;379    									Bus.WaitForSend=0;
;;;380    									RS485_Send(t_buf,t_cnt);									
;;;381    									send_step=2;
;;;382    									Bus.timeout=0;				//超时累计
;;;383    					        Bus.rxok=0;
;;;384    					        Bus.interval=0;
;;;385    				}
;;;386    			  else
;;;387    				{
;;;388    // 									if(timeout>3000)
;;;389    // 									{
;;;390    // 												Bus.SelfSend=1;
;;;391    // 												Bus.WaitForSend=0;
;;;392    // 												RS485_Send(t_buf,t_cnt);
;;;393    // 												send_step=2;
;;;394    // 												timeout=0;				//超时累计
;;;395    // 									}
;;;396    				}
;;;397    	}
;;;398    	//================================================================================================
;;;399    	else if(send_step==2)																	//等待收到自己发出的数据
;;;400    	{	
;;;401    				//==================================
;;;402    				if(Bus.rxok==1)
;;;403    				{				
;;;404    								Bus.rxok=0;
;;;405    								ret=Check_SelfSend(&t_buf[0],t_cnt);
;;;406    					
;;;407    								if(ret==0)															//自发自收 校对错
;;;408    								{
;;;409    											if(t_resend>0)
;;;410    											{
;;;411    												    t_resend--;
;;;412    														send_step=1;
;;;413    														Bus.randtime=GetRandTime();	//随机时间为40mmS+rand%40	
;;;414    														Bus.WaitForSend=1;
;;;415    												    Bus.time=0;
;;;416    														Bus.timeout=0;
;;;417    											}
;;;418    											else
;;;419    											{
;;;420    														send_step=0;
;;;421    											}
;;;422    								}
;;;423    								else if(ret==1)		//自发自收通过
;;;424    								{
;;;425    											send_step=3;
;;;426    											Bus.timeout=0;
;;;427    								}
;;;428    								//以下情况出现在自发自收和对方应答粘合在一起
;;;429    								else if(ret==2)
;;;430    								{
;;;431    											send_step=3;
;;;432    											Bus.timeout=0;
;;;433    								}
;;;434    				}
;;;435    				//==================================
;;;436    				//超时处理
;;;437    				if(Bus.timeout>=100)				//超过100mS，没收到自己发出的数据
;;;438    				{
;;;439    								    if(t_resend>0)
;;;440    								{
;;;441    											t_resend--;
;;;442    											send_step=1;
;;;443    											Bus.randtime=GetRandTime();	//随机时间为40mmS+rand%40	
;;;444    											Bus.WaitForSend=1;
;;;445    									    Bus.time=0;
;;;446    											Bus.timeout=0;
;;;447    								}
;;;448    								else
;;;449    								{
;;;450    											send_step=0;
;;;451    								}			
;;;452    				}
;;;453    	 }
;;;454    	 //================================================================================================
;;;455    	 else if(send_step==3)					//等待收到应答数据
;;;456    	 {
;;;457    				//===================================================================
;;;458    				if(Bus.rxok==1)
;;;459    				{
;;;460    							 Bus.rxok=0;
;;;461    
;;;462    							 ret=IT1_PraseASK();
;;;463    		
;;;464    							 if(ret==0)				//有错误
;;;465    							 {				
;;;466    											if(t_resend>0)	
;;;467    											{
;;;468    														t_resend--;
;;;469    														send_step=1;
;;;470    														Bus.randtime=GetRandTime();	//随机时间为40mmS+rand%40	
;;;471    														Bus.WaitForSend=1;
;;;472    														Bus.timeout=0;
;;;473    												    Bus.time=0;
;;;474    											}
;;;475    											else
;;;476    											{
;;;477    														send_step=0;
;;;478    											}
;;;479    								}
;;;480    								else 					//成功收到应答信号
;;;481    								{
;;;482    											send_step=4;
;;;483    											Bus.timeout=0;
;;;484    								}
;;;485    				}
;;;486    				//===================================================================
;;;487    				//应答超时
;;;488    				if(Bus.timeout>=150)				//超过100mS，没收到自己发出的数据
;;;489    				{
;;;490    								if(t_resend>0)
;;;491    								{
;;;492    										    t_resend--;
;;;493    									  	   send_step=1;
;;;494    									      Bus.randtime=GetRandTime();	//随机时间为40mmS+rand%40	
;;;495    												Bus.WaitForSend=1;
;;;496    												Bus.timeout=0;
;;;497    									      Bus.time=0;
;;;498    								}	
;;;499    								else
;;;500    								{
;;;501    												send_step=0;			//退出
;;;502    									      //离线处理
;;;503    									      if(t_offline==1)
;;;504    												{
;;;505    													      t_offline=0; 
;;;506    													      //IT2_Offline_DataLoad(index);
;;;507    												}
;;;508    								}
;;;509    				}
;;;510    	 }	
;;;511    	 //====================================================================================================
;;;512    	 else if(send_step==4)					//收到应答数据
;;;513    	 {
;;;514    				//==================================================
;;;515    				//运行到这里，表示应答正确
;;;516    				//如果是开放485协议，Dev.stu状躺系绗直接为正常NORMAL，如果是IT1协议，Dev.stu状态上电后直接为REGISTER
;;;517    				//如果是地址申请
;;;518    				//if(Dev.stu==DEV_REQUESTADDR)
;;;519    // 		    if(m_cmd==F_ASK_CONFIG_ADDR)&&(RxDat.buf[1]==F_ACK_REQUEST_ADDR)								//请求地址
;;;520    // 				{
;;;521    // 					   
;;;522    // 						 Dev.stu=DEV_REGISTER;
;;;523    // 						 Dev.addr[0]=RxDat.buf[14];
;;;524    // 				}				
;;;525    // 				//如果是注册上报
;;;526    // 				else if(Dev.stu==DEV_REGISTER)
;;;527    // 				else if(m_cmd==F_REPORT_ONLINE)							//上线上报
;;;528    // 				{
;;;529    // 						 Dev.stu=DEV_NORMAL;
;;;530    // 				}
;;;531    // 				//对码状态
;;;532    // 				else if(Dev.stu>DEV_NORMAL)
;;;533    // 				{
;;;534    
;;;535    // 				}
;;;536    // 				//正常数据上报,不处理
;;;537    // 				else
;;;538    // 				{
;;;539    // 					
;;;540    // 				}
;;;541    				//====================================================
;;;542    				send_step=0;
;;;543    				for(i=0;i<t_cnt;i++)
;;;544    				{
;;;545    						t_buf[i]=0;
;;;546    				}
;;;547    				t_cnt=0;
;;;548    				t_resend=0;
;;;549    				for(i=0;i<RxDat.cnt;i++)
;;;550    				{
;;;551    						RxDat.buf[i]=0;
;;;552    				}
;;;553    				RxDat.cnt=0;
;;;554    				
;;;555    				Bus.SelfSend=0;
;;;556    	 }
;;;557    	
;;;558    }
000012  bd70              POP      {r4-r6,pc}
                  |L37.20|
000014  49a5              LDR      r1,|L37.684|
000016  48a6              LDR      r0,|L37.688|
000018  f7fffffe          BL       GetQueue_OutQ
00001c  4605              MOV      r5,r0                 ;329
00001e  2d00              CMP      r5,#0                 ;330
000020  d03e              BEQ      |L37.160|
000022  f89500c9          LDRB     r0,[r5,#0xc9]         ;333
000026  2801              CMP      r0,#1                 ;333
000028  d127              BNE      |L37.122|
00002a  f8150fc8          LDRB     r0,[r5,#0xc8]!        ;335
00002e  49a1              LDR      r1,|L37.692|
000030  7008              STRB     r0,[r1,#0]            ;335
000032  78a8              LDRB     r0,[r5,#2]            ;336
000034  49a0              LDR      r1,|L37.696|
000036  7008              STRB     r0,[r1,#0]            ;336
000038  78e8              LDRB     r0,[r5,#3]            ;337
00003a  f1a505c8          SUB      r5,r5,#0xc8           ;337
00003e  499f              LDR      r1,|L37.700|
000040  7008              STRB     r0,[r1,#0]            ;337
000042  f04f0400          MOV      r4,#0                 ;338
000046  e006              B        |L37.86|
                  |L37.72|
000048  5d28              LDRB     r0,[r5,r4]            ;340
00004a  499d              LDR      r1,|L37.704|
00004c  5508              STRB     r0,[r1,r4]            ;340
00004e  2000              MOVS     r0,#0                 ;341
000050  5528              STRB     r0,[r5,r4]            ;341
000052  1c60              ADDS     r0,r4,#1              ;338
000054  b2c4              UXTB     r4,r0                 ;338
                  |L37.86|
000056  4897              LDR      r0,|L37.692|
000058  7800              LDRB     r0,[r0,#0]            ;338  ; t_cnt
00005a  4284              CMP      r4,r0                 ;338
00005c  dbf4              BLT      |L37.72|
00005e  2001              MOVS     r0,#1                 ;343
000060  4990              LDR      r1,|L37.676|
000062  7008              STRB     r0,[r1,#0]            ;343
000064  f7fffffe          BL       GetRandTime
000068  498f              LDR      r1,|L37.680|
00006a  7108              STRB     r0,[r1,#4]            ;345
00006c  2001              MOVS     r0,#1                 ;346
00006e  7008              STRB     r0,[r1,#0]            ;346
000070  7048              STRB     r0,[r1,#1]            ;347
000072  2000              MOVS     r0,#0                 ;348
000074  7248              STRB     r0,[r1,#9]            ;348
000076  7088              STRB     r0,[r1,#2]            ;349
000078  e004              B        |L37.132|
                  |L37.122|
00007a  2000              MOVS     r0,#0                 ;355
00007c  498d              LDR      r1,|L37.692|
00007e  7008              STRB     r0,[r1,#0]            ;355
000080  4988              LDR      r1,|L37.676|
000082  7008              STRB     r0,[r1,#0]            ;356
                  |L37.132|
000084  2000              MOVS     r0,#0                 ;358
000086  f10505c8          ADD      r5,r5,#0xc8           ;358
00008a  70a8              STRB     r0,[r5,#2]            ;358
00008c  7028              STRB     r0,[r5,#0]            ;359
00008e  7068              STRB     r0,[r5,#1]            ;360
000090  f1a505c8          SUB      r5,r5,#0xc8           ;360
000094  4885              LDR      r0,|L37.684|
000096  7801              LDRB     r1,[r0,#0]            ;361  ; index
000098  4885              LDR      r0,|L37.688|
00009a  f7fffffe          BL       DeQueueBuf
                  |L37.158|
00009e  e0ff              B        |L37.672|
                  |L37.160|
0000a0  2000              MOVS     r0,#0                 ;365
0000a2  4980              LDR      r1,|L37.676|
0000a4  7008              STRB     r0,[r1,#0]            ;365
0000a6  4980              LDR      r1,|L37.680|
0000a8  7008              STRB     r0,[r1,#0]            ;366
0000aa  7048              STRB     r0,[r1,#1]            ;367
0000ac  e7b1              B        |L37.18|
                  |L37.174|
0000ae  487d              LDR      r0,|L37.676|
0000b0  7800              LDRB     r0,[r0,#0]            ;373  ; send_step
0000b2  2801              CMP      r0,#1                 ;373
0000b4  d11c              BNE      |L37.240|
0000b6  487c              LDR      r0,|L37.680|
0000b8  7800              LDRB     r0,[r0,#0]            ;376  ; Bus
0000ba  2801              CMP      r0,#1                 ;376
0000bc  d1ef              BNE      |L37.158|
0000be  487a              LDR      r0,|L37.680|
0000c0  7880              LDRB     r0,[r0,#2]            ;376  ; Bus
0000c2  4979              LDR      r1,|L37.680|
0000c4  7909              LDRB     r1,[r1,#4]            ;376  ; Bus
0000c6  4288              CMP      r0,r1                 ;376
0000c8  dbe9              BLT      |L37.158|
0000ca  2001              MOVS     r0,#1                 ;378
0000cc  4976              LDR      r1,|L37.680|
0000ce  7048              STRB     r0,[r1,#1]            ;378
0000d0  2000              MOVS     r0,#0                 ;379
0000d2  7008              STRB     r0,[r1,#0]            ;379
0000d4  4877              LDR      r0,|L37.692|
0000d6  7801              LDRB     r1,[r0,#0]            ;380  ; t_cnt
0000d8  4879              LDR      r0,|L37.704|
0000da  f7fffffe          BL       RS485_Send
0000de  2002              MOVS     r0,#2                 ;381
0000e0  4970              LDR      r1,|L37.676|
0000e2  7008              STRB     r0,[r1,#0]            ;381
0000e4  2000              MOVS     r0,#0                 ;382
0000e6  4970              LDR      r1,|L37.680|
0000e8  7248              STRB     r0,[r1,#9]            ;382
0000ea  7208              STRB     r0,[r1,#8]            ;383
0000ec  70c8              STRB     r0,[r1,#3]            ;384
0000ee  e0d7              B        |L37.672|
                  |L37.240|
0000f0  486c              LDR      r0,|L37.676|
0000f2  7800              LDRB     r0,[r0,#0]            ;399  ; send_step
0000f4  2802              CMP      r0,#2                 ;399
0000f6  d156              BNE      |L37.422|
0000f8  486b              LDR      r0,|L37.680|
0000fa  7a00              LDRB     r0,[r0,#8]            ;402  ; Bus
0000fc  2801              CMP      r0,#1                 ;402
0000fe  d134              BNE      |L37.362|
000100  2000              MOVS     r0,#0                 ;404
000102  4969              LDR      r1,|L37.680|
000104  7208              STRB     r0,[r1,#8]            ;404
000106  486b              LDR      r0,|L37.692|
000108  7801              LDRB     r1,[r0,#0]            ;405  ; t_cnt
00010a  486d              LDR      r0,|L37.704|
00010c  f7fffffe          BL       Check_SelfSend
000110  4606              MOV      r6,r0                 ;405
000112  b9ce              CBNZ     r6,|L37.328|
000114  4868              LDR      r0,|L37.696|
000116  7800              LDRB     r0,[r0,#0]            ;409  ; t_resend
000118  2800              CMP      r0,#0                 ;409
00011a  dd11              BLE      |L37.320|
00011c  4866              LDR      r0,|L37.696|
00011e  7800              LDRB     r0,[r0,#0]            ;411  ; t_resend
000120  1e40              SUBS     r0,r0,#1              ;411
000122  4965              LDR      r1,|L37.696|
000124  7008              STRB     r0,[r1,#0]            ;411
000126  2001              MOVS     r0,#1                 ;412
000128  495e              LDR      r1,|L37.676|
00012a  7008              STRB     r0,[r1,#0]            ;412
00012c  f7fffffe          BL       GetRandTime
000130  495d              LDR      r1,|L37.680|
000132  7108              STRB     r0,[r1,#4]            ;413
000134  2001              MOVS     r0,#1                 ;414
000136  7008              STRB     r0,[r1,#0]            ;414
000138  2000              MOVS     r0,#0                 ;415
00013a  7088              STRB     r0,[r1,#2]            ;415
00013c  7248              STRB     r0,[r1,#9]            ;416
00013e  e014              B        |L37.362|
                  |L37.320|
000140  2000              MOVS     r0,#0                 ;420
000142  4958              LDR      r1,|L37.676|
000144  7008              STRB     r0,[r1,#0]            ;420
000146  e010              B        |L37.362|
                  |L37.328|
000148  2e01              CMP      r6,#1                 ;423
00014a  d106              BNE      |L37.346|
00014c  2003              MOVS     r0,#3                 ;425
00014e  4955              LDR      r1,|L37.676|
000150  7008              STRB     r0,[r1,#0]            ;425
000152  2000              MOVS     r0,#0                 ;426
000154  4954              LDR      r1,|L37.680|
000156  7248              STRB     r0,[r1,#9]            ;426
000158  e007              B        |L37.362|
                  |L37.346|
00015a  2e02              CMP      r6,#2                 ;429
00015c  d105              BNE      |L37.362|
00015e  2003              MOVS     r0,#3                 ;431
000160  4950              LDR      r1,|L37.676|
000162  7008              STRB     r0,[r1,#0]            ;431
000164  2000              MOVS     r0,#0                 ;432
000166  4950              LDR      r1,|L37.680|
000168  7248              STRB     r0,[r1,#9]            ;432
                  |L37.362|
00016a  484f              LDR      r0,|L37.680|
00016c  7a40              LDRB     r0,[r0,#9]            ;437  ; Bus
00016e  2864              CMP      r0,#0x64              ;437
000170  db95              BLT      |L37.158|
000172  4851              LDR      r0,|L37.696|
000174  7800              LDRB     r0,[r0,#0]            ;439  ; t_resend
000176  2800              CMP      r0,#0                 ;439
000178  dd11              BLE      |L37.414|
00017a  484f              LDR      r0,|L37.696|
00017c  7800              LDRB     r0,[r0,#0]            ;441  ; t_resend
00017e  1e40              SUBS     r0,r0,#1              ;441
000180  494d              LDR      r1,|L37.696|
000182  7008              STRB     r0,[r1,#0]            ;441
000184  2001              MOVS     r0,#1                 ;442
000186  4947              LDR      r1,|L37.676|
000188  7008              STRB     r0,[r1,#0]            ;442
00018a  f7fffffe          BL       GetRandTime
00018e  4946              LDR      r1,|L37.680|
000190  7108              STRB     r0,[r1,#4]            ;443
000192  2001              MOVS     r0,#1                 ;444
000194  7008              STRB     r0,[r1,#0]            ;444
000196  2000              MOVS     r0,#0                 ;445
000198  7088              STRB     r0,[r1,#2]            ;445
00019a  7248              STRB     r0,[r1,#9]            ;446
00019c  e080              B        |L37.672|
                  |L37.414|
00019e  2000              MOVS     r0,#0                 ;450
0001a0  4940              LDR      r1,|L37.676|
0001a2  7008              STRB     r0,[r1,#0]            ;450
0001a4  e07c              B        |L37.672|
                  |L37.422|
0001a6  483f              LDR      r0,|L37.676|
0001a8  7800              LDRB     r0,[r0,#0]            ;455  ; send_step
0001aa  2803              CMP      r0,#3                 ;455
0001ac  d14f              BNE      |L37.590|
0001ae  483e              LDR      r0,|L37.680|
0001b0  7a00              LDRB     r0,[r0,#8]            ;458  ; Bus
0001b2  2801              CMP      r0,#1                 ;458
0001b4  d126              BNE      |L37.516|
0001b6  2000              MOVS     r0,#0                 ;460
0001b8  493b              LDR      r1,|L37.680|
0001ba  7208              STRB     r0,[r1,#8]            ;460
0001bc  f7fffffe          BL       IT1_PraseASK
0001c0  4606              MOV      r6,r0                 ;462
0001c2  b9ce              CBNZ     r6,|L37.504|
0001c4  483c              LDR      r0,|L37.696|
0001c6  7800              LDRB     r0,[r0,#0]            ;466  ; t_resend
0001c8  2800              CMP      r0,#0                 ;466
0001ca  dd11              BLE      |L37.496|
0001cc  483a              LDR      r0,|L37.696|
0001ce  7800              LDRB     r0,[r0,#0]            ;468  ; t_resend
0001d0  1e40              SUBS     r0,r0,#1              ;468
0001d2  4939              LDR      r1,|L37.696|
0001d4  7008              STRB     r0,[r1,#0]            ;468
0001d6  2001              MOVS     r0,#1                 ;469
0001d8  4932              LDR      r1,|L37.676|
0001da  7008              STRB     r0,[r1,#0]            ;469
0001dc  f7fffffe          BL       GetRandTime
0001e0  4931              LDR      r1,|L37.680|
0001e2  7108              STRB     r0,[r1,#4]            ;470
0001e4  2001              MOVS     r0,#1                 ;471
0001e6  7008              STRB     r0,[r1,#0]            ;471
0001e8  2000              MOVS     r0,#0                 ;472
0001ea  7248              STRB     r0,[r1,#9]            ;472
0001ec  7088              STRB     r0,[r1,#2]            ;473
0001ee  e009              B        |L37.516|
                  |L37.496|
0001f0  2000              MOVS     r0,#0                 ;477
0001f2  492c              LDR      r1,|L37.676|
0001f4  7008              STRB     r0,[r1,#0]            ;477
0001f6  e005              B        |L37.516|
                  |L37.504|
0001f8  2004              MOVS     r0,#4                 ;482
0001fa  492a              LDR      r1,|L37.676|
0001fc  7008              STRB     r0,[r1,#0]            ;482
0001fe  2000              MOVS     r0,#0                 ;483
000200  4929              LDR      r1,|L37.680|
000202  7248              STRB     r0,[r1,#9]            ;483
                  |L37.516|
000204  4828              LDR      r0,|L37.680|
000206  7a40              LDRB     r0,[r0,#9]            ;488  ; Bus
000208  2896              CMP      r0,#0x96              ;488
00020a  db49              BLT      |L37.672|
00020c  482a              LDR      r0,|L37.696|
00020e  7800              LDRB     r0,[r0,#0]            ;490  ; t_resend
000210  2800              CMP      r0,#0                 ;490
000212  dd11              BLE      |L37.568|
000214  4828              LDR      r0,|L37.696|
000216  7800              LDRB     r0,[r0,#0]            ;492  ; t_resend
000218  1e40              SUBS     r0,r0,#1              ;492
00021a  4927              LDR      r1,|L37.696|
00021c  7008              STRB     r0,[r1,#0]            ;492
00021e  2001              MOVS     r0,#1                 ;493
000220  4920              LDR      r1,|L37.676|
000222  7008              STRB     r0,[r1,#0]            ;493
000224  f7fffffe          BL       GetRandTime
000228  491f              LDR      r1,|L37.680|
00022a  7108              STRB     r0,[r1,#4]            ;494
00022c  2001              MOVS     r0,#1                 ;495
00022e  7008              STRB     r0,[r1,#0]            ;495
000230  2000              MOVS     r0,#0                 ;496
000232  7248              STRB     r0,[r1,#9]            ;496
000234  7088              STRB     r0,[r1,#2]            ;497
000236  e033              B        |L37.672|
                  |L37.568|
000238  2000              MOVS     r0,#0                 ;501
00023a  491a              LDR      r1,|L37.676|
00023c  7008              STRB     r0,[r1,#0]            ;501
00023e  481f              LDR      r0,|L37.700|
000240  7800              LDRB     r0,[r0,#0]            ;503  ; t_offline
000242  2801              CMP      r0,#1                 ;503
000244  d12c              BNE      |L37.672|
000246  2000              MOVS     r0,#0                 ;505
000248  491c              LDR      r1,|L37.700|
00024a  7008              STRB     r0,[r1,#0]            ;505
00024c  e028              B        |L37.672|
                  |L37.590|
00024e  4815              LDR      r0,|L37.676|
000250  7800              LDRB     r0,[r0,#0]            ;512  ; send_step
000252  2804              CMP      r0,#4                 ;512
000254  d124              BNE      |L37.672|
000256  2000              MOVS     r0,#0                 ;542
000258  4912              LDR      r1,|L37.676|
00025a  7008              STRB     r0,[r1,#0]            ;542
00025c  2400              MOVS     r4,#0                 ;543
00025e  e004              B        |L37.618|
                  |L37.608|
000260  2000              MOVS     r0,#0                 ;545
000262  4917              LDR      r1,|L37.704|
000264  5508              STRB     r0,[r1,r4]            ;545
000266  1c60              ADDS     r0,r4,#1              ;543
000268  b2c4              UXTB     r4,r0                 ;543
                  |L37.618|
00026a  4812              LDR      r0,|L37.692|
00026c  7800              LDRB     r0,[r0,#0]            ;543  ; t_cnt
00026e  4284              CMP      r4,r0                 ;543
000270  dbf6              BLT      |L37.608|
000272  2000              MOVS     r0,#0                 ;547
000274  490f              LDR      r1,|L37.692|
000276  7008              STRB     r0,[r1,#0]            ;547
000278  490f              LDR      r1,|L37.696|
00027a  7008              STRB     r0,[r1,#0]            ;548
00027c  2400              MOVS     r4,#0                 ;549
00027e  e004              B        |L37.650|
                  |L37.640|
000280  2100              MOVS     r1,#0                 ;551
000282  4810              LDR      r0,|L37.708|
000284  5501              STRB     r1,[r0,r4]            ;551
000286  1c60              ADDS     r0,r4,#1              ;549
000288  b2c4              UXTB     r4,r0                 ;549
                  |L37.650|
00028a  480e              LDR      r0,|L37.708|
00028c  1e80              SUBS     r0,r0,#2              ;549
00028e  7800              LDRB     r0,[r0,#0]            ;549  ; RxDat
000290  42a0              CMP      r0,r4                 ;549
000292  dcf5              BGT      |L37.640|
000294  2000              MOVS     r0,#0                 ;553
000296  490b              LDR      r1,|L37.708|
000298  1e89              SUBS     r1,r1,#2              ;553
00029a  7008              STRB     r0,[r1,#0]            ;553
00029c  4902              LDR      r1,|L37.680|
00029e  7048              STRB     r0,[r1,#1]            ;555
                  |L37.672|
0002a0  bf00              NOP      
0002a2  e6b6              B        |L37.18|
;;;559    
                          ENDP

                  |L37.676|
                          DCD      send_step
                  |L37.680|
                          DCD      Bus
                  |L37.684|
                          DCD      index
                  |L37.688|
                          DCD      RS485_Queue
                  |L37.692|
                          DCD      t_cnt
                  |L37.696|
                          DCD      t_resend
                  |L37.700|
                          DCD      t_offline
                  |L37.704|
                          DCD      t_buf
                  |L37.708|
                          DCD      RxDat+0x2

                          AREA ||i.IT1_Sensor_DataLoad||, CODE, READONLY, ALIGN=2

                  IT1_Sensor_DataLoad PROC
;;;1944   //参数2: 命令
;;;1945   void IT1_Sensor_DataLoad(uint8_t index,uint8_t *pdat)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1946   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;1947   				uint8_t lin,row; 
;;;1948   				_Frame *ps;
;;;1949   	
;;;1950   	
;;;1951   				//传感器
;;;1952   				//if((Ex_Table.Exchange[index].type==EX_DEV_SUN)||(Ex_Table.Exchange[index].type==EX_DEV_SUN1))			  
;;;1953   				{
;;;1954   						lin=0;
000008  2700              MOVS     r7,#0
;;;1955   						row=0;
00000a  46b8              MOV      r8,r7
;;;1956   						if((Pannel.item[index].onoffbuf[lin]&(0x01<<row))==0x00)return;
00000c  ebc51105          RSB      r1,r5,r5,LSL #4
000010  4830              LDR      r0,|L38.212|
000012  4408              ADD      r0,r0,r1
000014  3008              ADDS     r0,r0,#8
000016  5dc0              LDRB     r0,[r0,r7]
000018  2101              MOVS     r1,#1
00001a  fa01f108          LSL      r1,r1,r8
00001e  4208              TST      r0,r1
000020  d101              BNE      |L38.38|
                  |L38.34|
;;;1957   				}
;;;1958   		
;;;1959   				
;;;1960   				ps=GetQueue_InQ(&RS485_Queue,index);
;;;1961   				//缓冲区溢出
;;;1962   				if(ps==NULL)
;;;1963   				{
;;;1964   					return;
;;;1965   				}
;;;1966   				
;;;1967   				ps->buf[0]=0x24;			//帧控制
;;;1968   				ps->buf[1]=(Master_Address>>8)&0x00ff;  //目标地址H
;;;1969   				ps->buf[2]=Master_Address;		//目标地址L
;;;1970   				ps->buf[3]=0x00;	
;;;1971   				ps->buf[4]=Dev.addr[0];
;;;1972   				
;;;1973   				if(Ex_Table.Exchange[index].type==EX_DEV_SUN)
;;;1974   				{
;;;1975   							ps->buf[5]=index+1;			//通道号
;;;1976   							ps->buf[6]=3;           //数据长度
;;;1977   					    ps->buf[7]=1;           //数据长度
;;;1978   							ps->buf[8]=0x00;				//键值
;;;1979   							ps->buf[9]=*(pdat+1);					//模式
;;;1980   							ps->buf[10]=Crc8CheckSum(ps->buf,10);		//CRC8校验
;;;1981   							ps->cnt=11;					//发送总的字节数
;;;1982   				}
;;;1983   				else  if(Ex_Table.Exchange[index].type==EX_DEV_SUN1)
;;;1984   				{
;;;1985   							ps->buf[5]=index+1;			//通道号
;;;1986   							ps->buf[6]=3;           //数据长度
;;;1987   					    ps->buf[7]=2;           //							ps->buf[8]=0x00;				//
;;;1988   							ps->buf[8]=*(pdat+1);		//模式
;;;1989   							ps->buf[9]=*(pdat+2);		//模式
;;;1990   							ps->buf[10]=Crc8CheckSum(ps->buf,10);		//CRC8校验
;;;1991   							ps->cnt=11;					//发送总的字节数
;;;1992   				}
;;;1993   				else
;;;1994   				{
;;;1995   							return;
;;;1996   				}
;;;1997   
;;;1998   				ps->flag=1;
;;;1999   				ps->resend=4;
;;;2000   				ps->rand=0;
;;;2001   				ps->ackwait=30;					//等待应答时间最大300mS
;;;2002   				EnQueueBuf(&RS485_Queue,index);
;;;2003   }
000022  e8bd81f0          POP      {r4-r8,pc}
                  |L38.38|
000026  4629              MOV      r1,r5                 ;1960
000028  482b              LDR      r0,|L38.216|
00002a  f7fffffe          BL       GetQueue_InQ
00002e  4604              MOV      r4,r0                 ;1960
000030  b904              CBNZ     r4,|L38.52|
000032  e7f6              B        |L38.34|
                  |L38.52|
000034  2024              MOVS     r0,#0x24              ;1967
000036  7020              STRB     r0,[r4,#0]            ;1967
000038  2000              MOVS     r0,#0                 ;1968
00003a  7060              STRB     r0,[r4,#1]            ;1968
00003c  70a0              STRB     r0,[r4,#2]            ;1969
00003e  70e0              STRB     r0,[r4,#3]            ;1970
000040  4826              LDR      r0,|L38.220|
000042  7880              LDRB     r0,[r0,#2]            ;1971  ; Dev
000044  7120              STRB     r0,[r4,#4]            ;1971
000046  ebc501c5          RSB      r1,r5,r5,LSL #3       ;1973
00004a  4825              LDR      r0,|L38.224|
00004c  f8100011          LDRB     r0,[r0,r1,LSL #1]     ;1973
000050  28e2              CMP      r0,#0xe2              ;1973
000052  d112              BNE      |L38.122|
000054  1c68              ADDS     r0,r5,#1              ;1975
000056  7160              STRB     r0,[r4,#5]            ;1975
000058  2003              MOVS     r0,#3                 ;1976
00005a  71a0              STRB     r0,[r4,#6]            ;1976
00005c  2001              MOVS     r0,#1                 ;1977
00005e  71e0              STRB     r0,[r4,#7]            ;1977
000060  2000              MOVS     r0,#0                 ;1978
000062  7220              STRB     r0,[r4,#8]            ;1978
000064  7870              LDRB     r0,[r6,#1]            ;1979
000066  7260              STRB     r0,[r4,#9]            ;1979
000068  210a              MOVS     r1,#0xa               ;1980
00006a  4620              MOV      r0,r4                 ;1980
00006c  f7fffffe          BL       Crc8CheckSum
000070  72a0              STRB     r0,[r4,#0xa]          ;1980
000072  200b              MOVS     r0,#0xb               ;1981
000074  f88400c8          STRB     r0,[r4,#0xc8]         ;1981
000078  e01a              B        |L38.176|
                  |L38.122|
00007a  ebc501c5          RSB      r1,r5,r5,LSL #3       ;1983
00007e  4818              LDR      r0,|L38.224|
000080  f8100011          LDRB     r0,[r0,r1,LSL #1]     ;1983
000084  28e4              CMP      r0,#0xe4              ;1983
000086  d112              BNE      |L38.174|
000088  1c68              ADDS     r0,r5,#1              ;1985
00008a  7160              STRB     r0,[r4,#5]            ;1985
00008c  2003              MOVS     r0,#3                 ;1986
00008e  71a0              STRB     r0,[r4,#6]            ;1986
000090  2002              MOVS     r0,#2                 ;1987
000092  71e0              STRB     r0,[r4,#7]            ;1987
000094  7870              LDRB     r0,[r6,#1]            ;1988
000096  7220              STRB     r0,[r4,#8]            ;1988
000098  78b0              LDRB     r0,[r6,#2]            ;1989
00009a  7260              STRB     r0,[r4,#9]            ;1989
00009c  210a              MOVS     r1,#0xa               ;1990
00009e  4620              MOV      r0,r4                 ;1990
0000a0  f7fffffe          BL       Crc8CheckSum
0000a4  72a0              STRB     r0,[r4,#0xa]          ;1990
0000a6  200b              MOVS     r0,#0xb               ;1991
0000a8  f88400c8          STRB     r0,[r4,#0xc8]         ;1991
0000ac  e000              B        |L38.176|
                  |L38.174|
0000ae  e7b8              B        |L38.34|
                  |L38.176|
0000b0  2001              MOVS     r0,#1                 ;1998
0000b2  f8040fc9          STRB     r0,[r4,#0xc9]!        ;1998
0000b6  2004              MOVS     r0,#4                 ;1999
0000b8  7060              STRB     r0,[r4,#1]            ;1999
0000ba  2000              MOVS     r0,#0                 ;2000
0000bc  70e0              STRB     r0,[r4,#3]            ;2000
0000be  201e              MOVS     r0,#0x1e              ;2001
0000c0  7120              STRB     r0,[r4,#4]            ;2001
0000c2  f1a404c9          SUB      r4,r4,#0xc9           ;2001
0000c6  4629              MOV      r1,r5                 ;2002
0000c8  4803              LDR      r0,|L38.216|
0000ca  f7fffffe          BL       EnQueueBuf
0000ce  bf00              NOP      
0000d0  e7a7              B        |L38.34|
;;;2004   //===========================================================================================================
                          ENDP

0000d2  0000              DCW      0x0000
                  |L38.212|
                          DCD      Pannel+0x1
                  |L38.216|
                          DCD      RS485_Queue
                  |L38.220|
                          DCD      ||Dev||
                  |L38.224|
                          DCD      Ex_Table+0x36

                          AREA ||i.IT1_Turn_DataLoad||, CODE, READONLY, ALIGN=2

                  IT1_Turn_DataLoad PROC
;;;1687   //旋转编码遥控器上报
;;;1688   void IT1_Turn_DataLoad(uint8_t index,uint8_t cmd,uint8_t dat)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1689   {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4691              MOV      r9,r2
;;;1690   				//static uint8_t flag=0;
;;;1691   				uint8_t lin,row;
;;;1692   	
;;;1693   				_Frame *ps;
;;;1694   	
;;;1695   				//禁止上报功能
;;;1696   				//===================================================================================================
;;;1697   				if((Ex_Table.Exchange[index].type==EX_KEY_LIGHT1)||(Ex_Table.Exchange[index].type==EX_KEY_MOTOR1))
00000a  ebc601c6          RSB      r1,r6,r6,LSL #3
00000e  4848              LDR      r0,|L39.304|
000010  f8100011          LDRB     r0,[r0,r1,LSL #1]
000014  28f7              CMP      r0,#0xf7
000016  d006              BEQ      |L39.38|
000018  ebc601c6          RSB      r1,r6,r6,LSL #3
00001c  4844              LDR      r0,|L39.304|
00001e  f8100011          LDRB     r0,[r0,r1,LSL #1]
000022  28f6              CMP      r0,#0xf6
000024  d109              BNE      |L39.58|
                  |L39.38|
;;;1698   				{
;;;1699   							if((Pannel.item[index].onoffbuf[0]&0x01)==0x00)return;
000026  ebc61106          RSB      r1,r6,r6,LSL #4
00002a  4842              LDR      r0,|L39.308|
00002c  4408              ADD      r0,r0,r1
00002e  7a00              LDRB     r0,[r0,#8]
000030  f0100f01          TST      r0,#1
000034  d11f              BNE      |L39.118|
                  |L39.54|
;;;1700   				}
;;;1701   				else
;;;1702   				{
;;;1703   							if(cmd>0)cmd=cmd-1;
;;;1704   							lin=cmd/8;
;;;1705   							row=cmd%8;
;;;1706   							if((Pannel.item[index].onoffbuf[lin]&(0x01<<row))==0x00)return;
;;;1707   				}
;;;1708   				//=====================================================================================================
;;;1709   				
;;;1710   				ps=GetQueue_InQ(&RS485_Queue,index);
;;;1711   				//缓冲区溢出
;;;1712   				if(ps==NULL)
;;;1713   				{
;;;1714   					return;
;;;1715   				}
;;;1716   				
;;;1717   				ps->buf[0]=0x04;			//帧控制
;;;1718   				ps->buf[1]=(Master_Address>>8)&0x00ff;  //目标地址H
;;;1719   				ps->buf[2]=Master_Address;		//目标地址L
;;;1720   				ps->buf[3]=Dev.rand++;//0x00;	
;;;1721   				ps->buf[4]=Dev.addr[0];
;;;1722   				ps->buf[5]=0x80+index+1;		//通道号
;;;1723   				
;;;1724   				//无线灯光
;;;1725   //				if(Ex_Table.Exchange[index].type==EX_KEY_LIGHT1)
;;;1726   //				{
;;;1727   //							if(flag==0)flag=1;
;;;1728   //					    else       flag=0;
;;;1729   //					
;;;1730   //							ps->buf[6]=2;                       //
;;;1731   //							ps->buf[7]=cmd;  
;;;1732   //							if(cmd==3)ps->buf[8]=2;												//开灯
;;;1733   //							else if(cmd==4)ps->buf[8]=1;	
;;;1734   //							else if(cmd==1)
;;;1735   //							{
;;;1736   //											if(flag==0)								ps->buf[8]=0x06;                       //
;;;1737   //											else                			ps->buf[8]=0x08;       
;;;1738   //							}
;;;1739   //							else if(cmd==2)
;;;1740   //							{
;;;1741   //											if(flag==0)								ps->buf[8]=0x07;                       //
;;;1742   //											else                			ps->buf[8]=0x08;       
;;;1743   //							}
;;;1744   //							else if(cmd==5)										ps->buf[8]=0x05;
;;;1745   //							else if(cmd==6)										ps->buf[8]=0x06; 
;;;1746   //							else                              return;
;;;1747   //							
;;;1748   //							ps->buf[9]=Crc8CheckSum(ps->buf,9);		//CRC8校验
;;;1749   //							ps->cnt=10;					//发送总的字节数
;;;1750   //							
;;;1751   //				}
;;;1752   //				//无线电机
;;;1753   //				else if(Ex_Table.Exchange[index].type==EX_KEY_MOTOR1)
;;;1754   //				{
;;;1755   //							ps->buf[6]=2;                       //
;;;1756   //					    ps->buf[7]=cmd;
;;;1757   //							if(cmd==3)												ps->buf[8]=0x12;												//开灯
;;;1758   //							else if(cmd==4)										ps->buf[8]=0x12;	
;;;1759   //							else if(cmd==1)										ps->buf[8]=0x11; 
;;;1760   //							else if(cmd==2)										ps->buf[8]=0x10; 
;;;1761   //							else if(cmd==5)										ps->buf[8]=0x05;
;;;1762   //							else if(cmd==6)										ps->buf[8]=0x06; 
;;;1763   //							else                              return;			
;;;1764   //							ps->buf[9]=Crc8CheckSum(ps->buf,9);		//CRC8校验
;;;1765   //							ps->cnt=10;					//发送总的字节数
;;;1766   //				}
;;;1767   				//场景 通用 
;;;1768   				if((Ex_Table.Exchange[index].type==EX_KEY_NORMAL1)||(Ex_Table.Exchange[index].type==EX_KEY_SCENE1))
;;;1769   				{
;;;1770   							ps->buf[6]=1;                        	  //数据长度
;;;1771   							ps->buf[7]=cmd+1;												//键值
;;;1772   							ps->buf[8]=Crc8CheckSum(ps->buf,8);		//CRC8校验
;;;1773   							ps->cnt=9;					//发送总的字节数
;;;1774   				}
;;;1775   				//智能
;;;1776   				else if(Ex_Table.Exchange[index].type==EX_KEY_FULL1)
;;;1777   				{		
;;;1778   						  ps->buf[6]=2;                        	  //数据长度
;;;1779   							ps->buf[7]=cmd+1;												  //键值
;;;1780   							ps->buf[8]=0x01;												//模式，这里默认为单击
;;;1781   							ps->buf[9]=Crc8CheckSum(ps->buf,9);		//CRC8校验
;;;1782   							ps->cnt=10;					//发送总的字节数
;;;1783   				}
;;;1784   				else
;;;1785   				{
;;;1786   							return;
;;;1787   				}
;;;1788   
;;;1789   
;;;1790   				ps->flag=1;
;;;1791   				ps->resend=4;
;;;1792   				ps->rand=0;
;;;1793   				ps->ackwait=30;					//等待应答时间最大300mS
;;;1794   				EnQueueBuf(&RS485_Queue,index);
;;;1795   }
000036  e8bd87f0          POP      {r4-r10,pc}
                  |L39.58|
00003a  2d00              CMP      r5,#0                 ;1703
00003c  dd01              BLE      |L39.66|
00003e  1e68              SUBS     r0,r5,#1              ;1703
000040  b2c5              UXTB     r5,r0                 ;1703
                  |L39.66|
000042  4628              MOV      r0,r5                 ;1704
000044  17e9              ASRS     r1,r5,#31             ;1704
000046  eb057151          ADD      r1,r5,r1,LSR #29      ;1704
00004a  f3c107c7          UBFX     r7,r1,#3,#8           ;1704
00004e  17e9              ASRS     r1,r5,#31             ;1705
000050  eb057151          ADD      r1,r5,r1,LSR #29      ;1705
000054  10c9              ASRS     r1,r1,#3              ;1705
000056  eba501c1          SUB      r1,r5,r1,LSL #3       ;1705
00005a  f00108ff          AND      r8,r1,#0xff           ;1705
00005e  ebc61106          RSB      r1,r6,r6,LSL #4       ;1706
000062  4834              LDR      r0,|L39.308|
000064  4408              ADD      r0,r0,r1              ;1706
000066  3008              ADDS     r0,r0,#8              ;1706
000068  5dc0              LDRB     r0,[r0,r7]            ;1706
00006a  2101              MOVS     r1,#1                 ;1706
00006c  fa01f108          LSL      r1,r1,r8              ;1706
000070  4208              TST      r0,r1                 ;1706
000072  d100              BNE      |L39.118|
000074  e7df              B        |L39.54|
                  |L39.118|
000076  4631              MOV      r1,r6                 ;1710
000078  482f              LDR      r0,|L39.312|
00007a  f7fffffe          BL       GetQueue_InQ
00007e  4604              MOV      r4,r0                 ;1710
000080  b904              CBNZ     r4,|L39.132|
000082  e7d8              B        |L39.54|
                  |L39.132|
000084  2004              MOVS     r0,#4                 ;1717
000086  7020              STRB     r0,[r4,#0]            ;1717
000088  2000              MOVS     r0,#0                 ;1718
00008a  7060              STRB     r0,[r4,#1]            ;1718
00008c  70a0              STRB     r0,[r4,#2]            ;1719
00008e  482b              LDR      r0,|L39.316|
000090  79c0              LDRB     r0,[r0,#7]            ;1720  ; Dev
000092  70e0              STRB     r0,[r4,#3]            ;1720
000094  4829              LDR      r0,|L39.316|
000096  79c0              LDRB     r0,[r0,#7]            ;1720  ; Dev
000098  1c40              ADDS     r0,r0,#1              ;1720
00009a  4928              LDR      r1,|L39.316|
00009c  71c8              STRB     r0,[r1,#7]            ;1720
00009e  4608              MOV      r0,r1                 ;1721
0000a0  7880              LDRB     r0,[r0,#2]            ;1721  ; Dev
0000a2  7120              STRB     r0,[r4,#4]            ;1721
0000a4  f1060081          ADD      r0,r6,#0x81           ;1722
0000a8  7160              STRB     r0,[r4,#5]            ;1722
0000aa  ebc601c6          RSB      r1,r6,r6,LSL #3       ;1768
0000ae  4820              LDR      r0,|L39.304|
0000b0  f8100011          LDRB     r0,[r0,r1,LSL #1]     ;1768
0000b4  28f8              CMP      r0,#0xf8              ;1768
0000b6  d006              BEQ      |L39.198|
0000b8  ebc601c6          RSB      r1,r6,r6,LSL #3       ;1768
0000bc  481c              LDR      r0,|L39.304|
0000be  f8100011          LDRB     r0,[r0,r1,LSL #1]     ;1768
0000c2  28f5              CMP      r0,#0xf5              ;1768
0000c4  d10c              BNE      |L39.224|
                  |L39.198|
0000c6  2001              MOVS     r0,#1                 ;1770
0000c8  71a0              STRB     r0,[r4,#6]            ;1770
0000ca  1c68              ADDS     r0,r5,#1              ;1771
0000cc  71e0              STRB     r0,[r4,#7]            ;1771
0000ce  2108              MOVS     r1,#8                 ;1772
0000d0  4620              MOV      r0,r4                 ;1772
0000d2  f7fffffe          BL       Crc8CheckSum
0000d6  7220              STRB     r0,[r4,#8]            ;1772
0000d8  2009              MOVS     r0,#9                 ;1773
0000da  f88400c8          STRB     r0,[r4,#0xc8]         ;1773
0000de  e016              B        |L39.270|
                  |L39.224|
0000e0  ebc601c6          RSB      r1,r6,r6,LSL #3       ;1776
0000e4  4812              LDR      r0,|L39.304|
0000e6  f8100011          LDRB     r0,[r0,r1,LSL #1]     ;1776
0000ea  28f9              CMP      r0,#0xf9              ;1776
0000ec  d10e              BNE      |L39.268|
0000ee  2002              MOVS     r0,#2                 ;1778
0000f0  71a0              STRB     r0,[r4,#6]            ;1778
0000f2  1c68              ADDS     r0,r5,#1              ;1779
0000f4  71e0              STRB     r0,[r4,#7]            ;1779
0000f6  2001              MOVS     r0,#1                 ;1780
0000f8  7220              STRB     r0,[r4,#8]            ;1780
0000fa  2109              MOVS     r1,#9                 ;1781
0000fc  4620              MOV      r0,r4                 ;1781
0000fe  f7fffffe          BL       Crc8CheckSum
000102  7260              STRB     r0,[r4,#9]            ;1781
000104  200a              MOVS     r0,#0xa               ;1782
000106  f88400c8          STRB     r0,[r4,#0xc8]         ;1782
00010a  e000              B        |L39.270|
                  |L39.268|
00010c  e793              B        |L39.54|
                  |L39.270|
00010e  2001              MOVS     r0,#1                 ;1790
000110  f8040fc9          STRB     r0,[r4,#0xc9]!        ;1790
000114  2004              MOVS     r0,#4                 ;1791
000116  7060              STRB     r0,[r4,#1]            ;1791
000118  2000              MOVS     r0,#0                 ;1792
00011a  70e0              STRB     r0,[r4,#3]            ;1792
00011c  201e              MOVS     r0,#0x1e              ;1793
00011e  7120              STRB     r0,[r4,#4]            ;1793
000120  f1a404c9          SUB      r4,r4,#0xc9           ;1793
000124  4631              MOV      r1,r6                 ;1794
000126  4804              LDR      r0,|L39.312|
000128  f7fffffe          BL       EnQueueBuf
00012c  bf00              NOP      
00012e  e782              B        |L39.54|
;;;1796   
                          ENDP

                  |L39.304|
                          DCD      Ex_Table+0x36
                  |L39.308|
                          DCD      Pannel+0x1
                  |L39.312|
                          DCD      RS485_Queue
                  |L39.316|
                          DCD      ||Dev||

                          AREA ||i.IT1_Wireless2RS485||, CODE, READONLY, ALIGN=1

                  IT1_Wireless2RS485 PROC
;;;2540   //类型转换   无线->RS485
;;;2541   uint8_t IT1_Wireless2RS485(uint8_t type,uint8_t *pbuf)
000000  4602              MOV      r2,r0
;;;2542   {
;;;2543    	uint8_t tmp;
;;;2544   	
;;;2545   	tmp=RE_OK;
000002  20fe              MOVS     r0,#0xfe
;;;2546   	
;;;2547   // 	if(type==EX_KEY_SCENE)
;;;2548   //	{
;;;2549   //		*(pbuf+0)=0x71;
;;;2550   //		*(pbuf+1)=0x00;
;;;2551   //	}
;;;2552   //	else if(type==EX_KEY_MOTOR)
;;;2553   //	{
;;;2554   //		*(pbuf+0)=0x72;
;;;2555   //		*(pbuf+1)=0x10;
;;;2556   //	}
;;;2557   //	else if(type==EX_KEY_LIGHT)
;;;2558   //	{
;;;2559   //		*(pbuf+0)=0x72;
;;;2560   //		*(pbuf+1)=0x20;
;;;2561   //	}
;;;2562   //	else if(type==EX_KEY_GENERAL)
;;;2563   //	{
;;;2564   //		*(pbuf+0)=0x75;
;;;2565   //		*(pbuf+1)=0x10;
;;;2566   //	}
;;;2567   //	if(type==EX_KEY_LIGHT1)
;;;2568   //	{
;;;2569   //		*(pbuf+0)=0x72;
;;;2570   //		*(pbuf+1)=0x40;
;;;2571   //	}
;;;2572   //	else if(type==EX_KEY_MOTOR1)
;;;2573   //	{
;;;2574   //		*(pbuf+0)=0x72;
;;;2575   //		*(pbuf+1)=0x60;
;;;2576   //	}
;;;2577   //	else if(type==EX_KEY_SCENE1)
;;;2578   //	{
;;;2579   //		*(pbuf+0)=0x71;
;;;2580   //		*(pbuf+1)=0x40;
;;;2581   //	}
;;;2582   	if(type==EX_KEY_NORMAL1)
000004  2af8              CMP      r2,#0xf8
000006  d104              BNE      |L40.18|
;;;2583   	{
;;;2584   		*(pbuf+0)=0x75;
000008  2375              MOVS     r3,#0x75
00000a  700b              STRB     r3,[r1,#0]
;;;2585   		*(pbuf+1)=0x40;
00000c  2340              MOVS     r3,#0x40
00000e  704b              STRB     r3,[r1,#1]
000010  e026              B        |L40.96|
                  |L40.18|
;;;2586   	}
;;;2587   	else if(type==EX_KEY_FULL1)
000012  2af9              CMP      r2,#0xf9
000014  d104              BNE      |L40.32|
;;;2588   	{
;;;2589   		*(pbuf+0)=0x77;
000016  2377              MOVS     r3,#0x77
000018  700b              STRB     r3,[r1,#0]
;;;2590   		*(pbuf+1)=0x40;
00001a  2340              MOVS     r3,#0x40
00001c  704b              STRB     r3,[r1,#1]
00001e  e01f              B        |L40.96|
                  |L40.32|
;;;2591   	}
;;;2592   	
;;;2593   //	else if(type==EX_DEV_SOCKET)
;;;2594   //	{
;;;2595   //		*(pbuf+0)=0x91;
;;;2596   //		*(pbuf+1)=0x00;
;;;2597   //	}
;;;2598   //	else if(type==EX_DEV_LIGHT)
;;;2599   //	{
;;;2600   //		*(pbuf+0)=0x01;
;;;2601   //		*(pbuf+1)=0x00;
;;;2602   //	}
;;;2603   //	else if(type==EX_DEV_LIGHT_ADJ)
;;;2604   //	{
;;;2605   //		*(pbuf+0)=0x02;
;;;2606   //		*(pbuf+1)=0x00;
;;;2607   //	}
;;;2608   //	
;;;2609   //	else if(type==EX_DEV_MOTOR_R)
;;;2610   //	{
;;;2611   //		*(pbuf+0)=0x11;
;;;2612   //		*(pbuf+1)=0x00;
;;;2613   //	}
;;;2614   // 	else if(type==EX_DEV_BLIND_R)
;;;2615   // 	{
;;;2616   // 		*(pbuf+0)=0x12;
;;;2617   // 		*(pbuf+1)=0x00;
;;;2618   // 	}
;;;2619   //	else if(type==EX_DEV_MOTOR_E)
;;;2620   //	{
;;;2621   //		*(pbuf+0)=0x13;
;;;2622   //		*(pbuf+1)=0x30;
;;;2623   //	}
;;;2624   //	else if(type==EX_DEV_BLIND_E)
;;;2625   //	{
;;;2626   //		*(pbuf+0)=0x14;
;;;2627   //		*(pbuf+1)=0x00;
;;;2628   //	}
;;;2629   	else if(type==EX_KEY_54KEY)
000020  2afa              CMP      r2,#0xfa
000022  d104              BNE      |L40.46|
;;;2630   	{
;;;2631   		*(pbuf+0)=0x76;
000024  2376              MOVS     r3,#0x76
000026  700b              STRB     r3,[r1,#0]
;;;2632   		*(pbuf+1)=0x10;
000028  2310              MOVS     r3,#0x10
00002a  704b              STRB     r3,[r1,#1]
00002c  e018              B        |L40.96|
                  |L40.46|
;;;2633   	}
;;;2634   	else if(type==EX_KEY_42KEY)
00002e  2afb              CMP      r2,#0xfb
000030  d104              BNE      |L40.60|
;;;2635   	{
;;;2636   		*(pbuf+0)=0x76;
000032  2376              MOVS     r3,#0x76
000034  700b              STRB     r3,[r1,#0]
;;;2637   		*(pbuf+1)=0x20;
000036  2320              MOVS     r3,#0x20
000038  704b              STRB     r3,[r1,#1]
00003a  e011              B        |L40.96|
                  |L40.60|
;;;2638   	}
;;;2639   	else if(type==EX_DEV_SUN)
00003c  2ae2              CMP      r2,#0xe2
00003e  d104              BNE      |L40.74|
;;;2640   	{
;;;2641   		*(pbuf+0)=0x8b;
000040  238b              MOVS     r3,#0x8b
000042  700b              STRB     r3,[r1,#0]
;;;2642   		*(pbuf+1)=0x00;
000044  2300              MOVS     r3,#0
000046  704b              STRB     r3,[r1,#1]
000048  e00a              B        |L40.96|
                  |L40.74|
;;;2643   	}
;;;2644   	else if(type==EX_DEV_SUN1)
00004a  2ae4              CMP      r2,#0xe4
00004c  d104              BNE      |L40.88|
;;;2645   	{
;;;2646   		*(pbuf+0)=0x8b;
00004e  238b              MOVS     r3,#0x8b
000050  700b              STRB     r3,[r1,#0]
;;;2647   		*(pbuf+1)=0x20;
000052  2320              MOVS     r3,#0x20
000054  704b              STRB     r3,[r1,#1]
000056  e003              B        |L40.96|
                  |L40.88|
;;;2648   	}
;;;2649   //	else if(type==EX_KEY_TURN)
;;;2650   //	{
;;;2651   //		*(pbuf+0)=0x79;
;;;2652   //		*(pbuf+1)=0x10;
;;;2653   //	}
;;;2654   	else
;;;2655   	{
;;;2656   		*(pbuf+0)=0x00;
000058  2300              MOVS     r3,#0
00005a  700b              STRB     r3,[r1,#0]
;;;2657   		*(pbuf+1)=0x00;
00005c  704b              STRB     r3,[r1,#1]
;;;2658   		tmp=RE_ERR;
00005e  20ff              MOVS     r0,#0xff
                  |L40.96|
;;;2659   	}
;;;2660   	
;;;2661    	return tmp;
;;;2662   }
000060  4770              BX       lr
;;;2663   //========================================================================================
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  t_buf
                          %        200

                          AREA ||.data||, DATA, ALIGN=0

                  DEV_INFO
000000  4d523332          DCB      0x4d,0x52,0x33,0x32
000004  30302d31          DCB      0x30,0x30,0x2d,0x31
000008  382d3034          DCB      0x38,0x2d,0x30,0x34
00000c  2d31302d          DCB      0x2d,0x31,0x30,0x2d
000010  53312e30          DCB      0x53,0x31,0x2e,0x30
000014  33                DCB      0x33
                  DEV_INFO_1
000015  4d5237            DCB      0x4d,0x52,0x37
000018  3032362d          DCB      0x30,0x32,0x36,0x2d
00001c  31382d30          DCB      0x31,0x38,0x2d,0x30
000020  342d3130          DCB      0x34,0x2d,0x31,0x30
000024  2d53312e          DCB      0x2d,0x53,0x31,0x2e
000028  3033              DCB      0x30,0x33
                  DEV_INFO_2
00002a  4d52              DCB      0x4d,0x52
00002c  33783030          DCB      0x33,0x78,0x30,0x30
000030  2d31382d          DCB      0x2d,0x31,0x38,0x2d
000034  30342d31          DCB      0x30,0x34,0x2d,0x31
000038  302d5331          DCB      0x30,0x2d,0x53,0x31
00003c  2e3033            DCB      0x2e,0x30,0x33
                  send_step
00003f  00                DCB      0x00
                  index
000040  00                DCB      0x00
                  t_cnt
000041  00                DCB      0x00
                  t_resend
000042  00                DCB      0x00
                  t_offline
000043  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\App_IT1.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_App_IT1_c_DEV_INFO____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_App_IT1_c_DEV_INFO____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_App_IT1_c_DEV_INFO____REVSH|
#line 128
|__asm___9_App_IT1_c_DEV_INFO____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
