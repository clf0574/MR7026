; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\outupt\func.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=..\outupt\func.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\outupt\func.crf ..\..\User\Func.c]
                          THUMB

                          AREA ||i.Check_SelfSend||, CODE, READONLY, ALIGN=2

                  Check_SelfSend PROC
;;;147    //uint8_t Check_SelfSend(void)
;;;148    uint8_t Check_SelfSend(uint8_t *pt,uint8_t cnt)
000000  b530              PUSH     {r4,r5,lr}
;;;149    {
000002  4603              MOV      r3,r0
000004  460a              MOV      r2,r1
;;;150    		uint8_t i,flag;
;;;151        
;;;152    		 flag=0;
000006  2000              MOVS     r0,#0
;;;153    		 if(cnt==RxDat.cnt)
000008  4c1e              LDR      r4,|L1.132|
00000a  7824              LDRB     r4,[r4,#0]  ; RxDat
00000c  4294              CMP      r4,r2
00000e  d111              BNE      |L1.52|
;;;154    		 {			 
;;;155    		     flag=1;
000010  2001              MOVS     r0,#1
;;;156    			   for(i=0;i<RxDat.cnt;i++)
000012  2100              MOVS     r1,#0
000014  e009              B        |L1.42|
                  |L1.22|
;;;157    			   {
;;;158    					  if(*(pt+i)!=RxDat.buf[i])
000016  5c5d              LDRB     r5,[r3,r1]
000018  4c1a              LDR      r4,|L1.132|
00001a  1ca4              ADDS     r4,r4,#2
00001c  5c64              LDRB     r4,[r4,r1]
00001e  42a5              CMP      r5,r4
000020  d001              BEQ      |L1.38|
;;;159    					  {
;;;160    					   		flag=0;
000022  2000              MOVS     r0,#0
;;;161    							break;
000024  e005              B        |L1.50|
                  |L1.38|
000026  1c4c              ADDS     r4,r1,#1              ;156
000028  b2e1              UXTB     r1,r4                 ;156
                  |L1.42|
00002a  4c16              LDR      r4,|L1.132|
00002c  7824              LDRB     r4,[r4,#0]            ;156  ; RxDat
00002e  428c              CMP      r4,r1                 ;156
000030  dcf1              BGT      |L1.22|
                  |L1.50|
000032  e026              B        |L1.130|
                  |L1.52|
;;;162    					  }
;;;163    			   }
;;;164    		 }
;;;165    		 else if(RxDat.cnt>cnt)
000034  4c13              LDR      r4,|L1.132|
000036  7824              LDRB     r4,[r4,#0]  ; RxDat
000038  4294              CMP      r4,r2
00003a  dd22              BLE      |L1.130|
;;;166    		 {			 
;;;167    			   flag=1;
00003c  2001              MOVS     r0,#1
;;;168    			   for(i=0;i<cnt;i++)
00003e  2100              MOVS     r1,#0
000040  e009              B        |L1.86|
                  |L1.66|
;;;169    			   {
;;;170    					  if(*(pt+i)!=RxDat.buf[i])
000042  5c5d              LDRB     r5,[r3,r1]
000044  4c0f              LDR      r4,|L1.132|
000046  1ca4              ADDS     r4,r4,#2
000048  5c64              LDRB     r4,[r4,r1]
00004a  42a5              CMP      r5,r4
00004c  d001              BEQ      |L1.82|
;;;171    					  {
;;;172    					   		flag=0;
00004e  2000              MOVS     r0,#0
;;;173    							  break;
000050  e003              B        |L1.90|
                  |L1.82|
000052  1c4c              ADDS     r4,r1,#1              ;168
000054  b2e1              UXTB     r1,r4                 ;168
                  |L1.86|
000056  4291              CMP      r1,r2                 ;168
000058  dbf3              BLT      |L1.66|
                  |L1.90|
00005a  bf00              NOP      
;;;174    					  }
;;;175    			   }
;;;176    				 if(flag==1)
00005c  2801              CMP      r0,#1
00005e  d110              BNE      |L1.130|
;;;177    				 {
;;;178    					  for(i=0;i<(30-cnt);i++)
000060  2100              MOVS     r1,#0
000062  e006              B        |L1.114|
                  |L1.100|
;;;179    					  {
;;;180    						    RxDat.buf[i]=RxDat.buf[i+cnt];
000064  188d              ADDS     r5,r1,r2
000066  4c07              LDR      r4,|L1.132|
000068  1ca4              ADDS     r4,r4,#2
00006a  5d65              LDRB     r5,[r4,r5]
00006c  5465              STRB     r5,[r4,r1]
00006e  1c4c              ADDS     r4,r1,#1              ;178
000070  b2e1              UXTB     r1,r4                 ;178
                  |L1.114|
000072  f1c2041e          RSB      r4,r2,#0x1e           ;178
000076  428c              CMP      r4,r1                 ;178
000078  dcf4              BGT      |L1.100|
;;;181    						}
;;;182    						RxDat.cnt=4;
00007a  2404              MOVS     r4,#4
00007c  4d01              LDR      r5,|L1.132|
00007e  702c              STRB     r4,[r5,#0]
;;;183    						flag=2;
000080  2002              MOVS     r0,#2
                  |L1.130|
;;;184    				 }
;;;185    				 
;;;186    		 }
;;;187    		 else
;;;188    		 {
;;;189    				//Led_set(0,15,30,1,2);//test 2016.3.15
;;;190    		 }
;;;191    		 return flag;
;;;192    }
000082  bd30              POP      {r4,r5,pc}
;;;193    
                          ENDP

                  |L1.132|
                          DCD      RxDat

                          AREA ||i.CompareSync||, CODE, READONLY, ALIGN=2

                  CompareSync PROC
;;;1149   #define  SYNC_DIFF  100
;;;1150   unsigned char CompareSync(unsigned char *pdat,unsigned char index)
000000  b570              PUSH     {r4-r6,lr}
;;;1151   {
000002  4603              MOV      r3,r0
;;;1152   		unsigned int t_sync1,t_sync2;
;;;1153   
;;;1154   		t_sync1=Ex_Table.Exchange[index].sync;
000004  ebc105c1          RSB      r5,r1,r1,LSL #3
000008  4833              LDR      r0,|L2.216|
00000a  eb000045          ADD      r0,r0,r5,LSL #1
00000e  8944              LDRH     r4,[r0,#0xa]
;;;1155   		t_sync2=pdat[0]*256 +pdat[1];
000010  785d              LDRB     r5,[r3,#1]
000012  7818              LDRB     r0,[r3,#0]
000014  eb052200          ADD      r2,r5,r0,LSL #8
;;;1156   
;;;1157   		if(t_sync2>SYNC_MAX)return OPT_ERR;
000018  f5b24f50          CMP      r2,#0xd000
00001c  d301              BCC      |L2.34|
00001e  20fc              MOVS     r0,#0xfc
                  |L2.32|
;;;1158   
;;;1159   		t_sync1&=0x3fff;
;;;1160       t_sync2&=0x3fff;
;;;1161       if(t_sync2>t_sync1)
;;;1162   		{		
;;;1163   				Ex_Table.Exchange[index].sync=t_sync2;
;;;1164   				Ex_Table.SyncErr[index]=0;
;;;1165   				return OPT_OK;
;;;1166   		}
;;;1167   		else 
;;;1168   		{
;;;1169   				if((t_sync1>(SYNC_MAX-SYNC_DIFF))&&(t_sync2<SYNC_DIFF))			//???????,????
;;;1170   				{
;;;1171   							Ex_Table.Exchange[index].sync=t_sync2;
;;;1172   							Ex_Table.SyncErr[index]=0;
;;;1173   							return OPT_OK;
;;;1174   				}
;;;1175   				else
;;;1176   				{
;;;1177   							//如果连续3次同步字加1，认为再次同步
;;;1178   							if((t_sync2-Dev.sync)==1)
;;;1179   							{
;;;1180   									Dev.sync=t_sync2;
;;;1181   									if(Ex_Table.SyncErr[index]>0)Ex_Table.SyncErr[index]--;
;;;1182   									if(Ex_Table.SyncErr[index]==0)
;;;1183   									{
;;;1184   												Ex_Table.Exchange[index].sync=t_sync2;
;;;1185   												Ex_Table.SyncErr[index]=0;
;;;1186   												return OPT_OK;
;;;1187   									}
;;;1188   									else
;;;1189   									{
;;;1190   												return OPT_ERR;
;;;1191   									}
;;;1192   							}
;;;1193   							else
;;;1194   							{
;;;1195   									Dev.sync=t_sync2;
;;;1196   									if(Ex_Table.SyncErr[index]<3)Ex_Table.SyncErr[index]++;									//???????
;;;1197   									return OPT_ERR;
;;;1198   							}
;;;1199   				}
;;;1200   		}
;;;1201   }
000020  bd70              POP      {r4-r6,pc}
                  |L2.34|
000022  f3c4040d          UBFX     r4,r4,#0,#14          ;1159
000026  f3c2020d          UBFX     r2,r2,#0,#14          ;1160
00002a  42a2              CMP      r2,r4                 ;1161
00002c  d90b              BLS      |L2.70|
00002e  ebc106c1          RSB      r6,r1,r1,LSL #3       ;1163
000032  4829              LDR      r0,|L2.216|
000034  eb000046          ADD      r0,r0,r6,LSL #1       ;1163
000038  8142              STRH     r2,[r0,#0xa]          ;1163
00003a  2500              MOVS     r5,#0                 ;1164
00003c  4826              LDR      r0,|L2.216|
00003e  3828              SUBS     r0,r0,#0x28           ;1164
000040  5445              STRB     r5,[r0,r1]            ;1164
000042  20fb              MOVS     r0,#0xfb              ;1165
000044  e7ec              B        |L2.32|
                  |L2.70|
000046  f64c709b          MOV      r0,#0xcf9b            ;1169
00004a  4284              CMP      r4,r0                 ;1169
00004c  d90d              BLS      |L2.106|
00004e  2a64              CMP      r2,#0x64              ;1169
000050  d20b              BCS      |L2.106|
000052  ebc106c1          RSB      r6,r1,r1,LSL #3       ;1171
000056  4820              LDR      r0,|L2.216|
000058  eb000046          ADD      r0,r0,r6,LSL #1       ;1171
00005c  8142              STRH     r2,[r0,#0xa]          ;1171
00005e  2500              MOVS     r5,#0                 ;1172
000060  481d              LDR      r0,|L2.216|
000062  3828              SUBS     r0,r0,#0x28           ;1172
000064  5445              STRB     r5,[r0,r1]            ;1172
000066  20fb              MOVS     r0,#0xfb              ;1173
000068  e7da              B        |L2.32|
                  |L2.106|
00006a  481c              LDR      r0,|L2.220|
00006c  8a00              LDRH     r0,[r0,#0x10]         ;1178  ; Dev
00006e  1a10              SUBS     r0,r2,r0              ;1178
000070  2801              CMP      r0,#1                 ;1178
000072  d120              BNE      |L2.182|
000074  4d19              LDR      r5,|L2.220|
000076  822a              STRH     r2,[r5,#0x10]         ;1180
000078  4817              LDR      r0,|L2.216|
00007a  3828              SUBS     r0,r0,#0x28           ;1181
00007c  5c40              LDRB     r0,[r0,r1]            ;1181
00007e  2800              CMP      r0,#0                 ;1181
000080  dd07              BLE      |L2.146|
000082  4815              LDR      r0,|L2.216|
000084  3828              SUBS     r0,r0,#0x28           ;1181
000086  5c40              LDRB     r0,[r0,r1]            ;1181
000088  1e40              SUBS     r0,r0,#1              ;1181
00008a  b2c5              UXTB     r5,r0                 ;1181
00008c  4812              LDR      r0,|L2.216|
00008e  3828              SUBS     r0,r0,#0x28           ;1181
000090  5445              STRB     r5,[r0,r1]            ;1181
                  |L2.146|
000092  4811              LDR      r0,|L2.216|
000094  3828              SUBS     r0,r0,#0x28           ;1182
000096  5c40              LDRB     r0,[r0,r1]            ;1182
000098  b958              CBNZ     r0,|L2.178|
00009a  ebc106c1          RSB      r6,r1,r1,LSL #3       ;1184
00009e  480e              LDR      r0,|L2.216|
0000a0  eb000046          ADD      r0,r0,r6,LSL #1       ;1184
0000a4  8142              STRH     r2,[r0,#0xa]          ;1184
0000a6  2500              MOVS     r5,#0                 ;1185
0000a8  480b              LDR      r0,|L2.216|
0000aa  3828              SUBS     r0,r0,#0x28           ;1185
0000ac  5445              STRB     r5,[r0,r1]            ;1185
0000ae  20fb              MOVS     r0,#0xfb              ;1186
0000b0  e7b6              B        |L2.32|
                  |L2.178|
0000b2  20fc              MOVS     r0,#0xfc              ;1190
0000b4  e7b4              B        |L2.32|
                  |L2.182|
0000b6  4d09              LDR      r5,|L2.220|
0000b8  822a              STRH     r2,[r5,#0x10]         ;1195
0000ba  4807              LDR      r0,|L2.216|
0000bc  3828              SUBS     r0,r0,#0x28           ;1196
0000be  5c40              LDRB     r0,[r0,r1]            ;1196
0000c0  2803              CMP      r0,#3                 ;1196
0000c2  da07              BGE      |L2.212|
0000c4  4804              LDR      r0,|L2.216|
0000c6  3828              SUBS     r0,r0,#0x28           ;1196
0000c8  5c40              LDRB     r0,[r0,r1]            ;1196
0000ca  1c40              ADDS     r0,r0,#1              ;1196
0000cc  b2c5              UXTB     r5,r0                 ;1196
0000ce  4802              LDR      r0,|L2.216|
0000d0  3828              SUBS     r0,r0,#0x28           ;1196
0000d2  5445              STRB     r5,[r0,r1]            ;1196
                  |L2.212|
0000d4  20fc              MOVS     r0,#0xfc              ;1197
0000d6  e7a3              B        |L2.32|
;;;1202   
                          ENDP

                  |L2.216|
                          DCD      Ex_Table+0x36
                  |L2.220|
                          DCD      ||Dev||

                          AREA ||i.ComposePacket||, CODE, READONLY, ALIGN=2

                  ComposePacket PROC
;;;1088   //按表格中的秘钥解密数据包
;;;1089   void ComposePacket(unsigned char *pdat,unsigned char len,unsigned char index)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1090   {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;1091   	unsigned char key;
;;;1092   	key=Ex_Table.Exchange[index].secret;
000008  ebc401c4          RSB      r1,r4,r4,LSL #3
00000c  4804              LDR      r0,|L3.32|
00000e  eb000041          ADD      r0,r0,r1,LSL #1
000012  7b07              LDRB     r7,[r0,#0xc]
;;;1093   	InfoDecode(pdat,len,key);												
000014  463a              MOV      r2,r7
000016  4631              MOV      r1,r6
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       InfoDecode
;;;1094   }
00001e  bdf0              POP      {r4-r7,pc}
;;;1095   //===================================================================================
                          ENDP

                  |L3.32|
                          DCD      Ex_Table+0x36

                          AREA ||i.ComposePacketFromDS28E02||, CODE, READONLY, ALIGN=1

                  ComposePacketFromDS28E02 PROC
;;;1100   //st==1:加密
;;;1101   void ComposePacketFromDS28E02(unsigned char *pid,unsigned char *pdat,unsigned char len,unsigned char st)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;1102   {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
;;;1103   	unsigned char buf[4],i;
;;;1104   	unsigned char TKEY;
;;;1105   	for(i=0;i<4;i++)buf[i]=*(pid+i);
00000c  2400              MOVS     r4,#0
00000e  e004              B        |L4.26|
                  |L4.16|
000010  5d30              LDRB     r0,[r6,r4]
000012  f80d0004          STRB     r0,[sp,r4]
000016  1c60              ADDS     r0,r4,#1
000018  b2c4              UXTB     r4,r0
                  |L4.26|
00001a  2c04              CMP      r4,#4
00001c  dbf8              BLT      |L4.16|
;;;1106   	buf[3]&=0xf0;							
00001e  f89d0003          LDRB     r0,[sp,#3]
000022  f00000f0          AND      r0,r0,#0xf0
000026  f88d0003          STRB     r0,[sp,#3]
;;;1107   	TKEY=GetSecret(&buf[0],4);
00002a  2104              MOVS     r1,#4
00002c  4668              MOV      r0,sp
00002e  f7fffffe          BL       GetSecret
000032  4605              MOV      r5,r0
;;;1108   	if(st==0)
000034  f1b90f00          CMP      r9,#0
000038  d105              BNE      |L4.70|
;;;1109   	{
;;;1110   			InfoDecode(pdat,len,TKEY);	
00003a  462a              MOV      r2,r5
00003c  4641              MOV      r1,r8
00003e  4638              MOV      r0,r7
000040  f7fffffe          BL       InfoDecode
000044  e004              B        |L4.80|
                  |L4.70|
;;;1111   	}
;;;1112   	else
;;;1113   	{
;;;1114   			InfoEncode(pdat,len,TKEY);
000046  462a              MOV      r2,r5
000048  4641              MOV      r1,r8
00004a  4638              MOV      r0,r7
00004c  f7fffffe          BL       InfoEncode
                  |L4.80|
;;;1115   	}
;;;1116   }
000050  e8bd83f8          POP      {r3-r9,pc}
;;;1117   
                          ENDP


                          AREA ||i.Crc8CheckSum||, CODE, READONLY, ALIGN=1

                  Crc8CheckSum PROC
;;;253    //CRC校验
;;;254    uint8_t  Crc8CheckSum(uint8_t *ptr,uint8_t length)
000000  b530              PUSH     {r4,r5,lr}
;;;255    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;256      unsigned char i;
;;;257      unsigned char Crc8=0;
000006  2000              MOVS     r0,#0
;;;258      while(length--)
000008  e014              B        |L5.52|
                  |L5.10|
;;;259      {
;;;260        //g(x)=x8+x5+x4+1
;;;261        for(i=0x80; i; i>>=1)
00000a  2180              MOVS     r1,#0x80
00000c  e00f              B        |L5.46|
                  |L5.14|
;;;262        {
;;;263          if((Crc8&0x80)!=0)
00000e  f0100f80          TST      r0,#0x80
000012  d004              BEQ      |L5.30|
;;;264          {
;;;265            Crc8<<=1;
000014  0644              LSLS     r4,r0,#25
000016  0e20              LSRS     r0,r4,#24
;;;266            Crc8^=0x31;
000018  f0800031          EOR      r0,r0,#0x31
00001c  e001              B        |L5.34|
                  |L5.30|
;;;267          }
;;;268          else
;;;269          {
;;;270            Crc8<<=1;
00001e  0644              LSLS     r4,r0,#25
000020  0e20              LSRS     r0,r4,#24
                  |L5.34|
;;;271          }
;;;272          if(*ptr&i)
000022  7814              LDRB     r4,[r2,#0]
000024  420c              TST      r4,r1
000026  d001              BEQ      |L5.44|
;;;273          {
;;;274            Crc8^=0x31;
000028  f0800031          EOR      r0,r0,#0x31
                  |L5.44|
00002c  1049              ASRS     r1,r1,#1              ;261
                  |L5.46|
00002e  2900              CMP      r1,#0                 ;261
000030  d1ed              BNE      |L5.14|
;;;275          }
;;;276        }
;;;277        ptr++;
000032  1c52              ADDS     r2,r2,#1
                  |L5.52|
000034  001c              MOVS     r4,r3                 ;258
000036  f1a30501          SUB      r5,r3,#1              ;258
00003a  b2eb              UXTB     r3,r5                 ;258
00003c  d1e5              BNE      |L5.10|
;;;278      }
;;;279      return Crc8;
;;;280    }
00003e  bd30              POP      {r4,r5,pc}
;;;281    
                          ENDP


                          AREA ||i.Dev_Init||, CODE, READONLY, ALIGN=2

                  Dev_Init PROC
;;;15     //设备初始化
;;;16     void Dev_Init(void)
000000  b5fe              PUSH     {r1-r7,lr}
;;;17     {
;;;18     	uint8_t flag,err,i;
;;;19     	uint8_t buf[12];
;;;20     	#ifndef GET_SERIAL_FROM_CHIP_ID
;;;21     	uint8_t *p;
;;;22       	#endif
;;;23     	uint16_t ret;
;;;24     	//===============================================================================================
;;;25     	//读使用标记,如果第一次上电，初始化时间大概有3秒，所以看门狗不应该在此以前启用，以免不停复位
;;;26     	flag=Read_Dev(TYPE_EE_ADDR_USED);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       Read_Dev
000008  4607              MOV      r7,r0
;;;27     	if(flag!=USED_FLAG)																						//没有初始化
00000a  2f5b              CMP      r7,#0x5b
00000c  d01b              BEQ      |L6.70|
;;;28     	{
;;;29     		//开始初始化
;;;30     		Write_Dev(0xff,TYPE_EE_ADDR_ADDR0);
00000e  2101              MOVS     r1,#1
000010  20ff              MOVS     r0,#0xff
000012  f7fffffe          BL       Write_Dev
;;;31     		Write_Dev(0xff,TYPE_EE_ADDR_ADDR1);		
000016  2102              MOVS     r1,#2
000018  20ff              MOVS     r0,#0xff
00001a  f7fffffe          BL       Write_Dev
;;;32     		//Write_Dev(DEV_MODE_PASS_THROUGH,TYPE_EE_ADDR_MODE);
;;;33     		//Write_Dev(FREE1,TYPE_EE_ADDR_PROFILE);
;;;34     		Write_Dev(0xb1,TYPE_EE_ADDR_TYPESH);
00001e  2107              MOVS     r1,#7
000020  20b1              MOVS     r0,#0xb1
000022  f7fffffe          BL       Write_Dev
;;;35     		Write_Dev(0x40,TYPE_EE_ADDR_TYPES);													//
000026  2106              MOVS     r1,#6
000028  2040              MOVS     r0,#0x40
00002a  f7fffffe          BL       Write_Dev
;;;36         Init_Ex_Table(ALL);																					//初始化表格	
00002e  20ff              MOVS     r0,#0xff
000030  f7fffffe          BL       Init_Ex_Table
;;;37     		Init_Pannel_Table();
000034  f7fffffe          BL       Init_Pannel_Table
;;;38     		//Init_Scene_Table();																				//初始化场景表			
;;;39     		//初始化锁表格
;;;40     		Init_Lock_Table(ALL);
000038  20ff              MOVS     r0,#0xff
00003a  f7fffffe          BL       Init_Lock_Table
;;;41         Write_Dev(USED_FLAG,TYPE_EE_ADDR_USED);											//使用标记
00003e  2100              MOVS     r1,#0
000040  205b              MOVS     r0,#0x5b
000042  f7fffffe          BL       Write_Dev
                  |L6.70|
;;;42     	}
;;;43     	
;;;44     	//===============================================================================================
;;;45     	//读出参数
;;;46     	Dev.addr[0]=Read_Dev(TYPE_EE_ADDR_ADDR0);
000046  2001              MOVS     r0,#1
000048  f7fffffe          BL       Read_Dev
00004c  4966              LDR      r1,|L6.488|
00004e  7088              STRB     r0,[r1,#2]
;;;47     	Dev.addr[1]=Read_Dev(TYPE_EE_ADDR_ADDR1);
000050  2002              MOVS     r0,#2
000052  f7fffffe          BL       Read_Dev
000056  4964              LDR      r1,|L6.488|
000058  70c8              STRB     r0,[r1,#3]
;;;48     	Dev.mode=Read_Dev(TYPE_EE_ADDR_MODE);
00005a  2003              MOVS     r0,#3
00005c  f7fffffe          BL       Read_Dev
000060  4961              LDR      r1,|L6.488|
000062  7348              STRB     r0,[r1,#0xd]
;;;49     	//Dev.profile=Read_Dev(TYPE_EE_ADDR_PROFILE);
;;;50     	//if(Dev.profile!=IT1)Dev.profile=FREE1;
;;;51     	Dev.profile=IT1;		
000064  2000              MOVS     r0,#0
000066  7008              STRB     r0,[r1,#0]
;;;52     	ret=Read_Dev(TYPE_EE_ADDR_TYPESH);
000068  2007              MOVS     r0,#7
00006a  f7fffffe          BL       Read_Dev
00006e  4606              MOV      r6,r0
;;;53     	ret=ret<<8;
000070  f64f70ff          MOV      r0,#0xffff
000074  ea002606          AND      r6,r0,r6,LSL #8
;;;54     	Dev.type=ret+Read_Dev(TYPE_EE_ADDR_TYPES);
000078  2006              MOVS     r0,#6
00007a  f7fffffe          BL       Read_Dev
00007e  4430              ADD      r0,r0,r6
000080  4959              LDR      r1,|L6.488|
000082  8088              STRH     r0,[r1,#4]
;;;55     		
;;;56       #ifdef GET_SERIAL_FROM_CHIP_ID
;;;57     	for(i=0;i<8;i++)
;;;58     	{
;;;59     		IT2_INFO[i]=buf[i];
;;;60     	}		
;;;61     	IT2_INFO[6]=Crc8CheckSum(buf,12);  							//测试
;;;62     	IT2_INFO[7]=Crc8CheckSum(&buf[8],4);
;;;63     	#else
;;;64     	ret=Read_RomID(&IT2_INFO[0]);
000084  4859              LDR      r0,|L6.492|
000086  f7fffffe          BL       Read_RomID
00008a  4606              MOV      r6,r0
;;;65     	#endif		
;;;66     	//================================================================================================
;;;67     	//读出转发表
;;;68     	if((Dev.type&0xf000)==0xb000)
00008c  4856              LDR      r0,|L6.488|
00008e  8880              LDRH     r0,[r0,#4]  ; Dev
000090  f4004070          AND      r0,r0,#0xf000
000094  f5b04f30          CMP      r0,#0xb000
000098  d11f              BNE      |L6.218|
;;;69     	{
;;;70     				err=Read_Ex_Table();
00009a  f7fffffe          BL       Read_Ex_Table
00009e  4605              MOV      r5,r0
;;;71     				if(err==RE_ERR)Dev.err|=ERR_EEPROM;
0000a0  2dff              CMP      r5,#0xff
0000a2  d105              BNE      |L6.176|
0000a4  4850              LDR      r0,|L6.488|
0000a6  7b80              LDRB     r0,[r0,#0xe]  ; Dev
0000a8  f0400080          ORR      r0,r0,#0x80
0000ac  494e              LDR      r1,|L6.488|
0000ae  7388              STRB     r0,[r1,#0xe]
                  |L6.176|
;;;72     				for(i=0;i<EX_TABLE_NUM;i++)
0000b0  2400              MOVS     r4,#0
0000b2  e00b              B        |L6.204|
                  |L6.180|
;;;73     				{
;;;74     					Ex_Table.reg[i]=0;
0000b4  2100              MOVS     r1,#0
0000b6  484e              LDR      r0,|L6.496|
0000b8  5501              STRB     r1,[r0,r4]
;;;75     					Ex_Table.stu[i]=0;
0000ba  3021              ADDS     r0,r0,#0x21
0000bc  5501              STRB     r1,[r0,r4]
;;;76     					Ex_Table.rtdat[i]=0;
0000be  3008              ADDS     r0,r0,#8
0000c0  5501              STRB     r1,[r0,r4]
;;;77     					Ex_Table.SyncNum[i]=0;
0000c2  3818              SUBS     r0,r0,#0x18
0000c4  f8201014          STRH     r1,[r0,r4,LSL #1]
0000c8  1c60              ADDS     r0,r4,#1              ;72
0000ca  b2c4              UXTB     r4,r0                 ;72
                  |L6.204|
0000cc  2c08              CMP      r4,#8                 ;72
0000ce  dbf1              BLT      |L6.180|
;;;78     				}
;;;79     				Ex_Table.index=0;
0000d0  2000              MOVS     r0,#0
0000d2  4947              LDR      r1,|L6.496|
0000d4  1f49              SUBS     r1,r1,#5
0000d6  7008              STRB     r0,[r1,#0]
0000d8  e01e              B        |L6.280|
                  |L6.218|
;;;80     	}
;;;81     	//如果是锁转发器，则读锁表
;;;82     	else if((Dev.type&0xf000)==0x3000)
0000da  4843              LDR      r0,|L6.488|
0000dc  8880              LDRH     r0,[r0,#4]  ; Dev
0000de  f4004070          AND      r0,r0,#0xf000
0000e2  f5b05f40          CMP      r0,#0x3000
0000e6  d117              BNE      |L6.280|
;;;83     	{
;;;84     				err=Read_Lock_Table();
0000e8  f7fffffe          BL       Read_Lock_Table
0000ec  4605              MOV      r5,r0
;;;85     		    for(i=0;i<8;i++)lock.randkey[i]=IT2_INFO[i]^Dev.rand;
0000ee  2400              MOVS     r4,#0
0000f0  e008              B        |L6.260|
                  |L6.242|
0000f2  483e              LDR      r0,|L6.492|
0000f4  5d00              LDRB     r0,[r0,r4]
0000f6  493c              LDR      r1,|L6.488|
0000f8  79c9              LDRB     r1,[r1,#7]  ; Dev
0000fa  4048              EORS     r0,r0,r1
0000fc  493d              LDR      r1,|L6.500|
0000fe  5508              STRB     r0,[r1,r4]
000100  1c60              ADDS     r0,r4,#1
000102  b2c4              UXTB     r4,r0
                  |L6.260|
000104  2c08              CMP      r4,#8
000106  dbf4              BLT      |L6.242|
;;;86     				if(err==RE_ERR)Dev.err|=ERR_EEPROM;				
000108  2dff              CMP      r5,#0xff
00010a  d105              BNE      |L6.280|
00010c  4836              LDR      r0,|L6.488|
00010e  7b80              LDRB     r0,[r0,#0xe]  ; Dev
000110  f0400080          ORR      r0,r0,#0x80
000114  4934              LDR      r1,|L6.488|
000116  7388              STRB     r0,[r1,#0xe]
                  |L6.280|
;;;87     	}
;;;88     	
;;;89     	//==============================================================================================
;;;90     	//读出按键表格
;;;91     	Read_Pannel_Table();																		//读取表格
000118  f7fffffe          BL       Read_Pannel_Table
;;;92     	//===============================================================================================
;;;93     	//读场景表
;;;94     	//for(i=0;i<EX_TABLE_NUM;i++)Read_Scene(i);
;;;95     	//===============================================================================================
;;;96     	//清空无线发送队列，清空485发送队列
;;;97     	InitQueueBUF(&RS485_Queue);
00011c  4836              LDR      r0,|L6.504|
00011e  f7fffffe          BL       InitQueueBUF
;;;98     	InitQueueBUF(&WirelessSend_Queue);
000122  4836              LDR      r0,|L6.508|
000124  f7fffffe          BL       InitQueueBUF
;;;99     	//清空串口发送结构和接收结构
;;;100    	for(i=0;i<RX_MAX;i++)RxDat.buf[i]=0;
000128  2400              MOVS     r4,#0
00012a  e004              B        |L6.310|
                  |L6.300|
00012c  2100              MOVS     r1,#0
00012e  4834              LDR      r0,|L6.512|
000130  5501              STRB     r1,[r0,r4]
000132  1c60              ADDS     r0,r4,#1
000134  b2c4              UXTB     r4,r0
                  |L6.310|
000136  2cc8              CMP      r4,#0xc8
000138  dbf8              BLT      |L6.300|
;;;101    	RxDat.cnt=0;
00013a  2000              MOVS     r0,#0
00013c  4930              LDR      r1,|L6.512|
00013e  1e89              SUBS     r1,r1,#2
000140  7008              STRB     r0,[r1,#0]
;;;102    	for(i=0;i<TX_MAX;i++)TxDat.buf[i]=0;
000142  2400              MOVS     r4,#0
000144  e004              B        |L6.336|
                  |L6.326|
000146  2100              MOVS     r1,#0
000148  482e              LDR      r0,|L6.516|
00014a  5501              STRB     r1,[r0,r4]
00014c  1c60              ADDS     r0,r4,#1
00014e  b2c4              UXTB     r4,r0
                  |L6.336|
000150  2c64              CMP      r4,#0x64
000152  dbf8              BLT      |L6.326|
;;;103    	TxDat.cnt=0;	
000154  2000              MOVS     r0,#0
000156  492b              LDR      r1,|L6.516|
000158  1ec9              SUBS     r1,r1,#3
00015a  7008              STRB     r0,[r1,#0]
;;;104    	//================================================================================================
;;;105    	//变量初始化
;;;106    	Dev.stu=DEV_REGISTER;
00015c  2001              MOVS     r0,#1
00015e  4922              LDR      r1,|L6.488|
000160  7188              STRB     r0,[r1,#6]
;;;107    	RegTimeClr();	
000162  f7fffffe          BL       RegTimeClr
;;;108    	Dev.err=0x00;
000166  2000              MOVS     r0,#0
000168  491f              LDR      r1,|L6.488|
00016a  7388              STRB     r0,[r1,#0xe]
;;;109    	Dev.power_time=0;
00016c  7248              STRB     r0,[r1,#9]
;;;110    	Bus.distime=100;	
00016e  2064              MOVS     r0,#0x64
000170  4925              LDR      r1,|L6.520|
000172  80c8              STRH     r0,[r1,#6]
;;;111    	Get_SerialNum(&buf[0]);														
000174  4668              MOV      r0,sp
000176  f7fffffe          BL       Get_SerialNum
;;;112    	Dev.rand=Crc8CheckSum(buf,12);
00017a  210c              MOVS     r1,#0xc
00017c  4668              MOV      r0,sp
00017e  f7fffffe          BL       Crc8CheckSum
000182  4919              LDR      r1,|L6.488|
000184  71c8              STRB     r0,[r1,#7]
;;;113    	
;;;114    
;;;115    	//无线主机地址
;;;116    	Ex_Table.addr[0]=Crc8CheckSum(IT2_INFO,8);
000186  2108              MOVS     r1,#8
000188  4818              LDR      r0,|L6.492|
00018a  f7fffffe          BL       Crc8CheckSum
00018e  4918              LDR      r1,|L6.496|
000190  1f49              SUBS     r1,r1,#5
000192  7048              STRB     r0,[r1,#1]
;;;117    	Ex_Table.addr[1]=Crc8CheckSum(IT2_INFO,12);
000194  210c              MOVS     r1,#0xc
000196  4815              LDR      r0,|L6.492|
000198  f7fffffe          BL       Crc8CheckSum
00019c  4914              LDR      r1,|L6.496|
00019e  1f49              SUBS     r1,r1,#5
0001a0  7088              STRB     r0,[r1,#2]
;;;118    	Ex_Table.addr[2]=Crc8CheckSum(&IT2_INFO[4],8);		
0001a2  2108              MOVS     r1,#8
0001a4  4811              LDR      r0,|L6.492|
0001a6  1d00              ADDS     r0,r0,#4
0001a8  f7fffffe          BL       Crc8CheckSum
0001ac  4910              LDR      r1,|L6.496|
0001ae  1f49              SUBS     r1,r1,#5
0001b0  70c8              STRB     r0,[r1,#3]
;;;119    	Ex_Table.addr[3]=0x01;
0001b2  2101              MOVS     r1,#1
0001b4  480e              LDR      r0,|L6.496|
0001b6  1f40              SUBS     r0,r0,#5
0001b8  7101              STRB     r1,[r0,#4]
;;;120    	
;;;121    			
;;;122    	//修改2017.3.30
;;;123    	//源地址
;;;124    	for(i=0;i<4;i++)Ir.TgAddr[i]=Ex_Table.addr[i];				//对应源地址
0001ba  2400              MOVS     r4,#0
0001bc  e006              B        |L6.460|
                  |L6.446|
0001be  480c              LDR      r0,|L6.496|
0001c0  1f00              SUBS     r0,r0,#4
0001c2  5d01              LDRB     r1,[r0,r4]
0001c4  4811              LDR      r0,|L6.524|
0001c6  5501              STRB     r1,[r0,r4]
0001c8  1c60              ADDS     r0,r4,#1
0001ca  b2c4              UXTB     r4,r0
                  |L6.460|
0001cc  2c04              CMP      r4,#4
0001ce  dbf6              BLT      |L6.446|
;;;125    	for(i=0;i<CHL_NUM;i++)DlyTable.item[i].flag=0;
0001d0  2400              MOVS     r4,#0
0001d2  e006              B        |L6.482|
                  |L6.468|
0001d4  2100              MOVS     r1,#0
0001d6  eb040244          ADD      r2,r4,r4,LSL #1
0001da  480d              LDR      r0,|L6.528|
0001dc  5481              STRB     r1,[r0,r2]
0001de  1c60              ADDS     r0,r4,#1
0001e0  b2c4              UXTB     r4,r0
                  |L6.482|
0001e2  2c08              CMP      r4,#8
0001e4  dbf6              BLT      |L6.468|
;;;126    	
;;;127    }
0001e6  bdfe              POP      {r1-r7,pc}
;;;128    /*
                          ENDP

                  |L6.488|
                          DCD      ||Dev||
                  |L6.492|
                          DCD      IT2_INFO
                  |L6.496|
                          DCD      Ex_Table+0x5
                  |L6.500|
                          DCD      lock+0x3
                  |L6.504|
                          DCD      RS485_Queue
                  |L6.508|
                          DCD      WirelessSend_Queue
                  |L6.512|
                          DCD      RxDat+0x2
                  |L6.516|
                          DCD      TxDat+0x3
                  |L6.520|
                          DCD      Bus
                  |L6.524|
                          DCD      ||Ir||+0x3
                  |L6.528|
                          DCD      DlyTable+0x1

                          AREA ||i.DlyEvent_handle||, CODE, READONLY, ALIGN=2

                  DlyEvent_handle PROC
;;;1069   **********************************************************************************************************/
;;;1070   void DlyEvent_handle(uint8_t channel,uint8_t type,uint8_t dat,uint16_t time)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1071   {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
00000a  461d              MOV      r5,r3
;;;1072   
;;;1073   	  
;;;1074   		DlyTable.item[channel].flag=1;
00000c  2101              MOVS     r1,#1
00000e  eb040244          ADD      r2,r4,r4,LSL #1
000012  480c              LDR      r0,|L7.68|
000014  5481              STRB     r1,[r0,r2]
;;;1075   		DlyTable.item[channel].index=type;
000016  eb040144          ADD      r1,r4,r4,LSL #1
00001a  4408              ADD      r0,r0,r1
00001c  7047              STRB     r7,[r0,#1]
;;;1076   		DlyTable.item[channel].dat=dat;
00001e  eb040144          ADD      r1,r4,r4,LSL #1
000022  4808              LDR      r0,|L7.68|
000024  4408              ADD      r0,r0,r1
000026  7086              STRB     r6,[r0,#2]
;;;1077   	
;;;1078   	  if(time>10000)time=10000;
000028  f2427010          MOV      r0,#0x2710
00002c  4285              CMP      r5,r0
00002e  dd00              BLE      |L7.50|
000030  4605              MOV      r5,r0
                  |L7.50|
;;;1079   	  if(time==0)time=1;
000032  b905              CBNZ     r5,|L7.54|
000034  2501              MOVS     r5,#1
                  |L7.54|
;;;1080   		bsp_StartTimer(channel,(uint32_t)time);
000036  4629              MOV      r1,r5
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       bsp_StartTimer
;;;1081   }
00003e  e8bd81f0          POP      {r4-r8,pc}
;;;1082   
                          ENDP

000042  0000              DCW      0x0000
                  |L7.68|
                          DCD      DlyTable+0x1

                          AREA ||i.GetRandTime||, CODE, READONLY, ALIGN=2

                  GetRandTime PROC
;;;203    //取随机数
;;;204    uint8_t GetRandTime(void)
000000  b53e              PUSH     {r1-r5,lr}
;;;205    {
;;;206     	uint8_t buf[12],sum,i;
;;;207    	Get_SerialNum(&buf[0]);
000002  4668              MOV      r0,sp
000004  f7fffffe          BL       Get_SerialNum
;;;208    	sum=0;
000008  2500              MOVS     r5,#0
;;;209    	for(i=0;i<12;i++)sum=sum+buf[i];
00000a  2400              MOVS     r4,#0
00000c  e005              B        |L8.26|
                  |L8.14|
00000e  f81d0004          LDRB     r0,[sp,r4]
000012  4428              ADD      r0,r0,r5
000014  b2c5              UXTB     r5,r0
000016  1c60              ADDS     r0,r4,#1
000018  b2c4              UXTB     r4,r0
                  |L8.26|
00001a  2c0c              CMP      r4,#0xc
00001c  dbf7              BLT      |L8.14|
;;;210    	
;;;211     	return (40+((Dev.rand+sum)%40));
00001e  4805              LDR      r0,|L8.52|
000020  79c0              LDRB     r0,[r0,#7]  ; Dev
000022  4428              ADD      r0,r0,r5
000024  2128              MOVS     r1,#0x28
000026  fb90f2f1          SDIV     r2,r0,r1
00002a  fb010012          MLS      r0,r1,r2,r0
00002e  3028              ADDS     r0,r0,#0x28
000030  b2c0              UXTB     r0,r0
;;;212    
;;;213    }
000032  bd3e              POP      {r1-r5,pc}
;;;214    
                          ENDP

                  |L8.52|
                          DCD      ||Dev||

                          AREA ||i.GetSecret||, CODE, READONLY, ALIGN=1

                  GetSecret PROC
;;;1204   //得到秘钥
;;;1205   unsigned char GetSecret(unsigned char *pdat,unsigned char len)
000000  b570              PUSH     {r4-r6,lr}
;;;1206   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1207       unsigned char t_secret;
;;;1208       Secret_Verify(pdat,len);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       Secret_Verify
;;;1209       t_secret=*(pdat+0)+*(pdat+1);
00000e  7820              LDRB     r0,[r4,#0]
000010  7861              LDRB     r1,[r4,#1]
000012  4408              ADD      r0,r0,r1
000014  b2c6              UXTB     r6,r0
;;;1210       return t_secret;
000016  4630              MOV      r0,r6
;;;1211   }
000018  bd70              POP      {r4-r6,pc}
;;;1212   
                          ENDP


                          AREA ||i.Get_SerialNum||, CODE, READONLY, ALIGN=2

                  Get_SerialNum PROC
;;;224    
;;;225    void Get_SerialNum(uint8_t *pt)
000000  b50e              PUSH     {r1-r3,lr}
;;;226    {
000002  4601              MOV      r1,r0
;;;227    	  uint32_t IDbuf[3];
;;;228    	  uint8_t i;
;;;229    	  
;;;230        IDbuf[0] = *(uint32_t*)(0x1FFFF7E8);
000004  4a13              LDR      r2,|L10.84|
000006  6812              LDR      r2,[r2,#0]
000008  9200              STR      r2,[sp,#0]
;;;231        IDbuf[1] = *(uint32_t*)(0x1FFFF7EC);
00000a  4a12              LDR      r2,|L10.84|
00000c  1d12              ADDS     r2,r2,#4
00000e  6812              LDR      r2,[r2,#0]
000010  9201              STR      r2,[sp,#4]
;;;232        IDbuf[2] = *(uint32_t*)(0x1FFFF7F0);
000012  4a10              LDR      r2,|L10.84|
000014  3208              ADDS     r2,r2,#8
000016  6812              LDR      r2,[r2,#0]
000018  9202              STR      r2,[sp,#8]
;;;233    	
;;;234    	 for(i=0;i<3;i++)
00001a  2000              MOVS     r0,#0
00001c  e017              B        |L10.78|
                  |L10.30|
;;;235    	 {
;;;236    				 *(pt+i*4+0)=(uint8_t)((IDbuf[i]>>24)&0x000000ff);
00001e  f85d2020          LDR      r2,[sp,r0,LSL #2]
000022  0e12              LSRS     r2,r2,#24
000024  f8012020          STRB     r2,[r1,r0,LSL #2]
;;;237    				 *(pt+i*4+1)=(uint8_t)((IDbuf[i]>>16)&0x000000ff);;
000028  f85d2020          LDR      r2,[sp,r0,LSL #2]
00002c  0c12              LSRS     r2,r2,#16
00002e  eb010380          ADD      r3,r1,r0,LSL #2
000032  705a              STRB     r2,[r3,#1]
;;;238    				 *(pt+i*4+2)=(uint8_t)((IDbuf[i]>>8)&0x000000ff);;
000034  f83d2020          LDRH     r2,[sp,r0,LSL #2]
000038  0a12              LSRS     r2,r2,#8
00003a  eb010380          ADD      r3,r1,r0,LSL #2
00003e  709a              STRB     r2,[r3,#2]
;;;239    				 *(pt+i*4+3)=(uint8_t)((IDbuf[i])&0x000000ff);
000040  f81d2020          LDRB     r2,[sp,r0,LSL #2]
000044  eb010380          ADD      r3,r1,r0,LSL #2
000048  70da              STRB     r2,[r3,#3]
00004a  1c42              ADDS     r2,r0,#1              ;234
00004c  b2d0              UXTB     r0,r2                 ;234
                  |L10.78|
00004e  2803              CMP      r0,#3                 ;234
000050  dbe5              BLT      |L10.30|
;;;240    	 }
;;;241    
;;;242    }
000052  bd0e              POP      {r1-r3,pc}
;;;243    
                          ENDP

                  |L10.84|
                          DCD      0x1ffff7e8

                          AREA ||i.InfoDecode||, CODE, READONLY, ALIGN=1

                  InfoDecode PROC
;;;1133   //信息解密
;;;1134   void InfoDecode(unsigned char *pdat,unsigned char len,unsigned char key)
000000  b530              PUSH     {r4,r5,lr}
;;;1135   {
000002  460b              MOV      r3,r1
;;;1136   		unsigned char i,tmp;
;;;1137       *(pdat+1)=*(pdat+1)^key;
000004  7845              LDRB     r5,[r0,#1]
000006  4055              EORS     r5,r5,r2
000008  7045              STRB     r5,[r0,#1]
;;;1138       tmp=*(pdat+1);
00000a  7844              LDRB     r4,[r0,#1]
;;;1139   
;;;1140       *(pdat+0)=*(pdat+0)^tmp;
00000c  7805              LDRB     r5,[r0,#0]
00000e  4065              EORS     r5,r5,r4
000010  7005              STRB     r5,[r0,#0]
;;;1141   		for(i=2;i<len;i++)
000012  2102              MOVS     r1,#2
000014  e004              B        |L11.32|
                  |L11.22|
;;;1142   		{
;;;1143   				*(pdat+i)=*(pdat+i)^tmp;
000016  5c45              LDRB     r5,[r0,r1]
000018  4065              EORS     r5,r5,r4
00001a  5445              STRB     r5,[r0,r1]
00001c  1c4d              ADDS     r5,r1,#1              ;1141
00001e  b2e9              UXTB     r1,r5                 ;1141
                  |L11.32|
000020  4299              CMP      r1,r3                 ;1141
000022  dbf8              BLT      |L11.22|
;;;1144   		}
;;;1145   }
000024  bd30              POP      {r4,r5,pc}
;;;1146   //====================================================================================
                          ENDP


                          AREA ||i.InfoEncode||, CODE, READONLY, ALIGN=1

                  InfoEncode PROC
;;;1119   //信息加密
;;;1120   void InfoEncode(unsigned char *pdat,unsigned char len,unsigned char key)
000000  b530              PUSH     {r4,r5,lr}
;;;1121   {
000002  460b              MOV      r3,r1
;;;1122   	unsigned char i,tmp;
;;;1123   
;;;1124       tmp=*(pdat+1);
000004  7844              LDRB     r4,[r0,#1]
;;;1125       *(pdat+0)=*(pdat+0)^tmp;
000006  7805              LDRB     r5,[r0,#0]
000008  4065              EORS     r5,r5,r4
00000a  7005              STRB     r5,[r0,#0]
;;;1126   		for(i=2;i<len;i++) 
00000c  2102              MOVS     r1,#2
00000e  e004              B        |L12.26|
                  |L12.16|
;;;1127   		{
;;;1128   				*(pdat+i)=*(pdat+i)^tmp;
000010  5c45              LDRB     r5,[r0,r1]
000012  4065              EORS     r5,r5,r4
000014  5445              STRB     r5,[r0,r1]
000016  1c4d              ADDS     r5,r1,#1              ;1126
000018  b2e9              UXTB     r1,r5                 ;1126
                  |L12.26|
00001a  4299              CMP      r1,r3                 ;1126
00001c  dbf8              BLT      |L12.16|
;;;1129   		}
;;;1130   		*(pdat+1)=*(pdat+1)^key;
00001e  7845              LDRB     r5,[r0,#1]
000020  4055              EORS     r5,r5,r2
000022  7045              STRB     r5,[r0,#1]
;;;1131   }
000024  bd30              POP      {r4,r5,pc}
;;;1132   //===================================================================================
                          ENDP


                          AREA ||i.Init_Ex_Table||, CODE, READONLY, ALIGN=2

                  Init_Ex_Table PROC
;;;284    //初始化转发表
;;;285    void Init_Ex_Table(uint8_t st)
000000  b570              PUSH     {r4-r6,lr}
;;;286    {
000002  4604              MOV      r4,r0
;;;287    			if(st==ALL)
000004  2cff              CMP      r4,#0xff
000006  d11a              BNE      |L13.62|
;;;288    			{
;;;289    						uint8_t i;
;;;290    						for(i=0;i<EX_TABLE_NUM;i++)
000008  2500              MOVS     r5,#0
00000a  e015              B        |L13.56|
                  |L13.12|
;;;291    						{
;;;292    								Exchangebuf.type=0xff;
00000c  20ff              MOVS     r0,#0xff
00000e  4918              LDR      r1,|L13.112|
000010  7008              STRB     r0,[r1,#0]
;;;293    								Exchangebuf.addr=0xff;
000012  7048              STRB     r0,[r1,#1]
;;;294    								Exchangebuf.stu=0xff;
000014  7088              STRB     r0,[r1,#2]
;;;295    								Exchangebuf.wl_addr[0]=0xff;
000016  70c8              STRB     r0,[r1,#3]
;;;296    								Exchangebuf.wl_addr[1]=0xff;
000018  21ff              MOVS     r1,#0xff
00001a  4815              LDR      r0,|L13.112|
00001c  7101              STRB     r1,[r0,#4]
;;;297    								Exchangebuf.wl_addr[2]=0xff;
00001e  7141              STRB     r1,[r0,#5]
;;;298    								Exchangebuf.channel=0xff;
000020  20ff              MOVS     r0,#0xff
000022  4913              LDR      r1,|L13.112|
000024  7188              STRB     r0,[r1,#6]
;;;299    							  Exchangebuf.sync=0;
000026  2000              MOVS     r0,#0
000028  8148              STRH     r0,[r1,#0xa]
;;;300    								Exchangebuf.secret=0xff;
00002a  20ff              MOVS     r0,#0xff
00002c  7308              STRB     r0,[r1,#0xc]
;;;301    								Write_Ex_Table(i);	
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       Write_Ex_Table
000034  1c68              ADDS     r0,r5,#1              ;290
000036  b2c5              UXTB     r5,r0                 ;290
                  |L13.56|
000038  2d08              CMP      r5,#8                 ;290
00003a  dbe7              BLT      |L13.12|
;;;302    						}
;;;303    			}
00003c  e016              B        |L13.108|
                  |L13.62|
;;;304    			else
;;;305    			{
;;;306    						if(st>=EX_TABLE_NUM)return;
00003e  2c08              CMP      r4,#8
000040  db00              BLT      |L13.68|
                  |L13.66|
;;;307    						Exchangebuf.type=0xff;
;;;308    						Exchangebuf.addr=0xff;
;;;309    						Exchangebuf.stu=0xff;
;;;310    						Exchangebuf.wl_addr[0]=0xff;
;;;311    						Exchangebuf.wl_addr[1]=0xff;
;;;312    						Exchangebuf.wl_addr[2]=0xff;
;;;313    						Exchangebuf.channel=0xff;
;;;314    						Exchangebuf.sync=0;
;;;315    						Exchangebuf.secret=0xff;
;;;316    						Write_Ex_Table(st);	
;;;317    			}
;;;318    }
000042  bd70              POP      {r4-r6,pc}
                  |L13.68|
000044  20ff              MOVS     r0,#0xff              ;307
000046  490a              LDR      r1,|L13.112|
000048  7008              STRB     r0,[r1,#0]            ;307
00004a  7048              STRB     r0,[r1,#1]            ;308
00004c  7088              STRB     r0,[r1,#2]            ;309
00004e  70c8              STRB     r0,[r1,#3]            ;310
000050  21ff              MOVS     r1,#0xff              ;311
000052  4807              LDR      r0,|L13.112|
000054  7101              STRB     r1,[r0,#4]            ;311
000056  7141              STRB     r1,[r0,#5]            ;312
000058  20ff              MOVS     r0,#0xff              ;313
00005a  4905              LDR      r1,|L13.112|
00005c  7188              STRB     r0,[r1,#6]            ;313
00005e  2000              MOVS     r0,#0                 ;314
000060  8148              STRH     r0,[r1,#0xa]          ;314
000062  20ff              MOVS     r0,#0xff              ;315
000064  7308              STRB     r0,[r1,#0xc]          ;315
000066  4620              MOV      r0,r4                 ;316
000068  f7fffffe          BL       Write_Ex_Table
                  |L13.108|
00006c  bf00              NOP      
00006e  e7e8              B        |L13.66|
;;;319    /*
                          ENDP

                  |L13.112|
                          DCD      Exchangebuf

                          AREA ||i.Init_Lock_Table||, CODE, READONLY, ALIGN=2

                  Init_Lock_Table PROC
;;;1281   //初始化转发表
;;;1282   void Init_Lock_Table(uint8_t st)
000000  b570              PUSH     {r4-r6,lr}
;;;1283   {
000002  4605              MOV      r5,r0
;;;1284   			uint8_t i,j;
;;;1285   			if(st==ALL)
000004  2dff              CMP      r5,#0xff
000006  d152              BNE      |L14.174|
;;;1286   			{
;;;1287   							for(j=0;j<LOCK_ITEMNUM;j++)LockItem.Serail[j]=0;
000008  2400              MOVS     r4,#0
00000a  e005              B        |L14.24|
                  |L14.12|
00000c  2100              MOVS     r1,#0
00000e  482e              LDR      r0,|L14.200|
000010  f8201014          STRH     r1,[r0,r4,LSL #1]
000014  1c60              ADDS     r0,r4,#1
000016  b2c4              UXTB     r4,r0
                  |L14.24|
000018  2c10              CMP      r4,#0x10
00001a  dbf7              BLT      |L14.12|
;;;1288   						  for(j=0;j<LOCK_ITEMNUM;j++)LockItem.IdType[j]=0;
00001c  2400              MOVS     r4,#0
00001e  e005              B        |L14.44|
                  |L14.32|
000020  2100              MOVS     r1,#0
000022  4829              LDR      r0,|L14.200|
000024  3020              ADDS     r0,r0,#0x20
000026  5501              STRB     r1,[r0,r4]
000028  1c60              ADDS     r0,r4,#1
00002a  b2c4              UXTB     r4,r0
                  |L14.44|
00002c  2c10              CMP      r4,#0x10
00002e  dbf7              BLT      |L14.32|
;;;1289   						  for(j=0;j<LOCK_ITEMNUM;j++)LockItem.UserType[j]=0;
000030  2400              MOVS     r4,#0
000032  e005              B        |L14.64|
                  |L14.52|
000034  2100              MOVS     r1,#0
000036  4824              LDR      r0,|L14.200|
000038  3030              ADDS     r0,r0,#0x30
00003a  5501              STRB     r1,[r0,r4]
00003c  1c60              ADDS     r0,r4,#1
00003e  b2c4              UXTB     r4,r0
                  |L14.64|
000040  2c10              CMP      r4,#0x10
000042  dbf7              BLT      |L14.52|
;;;1290   							for(j=0;j<4;j++)LockItem.addr[j]=0xff;
000044  2400              MOVS     r4,#0
000046  e005              B        |L14.84|
                  |L14.72|
000048  20ff              MOVS     r0,#0xff
00004a  491f              LDR      r1,|L14.200|
00004c  3916              SUBS     r1,r1,#0x16
00004e  5508              STRB     r0,[r1,r4]
000050  1c60              ADDS     r0,r4,#1
000052  b2c4              UXTB     r4,r0
                  |L14.84|
000054  2c04              CMP      r4,#4
000056  dbf7              BLT      |L14.72|
;;;1291   							//初始密码为123456
;;;1292   						  for(j=0;j<6;j++)LockItem.key[j]=j+1;LockItem.key[6]=0xff;LockItem.key[7]=0xff;
000058  2400              MOVS     r4,#0
00005a  e006              B        |L14.106|
                  |L14.92|
00005c  1c60              ADDS     r0,r4,#1
00005e  b2c1              UXTB     r1,r0
000060  4819              LDR      r0,|L14.200|
000062  380d              SUBS     r0,r0,#0xd
000064  5501              STRB     r1,[r0,r4]
000066  1c60              ADDS     r0,r4,#1
000068  b2c4              UXTB     r4,r0
                  |L14.106|
00006a  2c06              CMP      r4,#6
00006c  dbf6              BLT      |L14.92|
00006e  21ff              MOVS     r1,#0xff
000070  4815              LDR      r0,|L14.200|
000072  3816              SUBS     r0,r0,#0x16
000074  73c1              STRB     r1,[r0,#0xf]
000076  7401              STRB     r1,[r0,#0x10]
;;;1293   				
;;;1294   							LockItem.secret=0;																			
000078  2000              MOVS     r0,#0
00007a  4913              LDR      r1,|L14.200|
00007c  3916              SUBS     r1,r1,#0x16
00007e  7108              STRB     r0,[r1,#4]
;;;1295   							LockItem.cardnum=0; 
000080  7188              STRB     r0,[r1,#6]
;;;1296   							LockItem.encodenum=0;
000082  71c8              STRB     r0,[r1,#7]
;;;1297   							LockItem.fingernum=0;
000084  7208              STRB     r0,[r1,#8]
;;;1298   							LockItem.sync=0;			
000086  8248              STRH     r0,[r1,#0x12]
;;;1299   							LockItem.stu=0xff;
000088  20ff              MOVS     r0,#0xff
00008a  8288              STRH     r0,[r1,#0x14]
;;;1300   							Write_Lock_Table(0);
00008c  2000              MOVS     r0,#0
00008e  f7fffffe          BL       Write_Lock_Table
;;;1301   
;;;1302   							for(j=0;j<LOCK_ITEMNUM;j++)Write_Lock_Table(j+1);
000092  2400              MOVS     r4,#0
000094  e005              B        |L14.162|
                  |L14.150|
000096  1c61              ADDS     r1,r4,#1
000098  b2c8              UXTB     r0,r1
00009a  f7fffffe          BL       Write_Lock_Table
00009e  1c60              ADDS     r0,r4,#1
0000a0  b2c4              UXTB     r4,r0
                  |L14.162|
0000a2  2c10              CMP      r4,#0x10
0000a4  dbf7              BLT      |L14.150|
;;;1303                 lock.SyncErr=0;
0000a6  2000              MOVS     r0,#0
0000a8  4908              LDR      r1,|L14.204|
0000aa  72c8              STRB     r0,[r1,#0xb]
0000ac  e00b              B        |L14.198|
                  |L14.174|
;;;1304   			}
;;;1305   			else
;;;1306   			{
;;;1307   							LockItem.Serail[st]=0;
0000ae  2100              MOVS     r1,#0
0000b0  4805              LDR      r0,|L14.200|
0000b2  f8201015          STRH     r1,[r0,r5,LSL #1]
;;;1308   						  LockItem.IdType[st]=0;
0000b6  3020              ADDS     r0,r0,#0x20
0000b8  5541              STRB     r1,[r0,r5]
;;;1309   						  LockItem.UserType[st]=0;
0000ba  3010              ADDS     r0,r0,#0x10
0000bc  5541              STRB     r1,[r0,r5]
;;;1310   							Write_Lock_Table(st+1);
0000be  1c69              ADDS     r1,r5,#1
0000c0  b2c8              UXTB     r0,r1
0000c2  f7fffffe          BL       Write_Lock_Table
                  |L14.198|
;;;1311   			}
;;;1312   }
0000c6  bd70              POP      {r4-r6,pc}
;;;1313   /*
                          ENDP

                  |L14.200|
                          DCD      LockItem+0x16
                  |L14.204|
                          DCD      lock

                          AREA ||i.Init_Pannel_Table||, CODE, READONLY, ALIGN=2

                  Init_Pannel_Table PROC
;;;444    //初始化面板配置表
;;;445    void Init_Pannel_Table(void)
000000  b570              PUSH     {r4-r6,lr}
;;;446    {
;;;447     	    uint8_t i,j;
;;;448     	    for(i=0;i<KEY_NUM;i++)
000002  2500              MOVS     r5,#0
000004  e024              B        |L15.80|
                  |L15.6|
;;;449     	    {
;;;450    					
;;;451    				  if((Dev.err & ERR_RESET)==0x00)IWDG_Feed();
000006  4814              LDR      r0,|L15.88|
000008  7b80              LDRB     r0,[r0,#0xe]  ; Dev
00000a  f0100f08          TST      r0,#8
00000e  d101              BNE      |L15.20|
000010  f7fffffe          BL       IWDG_Feed
                  |L15.20|
;;;452    				
;;;453     				 	for(j=0;j<8;j++)Pannel.item[i].irflagbuf[j]=0;				//标记，表示是否使用
000014  2400              MOVS     r4,#0
000016  e007              B        |L15.40|
                  |L15.24|
000018  2100              MOVS     r1,#0
00001a  ebc51205          RSB      r2,r5,r5,LSL #4
00001e  480f              LDR      r0,|L15.92|
000020  4410              ADD      r0,r0,r2
000022  5501              STRB     r1,[r0,r4]
000024  1c60              ADDS     r0,r4,#1
000026  b2c4              UXTB     r4,r0
                  |L15.40|
000028  2c08              CMP      r4,#8
00002a  dbf5              BLT      |L15.24|
;;;454    				  for(j=0;j<8;j++)Pannel.item[i].onoffbuf[j]=0;				//标记，表示是否使用
00002c  2400              MOVS     r4,#0
00002e  e008              B        |L15.66|
                  |L15.48|
000030  2100              MOVS     r1,#0
000032  ebc51205          RSB      r2,r5,r5,LSL #4
000036  4809              LDR      r0,|L15.92|
000038  4410              ADD      r0,r0,r2
00003a  3008              ADDS     r0,r0,#8
00003c  5501              STRB     r1,[r0,r4]
00003e  1c60              ADDS     r0,r4,#1
000040  b2c4              UXTB     r4,r0
                  |L15.66|
000042  2c08              CMP      r4,#8
000044  dbf4              BLT      |L15.48|
;;;455     					//Pannel.item[i].type=0;															//类型 设备 场景 序列 反向
;;;456     					//Pannel.item[i].tg_id=0;															//目标地址
;;;457     					//Pannel.item[i].datalen=0;														//数据字节长度
;;;458     					Write_Pannel_Table(i);	
000046  4628              MOV      r0,r5
000048  f7fffffe          BL       Write_Pannel_Table
00004c  1c68              ADDS     r0,r5,#1              ;448
00004e  b2c5              UXTB     r5,r0                 ;448
                  |L15.80|
000050  2d08              CMP      r5,#8                 ;448
000052  dbd8              BLT      |L15.6|
;;;459     			}
;;;460    }
000054  bd70              POP      {r4-r6,pc}
;;;461    /*
                          ENDP

000056  0000              DCW      0x0000
                  |L15.88|
                          DCD      ||Dev||
                  |L15.92|
                          DCD      Pannel+0x1

                          AREA ||i.Init_Scene_Table||, CODE, READONLY, ALIGN=2

                  Init_Scene_Table PROC
;;;581    //初始化转发表
;;;582    void Init_Scene_Table(void)
000000  b570              PUSH     {r4-r6,lr}
;;;583    {
;;;584    	    uint8_t i,j;
;;;585    	    for(i=0;i<EX_TABLE_NUM;i++)
000002  2500              MOVS     r5,#0
000004  e055              B        |L16.178|
                  |L16.6|
;;;586    	    {
;;;587    				   for(j=0;j<50;j++)
000006  2400              MOVS     r4,#0
000008  e04f              B        |L16.170|
                  |L16.10|
;;;588    					 {
;;;589    							 Scene[i].item[j].flag=0;
00000a  2100              MOVS     r1,#0
00000c  f2401091          MOV      r0,#0x191
000010  4368              MULS     r0,r5,r0
000012  4a29              LDR      r2,|L16.184|
000014  eb020040          ADD      r0,r2,r0,LSL #1
000018  1c80              ADDS     r0,r0,#2
00001a  eb001004          ADD      r0,r0,r4,LSL #4
00001e  7001              STRB     r1,[r0,#0]
;;;590    							 Scene[i].item[j].id=0;
000020  f2401091          MOV      r0,#0x191
000024  4368              MULS     r0,r5,r0
000026  eb020040          ADD      r0,r2,r0,LSL #1
00002a  1c80              ADDS     r0,r0,#2
00002c  eb001004          ADD      r0,r0,r4,LSL #4
000030  8041              STRH     r1,[r0,#2]
;;;591    							 Scene[i].item[j].chl=0;
000032  f2401091          MOV      r0,#0x191
000036  4368              MULS     r0,r5,r0
000038  eb020040          ADD      r0,r2,r0,LSL #1
00003c  1c80              ADDS     r0,r0,#2
00003e  eb001004          ADD      r0,r0,r4,LSL #4
000042  7101              STRB     r1,[r0,#4]
;;;592    							 Scene[i].item[j].dat[0]=0;
000044  f2401091          MOV      r0,#0x191
000048  4368              MULS     r0,r5,r0
00004a  eb020040          ADD      r0,r2,r0,LSL #1
00004e  1c80              ADDS     r0,r0,#2
000050  eb001004          ADD      r0,r0,r4,LSL #4
000054  71c1              STRB     r1,[r0,#7]
;;;593    							 Scene[i].item[j].dat[1]=0;
000056  f2401091          MOV      r0,#0x191
00005a  4368              MULS     r0,r5,r0
00005c  eb020040          ADD      r0,r2,r0,LSL #1
000060  1c80              ADDS     r0,r0,#2
000062  eb001004          ADD      r0,r0,r4,LSL #4
000066  7201              STRB     r1,[r0,#8]
;;;594    							 Scene[i].item[j].dat[2]=0;
000068  f2401091          MOV      r0,#0x191
00006c  4368              MULS     r0,r5,r0
00006e  eb020040          ADD      r0,r2,r0,LSL #1
000072  1c80              ADDS     r0,r0,#2
000074  eb001004          ADD      r0,r0,r4,LSL #4
000078  7241              STRB     r1,[r0,#9]
;;;595    							 Scene[i].item[j].dlytime=0;
00007a  f2401091          MOV      r0,#0x191
00007e  4368              MULS     r0,r5,r0
000080  eb020040          ADD      r0,r2,r0,LSL #1
000084  1c80              ADDS     r0,r0,#2
000086  eb001004          ADD      r0,r0,r4,LSL #4
00008a  8181              STRH     r1,[r0,#0xc]
;;;596    							 Scene[i].item[j].sum=0;
00008c  f2401091          MOV      r0,#0x191
000090  4368              MULS     r0,r5,r0
000092  eb020040          ADD      r0,r2,r0,LSL #1
000096  1c80              ADDS     r0,r0,#2
000098  eb001004          ADD      r0,r0,r4,LSL #4
00009c  7381              STRB     r1,[r0,#0xe]
;;;597    							 Write_Scene(i,j);
00009e  4621              MOV      r1,r4
0000a0  4628              MOV      r0,r5
0000a2  f7fffffe          BL       Write_Scene
0000a6  1c60              ADDS     r0,r4,#1              ;587
0000a8  b2c4              UXTB     r4,r0                 ;587
                  |L16.170|
0000aa  2c32              CMP      r4,#0x32              ;587
0000ac  dbad              BLT      |L16.10|
0000ae  1c68              ADDS     r0,r5,#1              ;585
0000b0  b2c5              UXTB     r5,r0                 ;585
                  |L16.178|
0000b2  2d08              CMP      r5,#8                 ;585
0000b4  dba7              BLT      |L16.6|
;;;598    					 }
;;;599    			}
;;;600    }
0000b6  bd70              POP      {r4-r6,pc}
;;;601    
                          ENDP

                  |L16.184|
                          DCD      Scene

                          AREA ||i.Ir_Config_Add||, CODE, READONLY, ALIGN=2

                  Ir_Config_Add PROC
;;;1042   //index表示转发器的通道
;;;1043   void Ir_Config_Add(uint8_t index,uint8_t key,uint8_t mode)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1044   {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;1045   		 uint8_t t1,t2;
;;;1046   	   t1=Ir.cmd_key/8;
00000a  4910              LDR      r1,|L17.76|
00000c  7a48              LDRB     r0,[r1,#9]  ; Ir
00000e  17c1              ASRS     r1,r0,#31
000010  eb007151          ADD      r1,r0,r1,LSR #29
000014  10cd              ASRS     r5,r1,#3
;;;1047   	   t2=Ir.cmd_key%8;
000016  490d              LDR      r1,|L17.76|
000018  7a48              LDRB     r0,[r1,#9]  ; Ir
00001a  17c1              ASRS     r1,r0,#31
00001c  eb007151          ADD      r1,r0,r1,LSR #29
000020  10c9              ASRS     r1,r1,#3
000022  eba001c1          SUB      r1,r0,r1,LSL #3
000026  b2ce              UXTB     r6,r1
;;;1048   	   Pannel.item[index].irflagbuf[t1] |=(1<<t2);
000028  ebc41104          RSB      r1,r4,r4,LSL #4
00002c  4808              LDR      r0,|L17.80|
00002e  4408              ADD      r0,r0,r1
000030  5d41              LDRB     r1,[r0,r5]
000032  2001              MOVS     r0,#1
000034  40b0              LSLS     r0,r0,r6
000036  4301              ORRS     r1,r1,r0
000038  ebc41204          RSB      r2,r4,r4,LSL #4
00003c  4804              LDR      r0,|L17.80|
00003e  4410              ADD      r0,r0,r2
000040  5541              STRB     r1,[r0,r5]
;;;1049   		 Write_Pannel_Table(index);
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       Write_Pannel_Table
;;;1050   }
000048  e8bd81f0          POP      {r4-r8,pc}
;;;1051   
                          ENDP

                  |L17.76|
                          DCD      ||Ir||
                  |L17.80|
                          DCD      Pannel+0x1

                          AREA ||i.Ir_Config_Del||, CODE, READONLY, ALIGN=2

                  Ir_Config_Del PROC
;;;1053   //index表示转发器的通道
;;;1054   void Ir_Config_Del(uint8_t index,uint8_t key,uint8_t mode)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1055   {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;1056   		 uint8_t t1,t2;
;;;1057   	   t1=Ir.cmd_key/8;
00000a  4910              LDR      r1,|L18.76|
00000c  7a48              LDRB     r0,[r1,#9]  ; Ir
00000e  17c1              ASRS     r1,r0,#31
000010  eb007151          ADD      r1,r0,r1,LSR #29
000014  10cd              ASRS     r5,r1,#3
;;;1058   	   t2=Ir.cmd_key%8;
000016  490d              LDR      r1,|L18.76|
000018  7a48              LDRB     r0,[r1,#9]  ; Ir
00001a  17c1              ASRS     r1,r0,#31
00001c  eb007151          ADD      r1,r0,r1,LSR #29
000020  10c9              ASRS     r1,r1,#3
000022  eba001c1          SUB      r1,r0,r1,LSL #3
000026  b2ce              UXTB     r6,r1
;;;1059   	   Pannel.item[index].irflagbuf[t1] &=~(1<<t2);
000028  ebc41104          RSB      r1,r4,r4,LSL #4
00002c  4808              LDR      r0,|L18.80|
00002e  4408              ADD      r0,r0,r1
000030  5d40              LDRB     r0,[r0,r5]
000032  2101              MOVS     r1,#1
000034  40b1              LSLS     r1,r1,r6
000036  4388              BICS     r0,r0,r1
000038  ebc41204          RSB      r2,r4,r4,LSL #4
00003c  4904              LDR      r1,|L18.80|
00003e  4411              ADD      r1,r1,r2
000040  5548              STRB     r0,[r1,r5]
;;;1060   		 Write_Pannel_Table(index);
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       Write_Pannel_Table
;;;1061   }
000048  e8bd81f0          POP      {r4-r8,pc}
;;;1062   /*
                          ENDP

                  |L18.76|
                          DCD      ||Ir||
                  |L18.80|
                          DCD      Pannel+0x1

                          AREA ||i.Ir_SetupLoad_Test||, CODE, READONLY, ALIGN=2

                  Ir_SetupLoad_Test PROC
;;;892    //数据分包和数据组包
;;;893    void Ir_SetupLoad_Test(void)
000000  22fe              MOVS     r2,#0xfe
;;;894    {
;;;895    						uint8_t i;
;;;896    						uint8_t chksum;
;;;897    						Ir.cmd_key=0xfe;																	//键值
000002  4b28              LDR      r3,|L19.164|
000004  725a              STRB     r2,[r3,#9]
;;;898    						//复制遥控器类型
;;;899    	          Ir.typelen=99;																		//遥控器类型长度
000006  2263              MOVS     r2,#0x63
000008  745a              STRB     r2,[r3,#0x11]
;;;900    	          chksum=0;
00000a  2100              MOVS     r1,#0
;;;901    						for(i=0;i<Ir.typelen;i++)
00000c  2000              MOVS     r0,#0
00000e  e007              B        |L19.32|
                  |L19.16|
;;;902    						{
;;;903    									Ir.typebuf[i]=i;
000010  4a24              LDR      r2,|L19.164|
000012  3212              ADDS     r2,r2,#0x12
000014  5410              STRB     r0,[r2,r0]
;;;904    							    chksum=chksum+Ir.typebuf[i];
000016  5c12              LDRB     r2,[r2,r0]
000018  440a              ADD      r2,r2,r1
00001a  b2d1              UXTB     r1,r2
00001c  1c42              ADDS     r2,r0,#1              ;901
00001e  b2d0              UXTB     r0,r2                 ;901
                  |L19.32|
000020  4a20              LDR      r2,|L19.164|
000022  7c52              LDRB     r2,[r2,#0x11]         ;901  ; Ir
000024  4282              CMP      r2,r0                 ;901
000026  dcf3              BGT      |L19.16|
;;;905    						}
;;;906    						Ir.typebuf[Ir.typelen]=chksum;										//累加和
000028  4a1e              LDR      r2,|L19.164|
00002a  7c53              LDRB     r3,[r2,#0x11]  ; Ir
00002c  3212              ADDS     r2,r2,#0x12
00002e  54d1              STRB     r1,[r2,r3]
;;;907    						Ir.typelen=Ir.typelen+1;
000030  3a12              SUBS     r2,r2,#0x12
000032  7c52              LDRB     r2,[r2,#0x11]  ; Ir
000034  1c52              ADDS     r2,r2,#1
000036  4b1b              LDR      r3,|L19.164|
000038  745a              STRB     r2,[r3,#0x11]
;;;908    						//复制按键数据
;;;909    						Ir.keylen=99;
00003a  2263              MOVS     r2,#0x63
00003c  f8832076          STRB     r2,[r3,#0x76]
;;;910    						chksum=0;
000040  2100              MOVS     r1,#0
;;;911    						if(Ir.keylen>IR_DAT_MAX)Ir.keylen=IR_DAT_MAX;
000042  461a              MOV      r2,r3
000044  f8922076          LDRB     r2,[r2,#0x76]  ; Ir
000048  2a64              CMP      r2,#0x64
00004a  dd02              BLE      |L19.82|
00004c  2264              MOVS     r2,#0x64
00004e  f8832076          STRB     r2,[r3,#0x76]
                  |L19.82|
;;;912    						for(i=0;i<Ir.keylen;i++)
000052  2000              MOVS     r0,#0
000054  e00a              B        |L19.108|
                  |L19.86|
;;;913    						{
;;;914    									Ir.keybuf[i]=i+0x80;
000056  f1000280          ADD      r2,r0,#0x80
00005a  b2d3              UXTB     r3,r2
00005c  4a11              LDR      r2,|L19.164|
00005e  3277              ADDS     r2,r2,#0x77
000060  5413              STRB     r3,[r2,r0]
;;;915    									chksum=chksum+Ir.keybuf[i];
000062  5c12              LDRB     r2,[r2,r0]
000064  440a              ADD      r2,r2,r1
000066  b2d1              UXTB     r1,r2
000068  1c42              ADDS     r2,r0,#1              ;912
00006a  b2d0              UXTB     r0,r2                 ;912
                  |L19.108|
00006c  4a0d              LDR      r2,|L19.164|
00006e  f8922076          LDRB     r2,[r2,#0x76]         ;912  ; Ir
000072  4282              CMP      r2,r0                 ;912
000074  dcef              BGT      |L19.86|
;;;916    						}
;;;917                Ir.keybuf[Ir.keylen]=chksum;										//累加和
000076  4a0b              LDR      r2,|L19.164|
000078  f8923076          LDRB     r3,[r2,#0x76]  ; Ir
00007c  3277              ADDS     r2,r2,#0x77
00007e  54d1              STRB     r1,[r2,r3]
;;;918    						Ir.keylen=Ir.keylen+1;
000080  3a77              SUBS     r2,r2,#0x77
000082  f8922076          LDRB     r2,[r2,#0x76]  ; Ir
000086  1c52              ADDS     r2,r2,#1
000088  4b06              LDR      r3,|L19.164|
00008a  f8832076          STRB     r2,[r3,#0x76]
;;;919    						
;;;920    						Ir.flag=1;																	//表示数据装入完毕
00008e  2201              MOVS     r2,#1
000090  705a              STRB     r2,[r3,#1]
;;;921    						Ir.wait=0;
000092  2200              MOVS     r2,#0
000094  709a              STRB     r2,[r3,#2]
;;;922    						Ir.curps=0;
000096  731a              STRB     r2,[r3,#0xc]
;;;923    						Ir.serial=0;
000098  721a              STRB     r2,[r3,#8]
;;;924    						Ir.curtype=0;																		//先发送数据
00009a  735a              STRB     r2,[r3,#0xd]
;;;925    						Ir.sendtime=SEND_TIME_MAX;									//最大发送时间	
00009c  f44f7216          MOV      r2,#0x258
0000a0  81da              STRH     r2,[r3,#0xe]
;;;926    }
0000a2  4770              BX       lr
;;;927    
                          ENDP

                  |L19.164|
                          DCD      ||Ir||

                          AREA ||i.Msg_hanndle||, CODE, READONLY, ALIGN=2

                  Msg_hanndle PROC
;;;822    */
;;;823    void Msg_hanndle(void)
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;824    {
;;;825    	
;;;826    #if 0
;;;827    			static uint8_t tick=0;
;;;828    			uint8_t cmd,index,type;
;;;829    			uint16_t type_cmd=0;
;;;830    			MSG_T mymsg;
;;;831    			uint8_t rt;
;;;832    	    tick++;
;;;833    	    if(tick<5)return;
;;;834    			tick=0;
;;;835    			rt=bsp_GetMsg(&mymsg);
;;;836    			if(rt==1)
;;;837    			{
;;;838    					type_cmd=mymsg.MsgCode;
;;;839    					type=(uint8_t)(type_cmd>>8);
;;;840    					cmd=(uint8_t)(type_cmd&0x00ff);
;;;841    					index=(uint8_t)mymsg.MsgParam;
;;;842    					if(type==0x01)
;;;843    					{
;;;844    							IT1_Turn_DataLoad(index,cmd,0);
;;;845    					}
;;;846    					else
;;;847    					{
;;;848    							IT1_Key_DataLoad(index,cmd,0);
;;;849    					}
;;;850    			}
;;;851    #else
;;;852    			static uint8_t tickbuf[8]={0,0,0,0,0,0,0,0};
;;;853    			uint8_t cmd,index,type,i;
;;;854    			uint16_t type_cmd=0;
000004  f04f0800          MOV      r8,#0
;;;855    			MSG_T mymsg;
;;;856    			uint8_t rt;
;;;857    			rt=bsp_GetMsg(&mymsg);
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       bsp_GetMsg
00000e  4681              MOV      r9,r0
;;;858    			if(rt==1)
000010  f1b90f01          CMP      r9,#1
000014  d112              BNE      |L20.60|
;;;859    			{
;;;860    					type_cmd=mymsg.MsgCode;
000016  f8bd8000          LDRH     r8,[sp,#0]
;;;861    					type=(uint8_t)(type_cmd>>8);
00001a  ea4f2728          ASR      r7,r8,#8
;;;862    					cmd=(uint8_t)(type_cmd&0x00ff);
00001e  f00806ff          AND      r6,r8,#0xff
;;;863    					index=(uint8_t)mymsg.MsgParam;
000022  9801              LDR      r0,[sp,#4]
000024  b2c5              UXTB     r5,r0
;;;864    				
;;;865    				  //处理旋转遥控器
;;;866    					if(type==0x01)
000026  2f01              CMP      r7,#1
000028  d103              BNE      |L20.50|
;;;867    					{
;;;868    							tickbuf[index]=7; 
00002a  2007              MOVS     r0,#7
00002c  4910              LDR      r1,|L20.112|
00002e  5548              STRB     r0,[r1,r5]
000030  e004              B        |L20.60|
                  |L20.50|
;;;869    							//IT1_Turn_DataLoad(index,cmd,0);
;;;870    					}
;;;871    					else
;;;872    					{
;;;873    							IT1_Key_DataLoad(index,cmd,0);
000032  2200              MOVS     r2,#0
000034  4631              MOV      r1,r6
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       IT1_Key_DataLoad
                  |L20.60|
;;;874    					}
;;;875    			}
;;;876    			
;;;877    			//=======================================================================
;;;878    			for(i=0;i<8;i++)
00003c  2400              MOVS     r4,#0
00003e  e013              B        |L20.104|
                  |L20.64|
;;;879    			{
;;;880    					if(tickbuf[i]>0)tickbuf[i]--;
000040  480b              LDR      r0,|L20.112|
000042  5d00              LDRB     r0,[r0,r4]
000044  2800              CMP      r0,#0
000046  dd04              BLE      |L20.82|
000048  4809              LDR      r0,|L20.112|
00004a  5d00              LDRB     r0,[r0,r4]
00004c  1e40              SUBS     r0,r0,#1
00004e  4908              LDR      r1,|L20.112|
000050  5508              STRB     r0,[r1,r4]
                  |L20.82|
;;;881    				  if(tickbuf[i]==1)
000052  4807              LDR      r0,|L20.112|
000054  5d00              LDRB     r0,[r0,r4]
000056  2801              CMP      r0,#1
000058  d104              BNE      |L20.100|
;;;882    					{
;;;883    						  IT1_Turn_DataLoad(i,7,0);
00005a  2200              MOVS     r2,#0
00005c  2107              MOVS     r1,#7
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       IT1_Turn_DataLoad
                  |L20.100|
000064  1c60              ADDS     r0,r4,#1              ;878
000066  b2c4              UXTB     r4,r0                 ;878
                  |L20.104|
000068  2c08              CMP      r4,#8                 ;878
00006a  dbe9              BLT      |L20.64|
;;;884    					}
;;;885    				
;;;886    			}
;;;887    			
;;;888    #endif
;;;889    }
00006c  e8bd87fc          POP      {r2-r10,pc}
;;;890    //======================================================================================================
                          ENDP

                  |L20.112|
                          DCD      tickbuf

                          AREA ||i.Pannel_Table_Refresh||, CODE, READONLY, ALIGN=2

                  Pannel_Table_Refresh PROC
;;;928    //======================================================================================================
;;;929    void Pannel_Table_Refresh(uint8_t index,uint8_t serial,uint8_t *pdat)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;930    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;931    				  uint8_t i,j/*,k*/;
;;;932    //	        uint8_t flag;
;;;933    //					if(index==0xe0)i=0;	
;;;934    //					else					 i=32;
;;;935    	
;;;936    //					for(j=0;j<4;j++)
;;;937    //					{
;;;938    //							flag=*(pdat+j);
;;;939    //							for(k=0;k<8;k++)
;;;940    //							{
;;;941    //									if((flag&0x01)==0x01)
;;;942    //									{
;;;943    //												Pannel.item[i].flag=0x01;				//使用标记
;;;944    //												//Pannel.item[i].type=0x01;				//默认只单击																 
;;;945    //									}
;;;946    //									else
;;;947    //									{
;;;948    //												Pannel.item[i].flag=0x00;					//使用标记
;;;949    //												//Pannel.item[i].type=0x00;				//默认只单击	
;;;950    //									}
;;;951    //									Write_Pannel_Table(i);									//键值
;;;952    //									i++;
;;;953    //									flag=flag>>1;
;;;954    //							}
;;;955    //					}
;;;956    
;;;957    
;;;958    						if(serial==0xe0)i=0;	
00000a  2fe0              CMP      r7,#0xe0
00000c  d101              BNE      |L21.18|
00000e  2500              MOVS     r5,#0
000010  e000              B        |L21.20|
                  |L21.18|
;;;959    						else					  i=4;
000012  2504              MOVS     r5,#4
                  |L21.20|
;;;960    					
;;;961    						for(j=0;j<4;j++)
000014  2400              MOVS     r4,#0
000016  e009              B        |L21.44|
                  |L21.24|
;;;962    						{
;;;963    								Pannel.item[index].irflagbuf[i+j]=*(pdat+j);
000018  f8181004          LDRB     r1,[r8,r4]
00001c  ebc61206          RSB      r2,r6,r6,LSL #4
000020  4806              LDR      r0,|L21.60|
000022  4410              ADD      r0,r0,r2
000024  192a              ADDS     r2,r5,r4
000026  5481              STRB     r1,[r0,r2]
000028  1c60              ADDS     r0,r4,#1              ;961
00002a  b2c4              UXTB     r4,r0                 ;961
                  |L21.44|
00002c  2c04              CMP      r4,#4                 ;961
00002e  dbf3              BLT      |L21.24|
;;;964    						}
;;;965    						
;;;966    						Write_Pannel_Table(index);									//键值
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       Write_Pannel_Table
;;;967    						
;;;968    }
000036  e8bd81f0          POP      {r4-r8,pc}
;;;969    
                          ENDP

00003a  0000              DCW      0x0000
                  |L21.60|
                          DCD      Pannel+0x1

                          AREA ||i.Read_Dev||, CODE, READONLY, ALIGN=1

                  Read_Dev PROC
;;;761    */
;;;762    uint8_t Read_Dev(uint8_t type)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;763    {
000004  4604              MOV      r4,r0
;;;764    	 uint8_t err,cnt,buf[3],addr,dat;
;;;765    	  
;;;766    	if(type==TYPE_EE_ADDR_USED)        addr=EE_DEV_USED;
000006  b90c              CBNZ     r4,|L22.12|
000008  2520              MOVS     r5,#0x20
00000a  e01a              B        |L22.66|
                  |L22.12|
;;;767    	else if(type==TYPE_EE_ADDR_ADDR0)  addr=EE_DEV_ADDR0;
00000c  2c01              CMP      r4,#1
00000e  d101              BNE      |L22.20|
000010  2523              MOVS     r5,#0x23
000012  e016              B        |L22.66|
                  |L22.20|
;;;768    	else if(type==TYPE_EE_ADDR_ADDR1)  addr=EE_DEV_ADDR1;
000014  2c02              CMP      r4,#2
000016  d101              BNE      |L22.28|
000018  2526              MOVS     r5,#0x26
00001a  e012              B        |L22.66|
                  |L22.28|
;;;769    	else if(type==TYPE_EE_ADDR_MODE)   addr=EE_DEV_MODE;
00001c  2c03              CMP      r4,#3
00001e  d101              BNE      |L22.36|
000020  2529              MOVS     r5,#0x29
000022  e00e              B        |L22.66|
                  |L22.36|
;;;770    	else if(type==TYPE_EE_ADDR_PROFILE)addr=EE_DEV_PROFILE;
000024  2c04              CMP      r4,#4
000026  d101              BNE      |L22.44|
000028  252c              MOVS     r5,#0x2c
00002a  e00a              B        |L22.66|
                  |L22.44|
;;;771    	else if(type==TYPE_EE_ADDR_TYPES)  addr=EE_DEV_TYPES;
00002c  2c06              CMP      r4,#6
00002e  d101              BNE      |L22.52|
000030  252f              MOVS     r5,#0x2f
000032  e006              B        |L22.66|
                  |L22.52|
;;;772    	else if(type==TYPE_EE_ADDR_TYPESH)  addr=EE_DEV_TYPESH;
000034  2c07              CMP      r4,#7
000036  d101              BNE      |L22.60|
000038  2532              MOVS     r5,#0x32
00003a  e002              B        |L22.66|
                  |L22.60|
;;;773    	else                               return RE_ERR;
00003c  20ff              MOVS     r0,#0xff
                  |L22.62|
;;;774    	
;;;775    	  cnt=2;
;;;776            while(cnt>0)
;;;777    	{
;;;778    		   err=ReadDataFromFlash(addr,&buf[0],3);
;;;779    		  cnt--;
;;;780    		  if(err==0)break;
;;;781    	}
;;;782    	
;;;783    	if((buf[0]==buf[1])&&(buf[1]==buf[2])&&(buf[0]==buf[2]))
;;;784    	{
;;;785    		  return buf[0];
;;;786    	}
;;;787    	else 
;;;788    	{
;;;789    		  if(buf[0]==buf[1])
;;;790    			{
;;;791    				     Write_Dev(buf[0],type);
;;;792    				     dat=buf[0];
;;;793    			}
;;;794    			else if(buf[0]==buf[2])
;;;795    			{
;;;796    				     Write_Dev(buf[0],type);
;;;797    				     dat=buf[0];
;;;798    			}
;;;799    			else if(buf[1]==buf[2])
;;;800    			{
;;;801    				     Write_Dev(buf[1],type);
;;;802    				     dat=buf[1];
;;;803    			}
;;;804    			else
;;;805    			{
;;;806    			             Write_Dev(0xff,type);
;;;807    				     dat=RE_ERR;
;;;808    			}
;;;809    	}	  
;;;810    	return dat;	
;;;811    }
00003e  e8bd83f8          POP      {r3-r9,pc}
                  |L22.66|
000042  f04f0802          MOV      r8,#2                 ;775
000046  e00b              B        |L22.96|
                  |L22.72|
000048  2203              MOVS     r2,#3                 ;778
00004a  4669              MOV      r1,sp                 ;778
00004c  4628              MOV      r0,r5                 ;778
00004e  f7fffffe          BL       ReadDataFromFlash
000052  4607              MOV      r7,r0                 ;778
000054  f1a80001          SUB      r0,r8,#1              ;779
000058  f00008ff          AND      r8,r0,#0xff           ;779
00005c  b907              CBNZ     r7,|L22.96|
00005e  e002              B        |L22.102|
                  |L22.96|
000060  f1b80f00          CMP      r8,#0                 ;776
000064  dcf0              BGT      |L22.72|
                  |L22.102|
000066  bf00              NOP                            ;780
000068  f89d0000          LDRB     r0,[sp,#0]            ;783
00006c  f89d1001          LDRB     r1,[sp,#1]            ;783
000070  4288              CMP      r0,r1                 ;783
000072  d10e              BNE      |L22.146|
000074  f89d0001          LDRB     r0,[sp,#1]            ;783
000078  f89d1002          LDRB     r1,[sp,#2]            ;783
00007c  4288              CMP      r0,r1                 ;783
00007e  d108              BNE      |L22.146|
000080  f89d0000          LDRB     r0,[sp,#0]            ;783
000084  f89d1002          LDRB     r1,[sp,#2]            ;783
000088  4288              CMP      r0,r1                 ;783
00008a  d102              BNE      |L22.146|
00008c  f89d0000          LDRB     r0,[sp,#0]            ;785
000090  e7d5              B        |L22.62|
                  |L22.146|
000092  f89d0000          LDRB     r0,[sp,#0]            ;789
000096  f89d1001          LDRB     r1,[sp,#1]            ;789
00009a  4288              CMP      r0,r1                 ;789
00009c  d107              BNE      |L22.174|
00009e  f89d0000          LDRB     r0,[sp,#0]            ;791
0000a2  4621              MOV      r1,r4                 ;791
0000a4  f7fffffe          BL       Write_Dev
0000a8  f89d6000          LDRB     r6,[sp,#0]            ;792
0000ac  e020              B        |L22.240|
                  |L22.174|
0000ae  f89d0000          LDRB     r0,[sp,#0]            ;794
0000b2  f89d1002          LDRB     r1,[sp,#2]            ;794
0000b6  4288              CMP      r0,r1                 ;794
0000b8  d107              BNE      |L22.202|
0000ba  f89d0000          LDRB     r0,[sp,#0]            ;796
0000be  4621              MOV      r1,r4                 ;796
0000c0  f7fffffe          BL       Write_Dev
0000c4  f89d6000          LDRB     r6,[sp,#0]            ;797
0000c8  e012              B        |L22.240|
                  |L22.202|
0000ca  f89d0001          LDRB     r0,[sp,#1]            ;799
0000ce  f89d1002          LDRB     r1,[sp,#2]            ;799
0000d2  4288              CMP      r0,r1                 ;799
0000d4  d107              BNE      |L22.230|
0000d6  f89d0001          LDRB     r0,[sp,#1]            ;801
0000da  4621              MOV      r1,r4                 ;801
0000dc  f7fffffe          BL       Write_Dev
0000e0  f89d6001          LDRB     r6,[sp,#1]            ;802
0000e4  e004              B        |L22.240|
                  |L22.230|
0000e6  4621              MOV      r1,r4                 ;806
0000e8  20ff              MOVS     r0,#0xff              ;806
0000ea  f7fffffe          BL       Write_Dev
0000ee  26ff              MOVS     r6,#0xff              ;807
                  |L22.240|
0000f0  4630              MOV      r0,r6                 ;810
0000f2  e7a4              B        |L22.62|
;;;812    
                          ENDP


                          AREA ||i.Read_Ex_Table||, CODE, READONLY, ALIGN=2

                  Read_Ex_Table PROC
;;;383    //读取转发表数据
;;;384    uint8_t Read_Ex_Table(void)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;385    {
000004  b089              SUB      sp,sp,#0x24
;;;386    	uint8_t i,j,sum,buf[EX_ITEM_NUM],err,cnt=0;
000006  2700              MOVS     r7,#0
;;;387    	uint8_t *pt;
;;;388    		
;;;389      err=0;
000008  46b8              MOV      r8,r7
;;;390    	for(i=0;i<EX_TABLE_NUM;i++)
00000a  2500              MOVS     r5,#0
00000c  e07e              B        |L23.268|
                  |L23.14|
;;;391    	{	
;;;392    		  cnt=2;
00000e  2702              MOVS     r7,#2
;;;393    		  while(cnt>0)
000010  e00e              B        |L23.48|
                  |L23.18|
;;;394    			{	
;;;395    				err=ReadDataFromFlash(EX_TABLE_ADDR+i*(EX_ITEM_NUM),&buf[0],EX_ITEM_NUM);
000012  f44f7180          MOV      r1,#0x100
000016  eb011045          ADD      r0,r1,r5,LSL #5
00001a  2220              MOVS     r2,#0x20
00001c  a901              ADD      r1,sp,#4
00001e  f7fffffe          BL       ReadDataFromFlash
000022  4680              MOV      r8,r0
;;;396    				cnt--;
000024  1e78              SUBS     r0,r7,#1
000026  b2c7              UXTB     r7,r0
;;;397    				if(err==0)break;
000028  f1b80f00          CMP      r8,#0
00002c  d100              BNE      |L23.48|
00002e  e001              B        |L23.52|
                  |L23.48|
000030  2f00              CMP      r7,#0                 ;393
000032  dcee              BGT      |L23.18|
                  |L23.52|
000034  bf00              NOP      
;;;398    			}
;;;399    		  sum=0;
000036  2600              MOVS     r6,#0
;;;400    		  for(j=0;j<EX_ITEM_NUM-1;j++)sum=sum+buf[j];
000038  2400              MOVS     r4,#0
00003a  e005              B        |L23.72|
                  |L23.60|
00003c  a801              ADD      r0,sp,#4
00003e  5d00              LDRB     r0,[r0,r4]
000040  4430              ADD      r0,r0,r6
000042  b2c6              UXTB     r6,r0
000044  1c60              ADDS     r0,r4,#1
000046  b2c4              UXTB     r4,r0
                  |L23.72|
000048  2c1f              CMP      r4,#0x1f
00004a  dbf7              BLT      |L23.60|
;;;401    		  if(sum==buf[EX_ITEM_NUM-1])											//校验通过，装入转发表
00004c  f89d0023          LDRB     r0,[sp,#0x23]
000050  42b0              CMP      r0,r6
000052  d10f              BNE      |L23.116|
;;;402    			{
;;;403    				  pt=(uint8_t *)(Ex_Table.Exchange+i);
000054  ebc501c5          RSB      r1,r5,r5,LSL #3
000058  4832              LDR      r0,|L23.292|
00005a  eb000941          ADD      r9,r0,r1,LSL #1
;;;404    				  for(j=0;j<EX_ITEM_NUM;j++)*(pt+j)=buf[j];
00005e  2400              MOVS     r4,#0
000060  e005              B        |L23.110|
                  |L23.98|
000062  a801              ADD      r0,sp,#4
000064  5d00              LDRB     r0,[r0,r4]
000066  f8090004          STRB     r0,[r9,r4]
00006a  1c60              ADDS     r0,r4,#1
00006c  b2c4              UXTB     r4,r0
                  |L23.110|
00006e  2c20              CMP      r4,#0x20
000070  dbf7              BLT      |L23.98|
000072  e049              B        |L23.264|
                  |L23.116|
;;;405    			}
;;;406    			else																						  //校验不通道，读备份区
;;;407    			{
;;;408    				  cnt=2;
000074  2702              MOVS     r7,#2
;;;409    				  while(cnt>0)
000076  e00e              B        |L23.150|
                  |L23.120|
;;;410    					{
;;;411    						err=ReadDataFromFlash(EX_TABLE_ADDR_BCK+i*(EX_ITEM_NUM),&buf[0],EX_ITEM_NUM);
000078  f44f7100          MOV      r1,#0x200
00007c  eb011045          ADD      r0,r1,r5,LSL #5
000080  2220              MOVS     r2,#0x20
000082  a901              ADD      r1,sp,#4
000084  f7fffffe          BL       ReadDataFromFlash
000088  4680              MOV      r8,r0
;;;412    						cnt--;
00008a  1e78              SUBS     r0,r7,#1
00008c  b2c7              UXTB     r7,r0
;;;413    						if(err==0)break;
00008e  f1b80f00          CMP      r8,#0
000092  d100              BNE      |L23.150|
000094  e001              B        |L23.154|
                  |L23.150|
000096  2f00              CMP      r7,#0                 ;409
000098  dcee              BGT      |L23.120|
                  |L23.154|
00009a  bf00              NOP      
;;;414    					}
;;;415    					sum=0;
00009c  2600              MOVS     r6,#0
;;;416    					for(j=0;j<EX_ITEM_NUM-1;j++)sum=sum+buf[j];
00009e  2400              MOVS     r4,#0
0000a0  e005              B        |L23.174|
                  |L23.162|
0000a2  a801              ADD      r0,sp,#4
0000a4  5d00              LDRB     r0,[r0,r4]
0000a6  4430              ADD      r0,r0,r6
0000a8  b2c6              UXTB     r6,r0
0000aa  1c60              ADDS     r0,r4,#1
0000ac  b2c4              UXTB     r4,r0
                  |L23.174|
0000ae  2c1f              CMP      r4,#0x1f
0000b0  dbf7              BLT      |L23.162|
;;;417    					
;;;418    					if(sum==buf[EX_ITEM_NUM-1])											//校验通过，装入转发表
0000b2  f89d0023          LDRB     r0,[sp,#0x23]
0000b6  42b0              CMP      r0,r6
0000b8  d112              BNE      |L23.224|
;;;419    					{				
;;;420    							 pt=(uint8_t *)(Ex_Table.Exchange+i);
0000ba  ebc501c5          RSB      r1,r5,r5,LSL #3
0000be  4819              LDR      r0,|L23.292|
0000c0  eb000941          ADD      r9,r0,r1,LSL #1
;;;421    							 for(j=0;j<EX_ITEM_NUM;j++)*(pt+j)=buf[j];
0000c4  2400              MOVS     r4,#0
0000c6  e005              B        |L23.212|
                  |L23.200|
0000c8  a801              ADD      r0,sp,#4
0000ca  5d00              LDRB     r0,[r0,r4]
0000cc  f8090004          STRB     r0,[r9,r4]
0000d0  1c60              ADDS     r0,r4,#1
0000d2  b2c4              UXTB     r4,r0
                  |L23.212|
0000d4  2c20              CMP      r4,#0x20
0000d6  dbf7              BLT      |L23.200|
;;;422    							 Write_Ex_Table(i);
0000d8  4628              MOV      r0,r5
0000da  f7fffffe          BL       Write_Ex_Table
0000de  e013              B        |L23.264|
                  |L23.224|
;;;423                					
;;;424    				  }
;;;425    					else																							//还是不等于，没辙了，清0
;;;426    					{
;;;427    							Exchangebuf.type=0xff;
0000e0  20ff              MOVS     r0,#0xff
0000e2  4911              LDR      r1,|L23.296|
0000e4  7008              STRB     r0,[r1,#0]
;;;428    							Exchangebuf.addr=0xff;
0000e6  7048              STRB     r0,[r1,#1]
;;;429    							Exchangebuf.stu=0xff;
0000e8  7088              STRB     r0,[r1,#2]
;;;430    							Exchangebuf.wl_addr[0]=0xff;
0000ea  70c8              STRB     r0,[r1,#3]
;;;431    							Exchangebuf.wl_addr[1]=0xff;
0000ec  21ff              MOVS     r1,#0xff
0000ee  480e              LDR      r0,|L23.296|
0000f0  7101              STRB     r1,[r0,#4]
;;;432    							Exchangebuf.wl_addr[2]=0xff;
0000f2  7141              STRB     r1,[r0,#5]
;;;433    							Exchangebuf.channel=0xff;
0000f4  20ff              MOVS     r0,#0xff
0000f6  490c              LDR      r1,|L23.296|
0000f8  7188              STRB     r0,[r1,#6]
;;;434    						  Exchangebuf.sync=0;
0000fa  2000              MOVS     r0,#0
0000fc  8148              STRH     r0,[r1,#0xa]
;;;435    							Exchangebuf.secret=0xff;
0000fe  20ff              MOVS     r0,#0xff
000100  7308              STRB     r0,[r1,#0xc]
;;;436    							Write_Ex_Table(i);						  
000102  4628              MOV      r0,r5
000104  f7fffffe          BL       Write_Ex_Table
                  |L23.264|
000108  1c68              ADDS     r0,r5,#1              ;390
00010a  b2c5              UXTB     r5,r0                 ;390
                  |L23.268|
00010c  2d08              CMP      r5,#8                 ;390
00010e  f6ffaf7e          BLT      |L23.14|
;;;437    					}
;;;438    			}
;;;439    	}
;;;440    	if(err!=0)return RE_ERR;
000112  f1b80f00          CMP      r8,#0
000116  d003              BEQ      |L23.288|
000118  20ff              MOVS     r0,#0xff
                  |L23.282|
;;;441    	else      return RE_OK;
;;;442    }
00011a  b009              ADD      sp,sp,#0x24
00011c  e8bd83f0          POP      {r4-r9,pc}
                  |L23.288|
000120  20fe              MOVS     r0,#0xfe              ;441
000122  e7fa              B        |L23.282|
;;;443    //======================================================================================================
                          ENDP

                  |L23.292|
                          DCD      Ex_Table+0x36
                  |L23.296|
                          DCD      Exchangebuf

                          AREA ||i.Read_Lock_Table||, CODE, READONLY, ALIGN=2

                  Read_Lock_Table PROC
;;;1388   //读取转发表数据
;;;1389   uint8_t Read_Lock_Table(void)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;1390   {
000004  b095              SUB      sp,sp,#0x54
;;;1391   	uint8_t i,j,sum,buf[LOCK_ALLNUM],err,cnt=0;
000006  2600              MOVS     r6,#0
;;;1392   	uint8_t *pt;
;;;1393   		
;;;1394     err=0;
000008  46b0              MOV      r8,r6
;;;1395   	i=0;
00000a  46b1              MOV      r9,r6
;;;1396   	//for(i=0;i<LOCK_ITEMNUM;i++)
;;;1397   	{	
;;;1398   		  cnt=2;
00000c  2602              MOVS     r6,#2
;;;1399   		  while(cnt>0)
00000e  e010              B        |L24.50|
                  |L24.16|
;;;1400   			{	
;;;1401   					err=ReadDataFromFlash(LOCK_TABLE_ADDR+i*(LOCK_ALLNUM),&buf[0],LOCK_ALLNUM);
000010  eb090189          ADD      r1,r9,r9,LSL #2
000014  f44f6280          MOV      r2,#0x400
000018  eb021001          ADD      r0,r2,r1,LSL #4
00001c  2250              MOVS     r2,#0x50
00001e  a901              ADD      r1,sp,#4
000020  f7fffffe          BL       ReadDataFromFlash
000024  4680              MOV      r8,r0
;;;1402   					cnt--;
000026  1e70              SUBS     r0,r6,#1
000028  b2c6              UXTB     r6,r0
;;;1403   					if(err==0)break;
00002a  f1b80f00          CMP      r8,#0
00002e  d100              BNE      |L24.50|
000030  e001              B        |L24.54|
                  |L24.50|
000032  2e00              CMP      r6,#0                 ;1399
000034  dcec              BGT      |L24.16|
                  |L24.54|
000036  bf00              NOP      
;;;1404   			}
;;;1405   		  sum=0;
000038  2500              MOVS     r5,#0
;;;1406   		  for(j=0;j<LOCK_ALLNUM-1;j++)sum=sum+buf[j];
00003a  2400              MOVS     r4,#0
00003c  e005              B        |L24.74|
                  |L24.62|
00003e  a801              ADD      r0,sp,#4
000040  5d00              LDRB     r0,[r0,r4]
000042  4428              ADD      r0,r0,r5
000044  b2c5              UXTB     r5,r0
000046  1c60              ADDS     r0,r4,#1
000048  b2c4              UXTB     r4,r0
                  |L24.74|
00004a  2c4f              CMP      r4,#0x4f
00004c  dbf7              BLT      |L24.62|
;;;1407   		  if(sum==buf[LOCK_ALLNUM-1])											//校验通过，装入转发表
00004e  f89d0053          LDRB     r0,[sp,#0x53]
000052  42a8              CMP      r0,r5
000054  d10a              BNE      |L24.108|
;;;1408   			{
;;;1409   				  pt=(uint8_t *)(&lock.item);
000056  4f23              LDR      r7,|L24.228|
;;;1410   				  for(j=0;j<LOCK_ALLNUM;j++)*(pt+j)=buf[j];
000058  2400              MOVS     r4,#0
00005a  e004              B        |L24.102|
                  |L24.92|
00005c  a801              ADD      r0,sp,#4
00005e  5d00              LDRB     r0,[r0,r4]
000060  5538              STRB     r0,[r7,r4]
000062  1c60              ADDS     r0,r4,#1
000064  b2c4              UXTB     r4,r0
                  |L24.102|
000066  2c50              CMP      r4,#0x50
000068  dbf8              BLT      |L24.92|
00006a  e031              B        |L24.208|
                  |L24.108|
;;;1411   			}
;;;1412   			else																						  //校验不通道，读备份区
;;;1413   			{
;;;1414   				  cnt=2;
00006c  2602              MOVS     r6,#2
;;;1415   				  while(cnt>0)
00006e  e00c              B        |L24.138|
                  |L24.112|
;;;1416   					{
;;;1417   						err=ReadDataFromFlash(LOCK_TABLE_ADDR_BCK+0*(LOCK_ALLNUM),&buf[0],LOCK_ALLNUM);
000070  2250              MOVS     r2,#0x50
000072  a901              ADD      r1,sp,#4
000074  f44f60c0          MOV      r0,#0x600
000078  f7fffffe          BL       ReadDataFromFlash
00007c  4680              MOV      r8,r0
;;;1418   						cnt--;
00007e  1e70              SUBS     r0,r6,#1
000080  b2c6              UXTB     r6,r0
;;;1419   						if(err==0)break;
000082  f1b80f00          CMP      r8,#0
000086  d100              BNE      |L24.138|
000088  e001              B        |L24.142|
                  |L24.138|
00008a  2e00              CMP      r6,#0                 ;1415
00008c  dcf0              BGT      |L24.112|
                  |L24.142|
00008e  bf00              NOP      
;;;1420   					}
;;;1421   					sum=0;
000090  2500              MOVS     r5,#0
;;;1422   					for(j=0;j<LOCK_ALLNUM-1;j++)sum=sum+buf[j];
000092  2400              MOVS     r4,#0
000094  e005              B        |L24.162|
                  |L24.150|
000096  a801              ADD      r0,sp,#4
000098  5d00              LDRB     r0,[r0,r4]
00009a  4428              ADD      r0,r0,r5
00009c  b2c5              UXTB     r5,r0
00009e  1c60              ADDS     r0,r4,#1
0000a0  b2c4              UXTB     r4,r0
                  |L24.162|
0000a2  2c4f              CMP      r4,#0x4f
0000a4  dbf7              BLT      |L24.150|
;;;1423   					
;;;1424   					if(sum==buf[LOCK_ALLNUM-1])											//校验通过，装入转发表
0000a6  f89d0053          LDRB     r0,[sp,#0x53]
0000aa  42a8              CMP      r0,r5
0000ac  d10d              BNE      |L24.202|
;;;1425   					{				
;;;1426   							 pt=(uint8_t *)(&lock.item);
0000ae  4f0d              LDR      r7,|L24.228|
;;;1427   							 for(j=0;j<LOCK_ALLNUM;j++)*(pt+j)=buf[j];
0000b0  2400              MOVS     r4,#0
0000b2  e004              B        |L24.190|
                  |L24.180|
0000b4  a801              ADD      r0,sp,#4
0000b6  5d00              LDRB     r0,[r0,r4]
0000b8  5538              STRB     r0,[r7,r4]
0000ba  1c60              ADDS     r0,r4,#1
0000bc  b2c4              UXTB     r4,r0
                  |L24.190|
0000be  2c50              CMP      r4,#0x50
0000c0  dbf8              BLT      |L24.180|
;;;1428   							 Write_Lock_Table(i);
0000c2  4648              MOV      r0,r9
0000c4  f7fffffe          BL       Write_Lock_Table
0000c8  e002              B        |L24.208|
                  |L24.202|
;;;1429               					
;;;1430   				  }
;;;1431   					else																							//还是不等于，没辙了，清0
;;;1432   					{
;;;1433   							Init_Lock_Table(ALL);
0000ca  20ff              MOVS     r0,#0xff
0000cc  f7fffffe          BL       Init_Lock_Table
                  |L24.208|
;;;1434   					}
;;;1435   			}
;;;1436   	}
;;;1437   	if(err!=0)return RE_ERR;
0000d0  f1b80f00          CMP      r8,#0
0000d4  d003              BEQ      |L24.222|
0000d6  20ff              MOVS     r0,#0xff
                  |L24.216|
;;;1438   	else      return RE_OK;
;;;1439   }
0000d8  b015              ADD      sp,sp,#0x54
0000da  e8bd83f0          POP      {r4-r9,pc}
                  |L24.222|
0000de  20fe              MOVS     r0,#0xfe              ;1438
0000e0  e7fa              B        |L24.216|
                          ENDP

0000e2  0000              DCW      0x0000
                  |L24.228|
                          DCD      lock+0xe

                          AREA ||i.Read_Pannel_Table||, CODE, READONLY, ALIGN=2

                  Read_Pannel_Table PROC
;;;518    
;;;519    uint8_t Read_Pannel_Table(void)
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;520    {
;;;521     	uint8_t i,j,sum,buf[KEY_ITEM_NUM],err,cnt=0;
000004  2700              MOVS     r7,#0
;;;522     	uint8_t *pt;
;;;523     		
;;;524       err=0;
000006  46b8              MOV      r8,r7
;;;525     	for(i=0;i<KEY_NUM;i++)
000008  2500              MOVS     r5,#0
00000a  e086              B        |L25.282|
                  |L25.12|
;;;526     	{	
;;;527     		  cnt=2;
00000c  2702              MOVS     r7,#2
;;;528     		  while(cnt>0)
00000e  e00e              B        |L25.46|
                  |L25.16|
;;;529     			{	
;;;530     				err=ReadDataFromFlash(EE_PANNEL_ADDR+i*(KEY_ITEM_NUM),&buf[0],KEY_ITEM_NUM);
000010  f44f6100          MOV      r1,#0x800
000014  eb011005          ADD      r0,r1,r5,LSL #4
000018  2210              MOVS     r2,#0x10
00001a  4669              MOV      r1,sp
00001c  f7fffffe          BL       ReadDataFromFlash
000020  4680              MOV      r8,r0
;;;531     				cnt--;
000022  1e78              SUBS     r0,r7,#1
000024  b2c7              UXTB     r7,r0
;;;532     				if(err==0)break;
000026  f1b80f00          CMP      r8,#0
00002a  d100              BNE      |L25.46|
00002c  e001              B        |L25.50|
                  |L25.46|
00002e  2f00              CMP      r7,#0                 ;528
000030  dcee              BGT      |L25.16|
                  |L25.50|
000032  bf00              NOP      
;;;533     			}
;;;534     		  sum=0;
000034  2600              MOVS     r6,#0
;;;535     		  for(j=0;j<KEY_ITEM_NUM-1;j++)sum=sum+buf[j];
000036  2400              MOVS     r4,#0
000038  e005              B        |L25.70|
                  |L25.58|
00003a  f81d0004          LDRB     r0,[sp,r4]
00003e  4430              ADD      r0,r0,r6
000040  b2c6              UXTB     r6,r0
000042  1c60              ADDS     r0,r4,#1
000044  b2c4              UXTB     r4,r0
                  |L25.70|
000046  2c0f              CMP      r4,#0xf
000048  dbf7              BLT      |L25.58|
;;;536     		  if(sum==buf[KEY_ITEM_NUM-1])											//校验通过，装入转发表
00004a  f89d000f          LDRB     r0,[sp,#0xf]
00004e  42b0              CMP      r0,r6
000050  d10f              BNE      |L25.114|
;;;537     			{
;;;538     				  pt=(uint8_t *)(Pannel.item+i);
000052  ebc51105          RSB      r1,r5,r5,LSL #4
000056  4837              LDR      r0,|L25.308|
000058  eb010900          ADD      r9,r1,r0
;;;539     				  for(j=0;j<KEY_ITEM_NUM;j++)*(pt+j)=buf[j];
00005c  2400              MOVS     r4,#0
00005e  e005              B        |L25.108|
                  |L25.96|
000060  f81d0004          LDRB     r0,[sp,r4]
000064  f8090004          STRB     r0,[r9,r4]
000068  1c60              ADDS     r0,r4,#1
00006a  b2c4              UXTB     r4,r0
                  |L25.108|
00006c  2c10              CMP      r4,#0x10
00006e  dbf7              BLT      |L25.96|
000070  e051              B        |L25.278|
                  |L25.114|
;;;540     			}
;;;541     			else																						  //校验不通道，读备份区
;;;542     			{
;;;543     				  cnt=2;
000072  2702              MOVS     r7,#2
;;;544     				  while(cnt>0)
000074  e00e              B        |L25.148|
                  |L25.118|
;;;545     					{
;;;546     						err=ReadDataFromFlash(EE_PANNEL_ADDR_BCK+i*(KEY_ITEM_NUM),&buf[0],KEY_ITEM_NUM);
000076  f44f6140          MOV      r1,#0xc00
00007a  eb011005          ADD      r0,r1,r5,LSL #4
00007e  2210              MOVS     r2,#0x10
000080  4669              MOV      r1,sp
000082  f7fffffe          BL       ReadDataFromFlash
000086  4680              MOV      r8,r0
;;;547     						cnt--;
000088  1e78              SUBS     r0,r7,#1
00008a  b2c7              UXTB     r7,r0
;;;548     						if(err==0)break;
00008c  f1b80f00          CMP      r8,#0
000090  d100              BNE      |L25.148|
000092  e001              B        |L25.152|
                  |L25.148|
000094  2f00              CMP      r7,#0                 ;544
000096  dcee              BGT      |L25.118|
                  |L25.152|
000098  bf00              NOP      
;;;549     					}
;;;550     					sum=0;
00009a  2600              MOVS     r6,#0
;;;551     					for(j=0;j<KEY_ITEM_NUM-1;j++)sum=sum+buf[j];
00009c  2400              MOVS     r4,#0
00009e  e005              B        |L25.172|
                  |L25.160|
0000a0  f81d0004          LDRB     r0,[sp,r4]
0000a4  4430              ADD      r0,r0,r6
0000a6  b2c6              UXTB     r6,r0
0000a8  1c60              ADDS     r0,r4,#1
0000aa  b2c4              UXTB     r4,r0
                  |L25.172|
0000ac  2c0f              CMP      r4,#0xf
0000ae  dbf7              BLT      |L25.160|
;;;552     					
;;;553     					if(sum==buf[KEY_ITEM_NUM-1])											//校验通过，装入转发表
0000b0  f89d000f          LDRB     r0,[sp,#0xf]
0000b4  42b0              CMP      r0,r6
0000b6  d112              BNE      |L25.222|
;;;554     					{				
;;;555     						 pt=(uint8_t *)(Pannel.item+i);
0000b8  ebc51105          RSB      r1,r5,r5,LSL #4
0000bc  481d              LDR      r0,|L25.308|
0000be  eb010900          ADD      r9,r1,r0
;;;556     						 for(j=0;j<KEY_ITEM_NUM;j++)*(pt+j)=buf[j];
0000c2  2400              MOVS     r4,#0
0000c4  e005              B        |L25.210|
                  |L25.198|
0000c6  f81d0004          LDRB     r0,[sp,r4]
0000ca  f8090004          STRB     r0,[r9,r4]
0000ce  1c60              ADDS     r0,r4,#1
0000d0  b2c4              UXTB     r4,r0
                  |L25.210|
0000d2  2c10              CMP      r4,#0x10
0000d4  dbf7              BLT      |L25.198|
;;;557    						 Write_Pannel_Table(i);													//2017.0405修改
0000d6  4628              MOV      r0,r5
0000d8  f7fffffe          BL       Write_Pannel_Table
0000dc  e01b              B        |L25.278|
                  |L25.222|
;;;558                 					
;;;559     				  }
;;;560     					else																							//还是不等于，没辙了，清0
;;;561     					{
;;;562     							for(j=0;j<8;j++)Pannel.item[i].irflagbuf[i]=0x00;
0000de  2400              MOVS     r4,#0
0000e0  e007              B        |L25.242|
                  |L25.226|
0000e2  2100              MOVS     r1,#0
0000e4  ebc51205          RSB      r2,r5,r5,LSL #4
0000e8  4812              LDR      r0,|L25.308|
0000ea  4410              ADD      r0,r0,r2
0000ec  5541              STRB     r1,[r0,r5]
0000ee  1c60              ADDS     r0,r4,#1
0000f0  b2c4              UXTB     r4,r0
                  |L25.242|
0000f2  2c08              CMP      r4,#8
0000f4  dbf5              BLT      |L25.226|
;;;563    						  for(j=0;j<7;j++)Pannel.item[i].onoffbuf[i]=0x00;
0000f6  2400              MOVS     r4,#0
0000f8  e008              B        |L25.268|
                  |L25.250|
0000fa  2100              MOVS     r1,#0
0000fc  ebc51205          RSB      r2,r5,r5,LSL #4
000100  480c              LDR      r0,|L25.308|
000102  4410              ADD      r0,r0,r2
000104  3008              ADDS     r0,r0,#8
000106  5541              STRB     r1,[r0,r5]
000108  1c60              ADDS     r0,r4,#1
00010a  b2c4              UXTB     r4,r0
                  |L25.268|
00010c  2c07              CMP      r4,#7
00010e  dbf4              BLT      |L25.250|
;;;564     							//Pannel.item[i].type=0x00;
;;;565     							//Pannel.item[i].tg_id=0x00;
;;;566     							//Pannel.item[i].datalen=0x00;
;;;567     							//Write_Pannel_Table(i);
;;;568    						  Write_Pannel_Table(i);											 //2017.4.05
000110  4628              MOV      r0,r5
000112  f7fffffe          BL       Write_Pannel_Table
                  |L25.278|
000116  1c68              ADDS     r0,r5,#1              ;525
000118  b2c5              UXTB     r5,r0                 ;525
                  |L25.282|
00011a  2d08              CMP      r5,#8                 ;525
00011c  f6ffaf76          BLT      |L25.12|
;;;569     					}
;;;570     			}
;;;571     	}
;;;572     	if(err!=0)return RE_ERR;
000120  f1b80f00          CMP      r8,#0
000124  d003              BEQ      |L25.302|
000126  20ff              MOVS     r0,#0xff
                  |L25.296|
;;;573     	else      return RE_OK;
;;;574    }
000128  b004              ADD      sp,sp,#0x10
00012a  e8bd87f0          POP      {r4-r10,pc}
                  |L25.302|
00012e  20fe              MOVS     r0,#0xfe              ;573
000130  e7fa              B        |L25.296|
;;;575    
                          ENDP

000132  0000              DCW      0x0000
                  |L25.308|
                          DCD      Pannel+0x1

                          AREA ||i.Read_Scene||, CODE, READONLY, ALIGN=2

                  Read_Scene PROC
;;;651    //读场景数据
;;;652    uint8_t Read_Scene(uint8_t dev_index)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;653    {
000004  4606              MOV      r6,r0
;;;654    	uint8_t i,j,sum,buf[SCENE_ITEM_NUM],err,cnt=0;
000006  f04f0800          MOV      r8,#0
;;;655    	uint8_t *pt;
;;;656    	
;;;657    	uint16_t start_addr;
;;;658    
;;;659      //dev_index=0;
;;;660    	start_addr=EE_DEV_SCENE_ADDR+DEV_SCENE_SIZE*dev_index;	
00000a  f44f7148          MOV      r1,#0x320
00000e  fb06f001          MUL      r0,r6,r1
000012  f5005080          ADD      r0,r0,#0x1000
000016  fa1ffb80          UXTH     r11,r0
;;;661    		
;;;662        err=0;
00001a  f04f0a00          MOV      r10,#0
;;;663    	for(i=0;i<DEV_SCENE_NUM;i++)																											//一共50个场景
00001e  2400              MOVS     r4,#0
000020  e0c9              B        |L26.438|
                  |L26.34|
;;;664    	{	
;;;665    		  cnt=2;
000022  f04f0802          MOV      r8,#2
;;;666    		  while(cnt>0)
000026  e00f              B        |L26.72|
                  |L26.40|
;;;667    			{	
;;;668    				err=ReadDataFromFlash(start_addr+i*SCENE_ITEM_NUM,&buf[0],SCENE_ITEM_NUM);
000028  eb0b1104          ADD      r1,r11,r4,LSL #4
00002c  b288              UXTH     r0,r1
00002e  2210              MOVS     r2,#0x10
000030  4669              MOV      r1,sp
000032  f7fffffe          BL       ReadDataFromFlash
000036  4682              MOV      r10,r0
;;;669    				cnt--;
000038  f1a80001          SUB      r0,r8,#1
00003c  f00008ff          AND      r8,r0,#0xff
;;;670    				if(err==0)break;
000040  f1ba0f00          CMP      r10,#0
000044  d100              BNE      |L26.72|
000046  e002              B        |L26.78|
                  |L26.72|
000048  f1b80f00          CMP      r8,#0                 ;666
00004c  dcec              BGT      |L26.40|
                  |L26.78|
00004e  bf00              NOP      
;;;671    			}
;;;672    		  sum=0;
000050  2700              MOVS     r7,#0
;;;673    		  for(j=0;j<SCENE_ITEM_NUM-1;j++)sum=sum+buf[j];
000052  2500              MOVS     r5,#0
000054  e005              B        |L26.98|
                  |L26.86|
000056  f81d0005          LDRB     r0,[sp,r5]
00005a  4438              ADD      r0,r0,r7
00005c  b2c7              UXTB     r7,r0
00005e  1c68              ADDS     r0,r5,#1
000060  b2c5              UXTB     r5,r0
                  |L26.98|
000062  2d0f              CMP      r5,#0xf
000064  dbf7              BLT      |L26.86|
;;;674    		  if(sum==buf[SCENE_ITEM_NUM-1])											//校验通过，装入转发表
000066  f89d000f          LDRB     r0,[sp,#0xf]
00006a  42b8              CMP      r0,r7
00006c  d113              BNE      |L26.150|
;;;675    			{
;;;676    				  pt=(uint8_t *)(Scene[dev_index].item+i);
00006e  f2401091          MOV      r0,#0x191
000072  4370              MULS     r0,r6,r0
000074  4956              LDR      r1,|L26.464|
000076  eb010040          ADD      r0,r1,r0,LSL #1
00007a  1c80              ADDS     r0,r0,#2
00007c  eb001904          ADD      r9,r0,r4,LSL #4
;;;677    				  for(j=0;j<SCENE_ITEM_NUM;j++)*(pt+j)=buf[j];
000080  2500              MOVS     r5,#0
000082  e005              B        |L26.144|
                  |L26.132|
000084  f81d0005          LDRB     r0,[sp,r5]
000088  f8090005          STRB     r0,[r9,r5]
00008c  1c68              ADDS     r0,r5,#1
00008e  b2c5              UXTB     r5,r0
                  |L26.144|
000090  2d10              CMP      r5,#0x10
000092  dbf7              BLT      |L26.132|
000094  e08d              B        |L26.434|
                  |L26.150|
;;;678    			}
;;;679    			else																						  			//校验不通道，读备份区
;;;680    			{
;;;681    				  cnt=2;
000096  f04f0802          MOV      r8,#2
;;;682    				  while(cnt>0)
00009a  e011              B        |L26.192|
                  |L26.156|
;;;683    					{
;;;684    						err=ReadDataFromFlash(start_addr+i*SCENE_ITEM_NUM+SCENE_BCK_OFFSET,&buf[0],SCENE_ITEM_NUM);
00009c  eb0b1104          ADD      r1,r11,r4,LSL #4
0000a0  f5014180          ADD      r1,r1,#0x4000
0000a4  b288              UXTH     r0,r1
0000a6  2210              MOVS     r2,#0x10
0000a8  4669              MOV      r1,sp
0000aa  f7fffffe          BL       ReadDataFromFlash
0000ae  4682              MOV      r10,r0
;;;685    						cnt--;
0000b0  f1a80001          SUB      r0,r8,#1
0000b4  f00008ff          AND      r8,r0,#0xff
;;;686    						if(err==0)break;
0000b8  f1ba0f00          CMP      r10,#0
0000bc  d100              BNE      |L26.192|
0000be  e002              B        |L26.198|
                  |L26.192|
0000c0  f1b80f00          CMP      r8,#0                 ;682
0000c4  dcea              BGT      |L26.156|
                  |L26.198|
0000c6  bf00              NOP      
;;;687    					}
;;;688    					sum=0;
0000c8  2700              MOVS     r7,#0
;;;689    					for(j=0;j<SCENE_ITEM_NUM-1;j++)sum=sum+buf[j];
0000ca  2500              MOVS     r5,#0
0000cc  e005              B        |L26.218|
                  |L26.206|
0000ce  f81d0005          LDRB     r0,[sp,r5]
0000d2  4438              ADD      r0,r0,r7
0000d4  b2c7              UXTB     r7,r0
0000d6  1c68              ADDS     r0,r5,#1
0000d8  b2c5              UXTB     r5,r0
                  |L26.218|
0000da  2d0f              CMP      r5,#0xf
0000dc  dbf7              BLT      |L26.206|
;;;690    					
;;;691    					if(sum==buf[SCENE_ITEM_NUM-1])											//校验通过，装入转发表
0000de  f89d000f          LDRB     r0,[sp,#0xf]
0000e2  42b8              CMP      r0,r7
0000e4  d117              BNE      |L26.278|
;;;692    					{				
;;;693    							 pt=(uint8_t *)(Scene[dev_index].item+i);
0000e6  f2401091          MOV      r0,#0x191
0000ea  4370              MULS     r0,r6,r0
0000ec  4938              LDR      r1,|L26.464|
0000ee  eb010040          ADD      r0,r1,r0,LSL #1
0000f2  1c80              ADDS     r0,r0,#2
0000f4  eb001904          ADD      r9,r0,r4,LSL #4
;;;694    							 for(j=0;j<SCENE_ITEM_NUM;j++)*(pt+j)=buf[j];
0000f8  2500              MOVS     r5,#0
0000fa  e005              B        |L26.264|
                  |L26.252|
0000fc  f81d0005          LDRB     r0,[sp,r5]
000100  f8090005          STRB     r0,[r9,r5]
000104  1c68              ADDS     r0,r5,#1
000106  b2c5              UXTB     r5,r0
                  |L26.264|
000108  2d10              CMP      r5,#0x10
00010a  dbf7              BLT      |L26.252|
;;;695    							 Write_Scene(dev_index,i);
00010c  4621              MOV      r1,r4
00010e  4630              MOV      r0,r6
000110  f7fffffe          BL       Write_Scene
000114  e04d              B        |L26.434|
                  |L26.278|
;;;696                					
;;;697    				  }
;;;698    					else																								//还是不等于，没辙了，清0
;;;699    					{
;;;700    							 Scene[dev_index].item[i].flag=0;
000116  2100              MOVS     r1,#0
000118  f2401091          MOV      r0,#0x191
00011c  4370              MULS     r0,r6,r0
00011e  4a2c              LDR      r2,|L26.464|
000120  eb020040          ADD      r0,r2,r0,LSL #1
000124  1c80              ADDS     r0,r0,#2
000126  eb001004          ADD      r0,r0,r4,LSL #4
00012a  7001              STRB     r1,[r0,#0]
;;;701    						   Scene[dev_index].item[i].id=0;
00012c  f2401091          MOV      r0,#0x191
000130  4370              MULS     r0,r6,r0
000132  eb020040          ADD      r0,r2,r0,LSL #1
000136  1c80              ADDS     r0,r0,#2
000138  eb001004          ADD      r0,r0,r4,LSL #4
00013c  8041              STRH     r1,[r0,#2]
;;;702    						   Scene[dev_index].item[i].chl=0;
00013e  f2401091          MOV      r0,#0x191
000142  4370              MULS     r0,r6,r0
000144  eb020040          ADD      r0,r2,r0,LSL #1
000148  1c80              ADDS     r0,r0,#2
00014a  eb001004          ADD      r0,r0,r4,LSL #4
00014e  7101              STRB     r1,[r0,#4]
;;;703    						   Scene[dev_index].item[i].dat[0]=0;
000150  f2401091          MOV      r0,#0x191
000154  4370              MULS     r0,r6,r0
000156  eb020040          ADD      r0,r2,r0,LSL #1
00015a  1c80              ADDS     r0,r0,#2
00015c  eb001004          ADD      r0,r0,r4,LSL #4
000160  71c1              STRB     r1,[r0,#7]
;;;704    						   Scene[dev_index].item[i].dat[1]=0;
000162  f2401091          MOV      r0,#0x191
000166  4370              MULS     r0,r6,r0
000168  eb020040          ADD      r0,r2,r0,LSL #1
00016c  1c80              ADDS     r0,r0,#2
00016e  eb001004          ADD      r0,r0,r4,LSL #4
000172  7201              STRB     r1,[r0,#8]
;;;705    						   Scene[dev_index].item[i].dat[2]=0;
000174  f2401091          MOV      r0,#0x191
000178  4370              MULS     r0,r6,r0
00017a  eb020040          ADD      r0,r2,r0,LSL #1
00017e  1c80              ADDS     r0,r0,#2
000180  eb001004          ADD      r0,r0,r4,LSL #4
000184  7241              STRB     r1,[r0,#9]
;;;706    						   Scene[dev_index].item[i].dlytime=0;
000186  f2401091          MOV      r0,#0x191
00018a  4370              MULS     r0,r6,r0
00018c  eb020040          ADD      r0,r2,r0,LSL #1
000190  1c80              ADDS     r0,r0,#2
000192  eb001004          ADD      r0,r0,r4,LSL #4
000196  8181              STRH     r1,[r0,#0xc]
;;;707    						   Scene[dev_index].item[i].sum=0;
000198  f2401091          MOV      r0,#0x191
00019c  4370              MULS     r0,r6,r0
00019e  eb020040          ADD      r0,r2,r0,LSL #1
0001a2  1c80              ADDS     r0,r0,#2
0001a4  eb001004          ADD      r0,r0,r4,LSL #4
0001a8  7381              STRB     r1,[r0,#0xe]
;;;708    							 Write_Scene(dev_index,i);					  
0001aa  4621              MOV      r1,r4
0001ac  4630              MOV      r0,r6
0001ae  f7fffffe          BL       Write_Scene
                  |L26.434|
0001b2  1c60              ADDS     r0,r4,#1              ;663
0001b4  b2c4              UXTB     r4,r0                 ;663
                  |L26.438|
0001b6  2c32              CMP      r4,#0x32              ;663
0001b8  f6ffaf33          BLT      |L26.34|
;;;709    					}
;;;710    			}
;;;711    	}
;;;712    	if(err!=0)return RE_ERR;
0001bc  f1ba0f00          CMP      r10,#0
0001c0  d003              BEQ      |L26.458|
0001c2  20ff              MOVS     r0,#0xff
                  |L26.452|
;;;713    	else      return RE_OK;
;;;714    }
0001c4  b004              ADD      sp,sp,#0x10
0001c6  e8bd9ff0          POP      {r4-r12,pc}
                  |L26.458|
0001ca  20fe              MOVS     r0,#0xfe              ;713
0001cc  e7fa              B        |L26.452|
;;;715    
                          ENDP

0001ce  0000              DCW      0x0000
                  |L26.464|
                          DCD      Scene

                          AREA ||i.RegTimeClr||, CODE, READONLY, ALIGN=2

                  RegTimeClr PROC
;;;972    //注册间隔常量清零
;;;973    void RegTimeClr(void)
000000  2003              MOVS     r0,#3
;;;974    {
;;;975    	Reg.cnt=3;
000002  4903              LDR      r1,|L27.16|
000004  7008              STRB     r0,[r1,#0]
;;;976    	Reg.time=0;
000006  2000              MOVS     r0,#0
000008  8088              STRH     r0,[r1,#4]
;;;977    	Reg.wait=0;
00000a  7048              STRB     r0,[r1,#1]
;;;978    	Reg.fullflag=0;
00000c  7088              STRB     r0,[r1,#2]
;;;979    	//Reg.flashflag=0;
;;;980    }
00000e  4770              BX       lr
;;;981    
                          ENDP

                  |L27.16|
                          DCD      ||Reg||

                          AREA ||i.Remote_Key_Dis||, CODE, READONLY, ALIGN=2

                  Remote_Key_Dis PROC
;;;1011   //========================================================================================
;;;1012   void Remote_Key_Dis(uint8_t index,uint8_t st)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1013   {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;1014   	
;;;1015   		    uint8_t tmp=0,lin,row,i;
000008  f04f0900          MOV      r9,#0
;;;1016   				
;;;1017   				if(Ex_Table.Exchange[index].type==EX_KEY_54KEY)			tmp=58;
00000c  ebc501c5          RSB      r1,r5,r5,LSL #3
000010  4835              LDR      r0,|L28.232|
000012  f8100011          LDRB     r0,[r0,r1,LSL #1]
000016  28fa              CMP      r0,#0xfa
000018  d102              BNE      |L28.32|
00001a  f04f093a          MOV      r9,#0x3a
00001e  e028              B        |L28.114|
                  |L28.32|
;;;1018   				else if(Ex_Table.Exchange[index].type==EX_KEY_42KEY)tmp=46;
000020  ebc501c5          RSB      r1,r5,r5,LSL #3
000024  4830              LDR      r0,|L28.232|
000026  f8100011          LDRB     r0,[r0,r1,LSL #1]
00002a  28fb              CMP      r0,#0xfb
00002c  d102              BNE      |L28.52|
00002e  f04f092e          MOV      r9,#0x2e
000032  e01e              B        |L28.114|
                  |L28.52|
;;;1019   				else if(Ex_Table.Exchange[index].type==EX_KEY_TURN)	tmp=6;
000034  ebc501c5          RSB      r1,r5,r5,LSL #3
000038  482b              LDR      r0,|L28.232|
00003a  f8100011          LDRB     r0,[r0,r1,LSL #1]
00003e  28fc              CMP      r0,#0xfc
000040  d102              BNE      |L28.72|
000042  f04f0906          MOV      r9,#6
000046  e014              B        |L28.114|
                  |L28.72|
;;;1020   	      else if(Ex_Table.Exchange[index].type==EX_DEV_SUN)	tmp=1;
000048  ebc501c5          RSB      r1,r5,r5,LSL #3
00004c  4826              LDR      r0,|L28.232|
00004e  f8100011          LDRB     r0,[r0,r1,LSL #1]
000052  28e2              CMP      r0,#0xe2
000054  d102              BNE      |L28.92|
000056  f04f0901          MOV      r9,#1
00005a  e00a              B        |L28.114|
                  |L28.92|
;;;1021   				else if(Ex_Table.Exchange[index].type==EX_DEV_SUN1)	tmp=1;
00005c  ebc501c5          RSB      r1,r5,r5,LSL #3
000060  4821              LDR      r0,|L28.232|
000062  f8100011          LDRB     r0,[r0,r1,LSL #1]
000066  28e4              CMP      r0,#0xe4
000068  d102              BNE      |L28.112|
00006a  f04f0901          MOV      r9,#1
00006e  e000              B        |L28.114|
                  |L28.112|
;;;1022   				//else                                              tmp=0;
;;;1023   				else                                                tmp=st;
000070  46a1              MOV      r9,r4
                  |L28.114|
;;;1024   	
;;;1025   	      if((st==0)||((st>tmp)&&(st<255)))return;
000072  b11c              CBZ      r4,|L28.124|
000074  454c              CMP      r4,r9
000076  dd03              BLE      |L28.128|
000078  2cff              CMP      r4,#0xff
00007a  da01              BGE      |L28.128|
                  |L28.124|
;;;1026   	
;;;1027   	      if(st!=0xff)
;;;1028   				{
;;;1029   						st=st-1;
;;;1030   						lin=st/8;
;;;1031   						row=st%8;
;;;1032   						Pannel.item[index].onoffbuf[lin] &=~(0x01<<row);
;;;1033   				}
;;;1034   				else
;;;1035   				{
;;;1036   						for(i=0;i<lin;i++)Pannel.item[index].onoffbuf[lin] =0x00;
;;;1037   				}
;;;1038   				Write_Pannel_Table(index);	
;;;1039   }
00007c  e8bd87f0          POP      {r4-r10,pc}
                  |L28.128|
000080  2cff              CMP      r4,#0xff              ;1027
000082  d01f              BEQ      |L28.196|
000084  1e60              SUBS     r0,r4,#1              ;1029
000086  b2c4              UXTB     r4,r0                 ;1029
000088  4620              MOV      r0,r4                 ;1030
00008a  17e1              ASRS     r1,r4,#31             ;1030
00008c  eb047151          ADD      r1,r4,r1,LSR #29      ;1030
000090  10ce              ASRS     r6,r1,#3              ;1030
000092  17e1              ASRS     r1,r4,#31             ;1031
000094  eb047151          ADD      r1,r4,r1,LSR #29      ;1031
000098  10c9              ASRS     r1,r1,#3              ;1031
00009a  eba401c1          SUB      r1,r4,r1,LSL #3       ;1031
00009e  f00108ff          AND      r8,r1,#0xff           ;1031
0000a2  ebc51105          RSB      r1,r5,r5,LSL #4       ;1032
0000a6  4811              LDR      r0,|L28.236|
0000a8  4408              ADD      r0,r0,r1              ;1032
0000aa  3008              ADDS     r0,r0,#8              ;1032
0000ac  5d80              LDRB     r0,[r0,r6]            ;1032
0000ae  2101              MOVS     r1,#1                 ;1032
0000b0  fa01f108          LSL      r1,r1,r8              ;1032
0000b4  4388              BICS     r0,r0,r1              ;1032
0000b6  ebc51205          RSB      r2,r5,r5,LSL #4       ;1032
0000ba  490c              LDR      r1,|L28.236|
0000bc  4411              ADD      r1,r1,r2              ;1032
0000be  3108              ADDS     r1,r1,#8              ;1032
0000c0  5588              STRB     r0,[r1,r6]            ;1032
0000c2  e00c              B        |L28.222|
                  |L28.196|
0000c4  2700              MOVS     r7,#0                 ;1036
0000c6  e008              B        |L28.218|
                  |L28.200|
0000c8  2100              MOVS     r1,#0                 ;1036
0000ca  ebc51205          RSB      r2,r5,r5,LSL #4       ;1036
0000ce  4807              LDR      r0,|L28.236|
0000d0  4410              ADD      r0,r0,r2              ;1036
0000d2  3008              ADDS     r0,r0,#8              ;1036
0000d4  5581              STRB     r1,[r0,r6]            ;1036
0000d6  1c78              ADDS     r0,r7,#1              ;1036
0000d8  b2c7              UXTB     r7,r0                 ;1036
                  |L28.218|
0000da  42b7              CMP      r7,r6                 ;1036
0000dc  dbf4              BLT      |L28.200|
                  |L28.222|
0000de  4628              MOV      r0,r5                 ;1038
0000e0  f7fffffe          BL       Write_Pannel_Table
0000e4  bf00              NOP      
0000e6  e7c9              B        |L28.124|
;;;1040   
                          ENDP

                  |L28.232|
                          DCD      Ex_Table+0x36
                  |L28.236|
                          DCD      Pannel+0x1

                          AREA ||i.Remote_Key_En||, CODE, READONLY, ALIGN=2

                  Remote_Key_En PROC
;;;982    //=====================================================================================================
;;;983    void Remote_Key_En(uint8_t index,uint8_t st)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;984    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;985    			  uint8_t tmp=0,lin,row,i;
000008  f04f0900          MOV      r9,#0
;;;986    				
;;;987    				if(Ex_Table.Exchange[index].type==EX_KEY_54KEY)			tmp=58;
00000c  ebc501c5          RSB      r1,r5,r5,LSL #3
000010  4836              LDR      r0,|L29.236|
000012  f8100011          LDRB     r0,[r0,r1,LSL #1]
000016  28fa              CMP      r0,#0xfa
000018  d102              BNE      |L29.32|
00001a  f04f093a          MOV      r9,#0x3a
00001e  e028              B        |L29.114|
                  |L29.32|
;;;988    				else if(Ex_Table.Exchange[index].type==EX_KEY_42KEY)tmp=46;
000020  ebc501c5          RSB      r1,r5,r5,LSL #3
000024  4831              LDR      r0,|L29.236|
000026  f8100011          LDRB     r0,[r0,r1,LSL #1]
00002a  28fb              CMP      r0,#0xfb
00002c  d102              BNE      |L29.52|
00002e  f04f092e          MOV      r9,#0x2e
000032  e01e              B        |L29.114|
                  |L29.52|
;;;989    				else if(Ex_Table.Exchange[index].type==EX_KEY_TURN)	tmp=6;
000034  ebc501c5          RSB      r1,r5,r5,LSL #3
000038  482c              LDR      r0,|L29.236|
00003a  f8100011          LDRB     r0,[r0,r1,LSL #1]
00003e  28fc              CMP      r0,#0xfc
000040  d102              BNE      |L29.72|
000042  f04f0906          MOV      r9,#6
000046  e014              B        |L29.114|
                  |L29.72|
;;;990    	      else if(Ex_Table.Exchange[index].type==EX_DEV_SUN)	tmp=1;
000048  ebc501c5          RSB      r1,r5,r5,LSL #3
00004c  4827              LDR      r0,|L29.236|
00004e  f8100011          LDRB     r0,[r0,r1,LSL #1]
000052  28e2              CMP      r0,#0xe2
000054  d102              BNE      |L29.92|
000056  f04f0901          MOV      r9,#1
00005a  e00a              B        |L29.114|
                  |L29.92|
;;;991    	      else if(Ex_Table.Exchange[index].type==EX_DEV_SUN1)	tmp=1;
00005c  ebc501c5          RSB      r1,r5,r5,LSL #3
000060  4822              LDR      r0,|L29.236|
000062  f8100011          LDRB     r0,[r0,r1,LSL #1]
000066  28e4              CMP      r0,#0xe4
000068  d102              BNE      |L29.112|
00006a  f04f0901          MOV      r9,#1
00006e  e000              B        |L29.114|
                  |L29.112|
;;;992    				//else                                              	tmp=0;
;;;993    				else                                                tmp=st;
000070  46a1              MOV      r9,r4
                  |L29.114|
;;;994    	
;;;995    	      if((st==0)||((st>tmp)&&(st<255)))return;   
000072  b11c              CBZ      r4,|L29.124|
000074  454c              CMP      r4,r9
000076  dd03              BLE      |L29.128|
000078  2cff              CMP      r4,#0xff
00007a  da01              BGE      |L29.128|
                  |L29.124|
;;;996    	      if(st!=0xff)
;;;997    				{
;;;998    						st=st-1;
;;;999    						lin=st/8;
;;;1000   						row=st%8;
;;;1001   						Pannel.item[index].onoffbuf[lin] |=0x01<<row;
;;;1002   				}
;;;1003   				else
;;;1004   				{
;;;1005   						for(i=0;i<7;i++)Pannel.item[index].onoffbuf[i] =0xff;
;;;1006   				}
;;;1007   				Write_Pannel_Table(index);				
;;;1008   }
00007c  e8bd87f0          POP      {r4-r10,pc}
                  |L29.128|
000080  2cff              CMP      r4,#0xff              ;996
000082  d020              BEQ      |L29.198|
000084  1e60              SUBS     r0,r4,#1              ;998
000086  b2c4              UXTB     r4,r0                 ;998
000088  4620              MOV      r0,r4                 ;999
00008a  17e1              ASRS     r1,r4,#31             ;999
00008c  eb047151          ADD      r1,r4,r1,LSR #29      ;999
000090  10ce              ASRS     r6,r1,#3              ;999
000092  17e1              ASRS     r1,r4,#31             ;1000
000094  eb047151          ADD      r1,r4,r1,LSR #29      ;1000
000098  10c9              ASRS     r1,r1,#3              ;1000
00009a  eba401c1          SUB      r1,r4,r1,LSL #3       ;1000
00009e  f00108ff          AND      r8,r1,#0xff           ;1000
0000a2  ebc51105          RSB      r1,r5,r5,LSL #4       ;1001
0000a6  4812              LDR      r0,|L29.240|
0000a8  4408              ADD      r0,r0,r1              ;1001
0000aa  3008              ADDS     r0,r0,#8              ;1001
0000ac  5d80              LDRB     r0,[r0,r6]            ;1001
0000ae  2101              MOVS     r1,#1                 ;1001
0000b0  fa01f108          LSL      r1,r1,r8              ;1001
0000b4  4308              ORRS     r0,r0,r1              ;1001
0000b6  b2c1              UXTB     r1,r0                 ;1001
0000b8  ebc51205          RSB      r2,r5,r5,LSL #4       ;1001
0000bc  480c              LDR      r0,|L29.240|
0000be  4410              ADD      r0,r0,r2              ;1001
0000c0  3008              ADDS     r0,r0,#8              ;1001
0000c2  5581              STRB     r1,[r0,r6]            ;1001
0000c4  e00c              B        |L29.224|
                  |L29.198|
0000c6  2700              MOVS     r7,#0                 ;1005
0000c8  e008              B        |L29.220|
                  |L29.202|
0000ca  21ff              MOVS     r1,#0xff              ;1005
0000cc  ebc51205          RSB      r2,r5,r5,LSL #4       ;1005
0000d0  4807              LDR      r0,|L29.240|
0000d2  4410              ADD      r0,r0,r2              ;1005
0000d4  3008              ADDS     r0,r0,#8              ;1005
0000d6  55c1              STRB     r1,[r0,r7]            ;1005
0000d8  1c78              ADDS     r0,r7,#1              ;1005
0000da  b2c7              UXTB     r7,r0                 ;1005
                  |L29.220|
0000dc  2f07              CMP      r7,#7                 ;1005
0000de  dbf4              BLT      |L29.202|
                  |L29.224|
0000e0  4628              MOV      r0,r5                 ;1007
0000e2  f7fffffe          BL       Write_Pannel_Table
0000e6  bf00              NOP      
0000e8  e7c8              B        |L29.124|
;;;1009   
                          ENDP

0000ea  0000              DCW      0x0000
                  |L29.236|
                          DCD      Ex_Table+0x36
                  |L29.240|
                          DCD      Pannel+0x1

                          AREA ||i.Secret_Verify||, CODE, READONLY, ALIGN=2

                  Secret_Verify PROC
;;;1213   //====================================================================================
;;;1214   void Secret_Verify(unsigned char *pdat,unsigned char len)
000000  b570              PUSH     {r4-r6,lr}
;;;1215   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1216   
;;;1217   //================================================================	
;;;1218   #ifdef USE_DS28E02
;;;1219   	  unsigned char rbuf[32],datbuf[10],i,cnt,ret;
;;;1220   
;;;1221   		if(len>=5)len=5;
;;;1222   		for(i=0;i<len;i++)datbuf[i]=*(pdat+i);
;;;1223       for(i=len;i<5;i++)datbuf[i]=0x00;
;;;1224   
;;;1225   		for(i=0;i<32;i++)rbuf[i]=0x00;
;;;1226   
;;;1227   		cnt=3;
;;;1228   		while(cnt>0)
;;;1229   		{
;;;1230   				__set_PRIMASK(1);	
;;;1231   				ret=ANON_READ_AuthPage(&rbuf[0],&datbuf[0],0);
;;;1232   				__set_PRIMASK(0);	;
;;;1233   				if(ret==1)break;
;;;1234   				cnt--;
;;;1235   		}   
;;;1236   
;;;1237   	//*(pdat+0)=Crc8Check(rbuf,20);
;;;1238   	*(pdat+0)=Crc8CheckSum(rbuf,20);	
;;;1239   	*(pdat+1)=SumCheck(rbuf,20);
;;;1240   //================================================================
;;;1241   #else
;;;1242   	static unsigned char buf[50],i,cnt,ret;
;;;1243   
;;;1244   	for(i=0;i<len;i++)buf[i]=*(pdat+i);
000006  2000              MOVS     r0,#0
000008  4938              LDR      r1,|L30.236|
00000a  7008              STRB     r0,[r1,#0]
00000c  e00b              B        |L30.38|
                  |L30.14|
00000e  4837              LDR      r0,|L30.236|
000010  7800              LDRB     r0,[r0,#0]  ; i
000012  5c20              LDRB     r0,[r4,r0]
000014  4936              LDR      r1,|L30.240|
000016  4a35              LDR      r2,|L30.236|
000018  7812              LDRB     r2,[r2,#0]  ; i
00001a  5488              STRB     r0,[r1,r2]
00001c  4833              LDR      r0,|L30.236|
00001e  7800              LDRB     r0,[r0,#0]  ; i
000020  1c40              ADDS     r0,r0,#1
000022  4932              LDR      r1,|L30.236|
000024  7008              STRB     r0,[r1,#0]
                  |L30.38|
000026  4831              LDR      r0,|L30.236|
000028  7800              LDRB     r0,[r0,#0]  ; i
00002a  42a8              CMP      r0,r5
00002c  dbef              BLT      |L30.14|
;;;1245   	for(i=len;i<32;i++)buf[i]=0x00;
00002e  482f              LDR      r0,|L30.236|
000030  7005              STRB     r5,[r0,#0]
000032  e009              B        |L30.72|
                  |L30.52|
000034  2000              MOVS     r0,#0
000036  492e              LDR      r1,|L30.240|
000038  4a2c              LDR      r2,|L30.236|
00003a  7812              LDRB     r2,[r2,#0]  ; i
00003c  5488              STRB     r0,[r1,r2]
00003e  482b              LDR      r0,|L30.236|
000040  7800              LDRB     r0,[r0,#0]  ; i
000042  1c40              ADDS     r0,r0,#1
000044  4929              LDR      r1,|L30.236|
000046  7008              STRB     r0,[r1,#0]
                  |L30.72|
000048  4828              LDR      r0,|L30.236|
00004a  7800              LDRB     r0,[r0,#0]  ; i
00004c  2820              CMP      r0,#0x20
00004e  dbf1              BLT      |L30.52|
;;;1246   	//================================================================================
;;;1247   
;;;1248   	cnt=3;
000050  2003              MOVS     r0,#3
000052  4928              LDR      r1,|L30.244|
000054  7008              STRB     r0,[r1,#0]
;;;1249     while(cnt>0)
000056  e015              B        |L30.132|
                  |L30.88|
;;;1250   	{
;;;1251   			__set_PRIMASK(1);	
000058  2001              MOVS     r0,#1
00005a  f7fffffe          BL       __set_PRIMASK
;;;1252   			ret=ReadWriteScratchpad((bool)0,buf);
00005e  4924              LDR      r1,|L30.240|
000060  2000              MOVS     r0,#0
000062  f7fffffe          BL       ReadWriteScratchpad
000066  4924              LDR      r1,|L30.248|
000068  7008              STRB     r0,[r1,#0]
;;;1253   			__set_PRIMASK(0);
00006a  2000              MOVS     r0,#0
00006c  f7fffffe          BL       __set_PRIMASK
;;;1254   			if(ret==0xaa)break;				//????,??
000070  4821              LDR      r0,|L30.248|
000072  7800              LDRB     r0,[r0,#0]  ; ret
000074  28aa              CMP      r0,#0xaa
000076  d100              BNE      |L30.122|
000078  e008              B        |L30.140|
                  |L30.122|
;;;1255   			cnt--;
00007a  481e              LDR      r0,|L30.244|
00007c  7800              LDRB     r0,[r0,#0]  ; cnt
00007e  1e40              SUBS     r0,r0,#1
000080  491c              LDR      r1,|L30.244|
000082  7008              STRB     r0,[r1,#0]
                  |L30.132|
000084  481b              LDR      r0,|L30.244|
000086  7800              LDRB     r0,[r0,#0]            ;1249  ; cnt
000088  2800              CMP      r0,#0                 ;1249
00008a  dce5              BGT      |L30.88|
                  |L30.140|
00008c  bf00              NOP                            ;1254
;;;1256       }
;;;1257   	//================================================================================= 
;;;1258   
;;;1259     cnt=3;
00008e  2003              MOVS     r0,#3
000090  4918              LDR      r1,|L30.244|
000092  7008              STRB     r0,[r1,#0]
;;;1260     while(cnt>0)
000094  e019              B        |L30.202|
                  |L30.150|
;;;1261   	{
;;;1262   			__set_PRIMASK(1);	
000096  2001              MOVS     r0,#1
000098  f7fffffe          BL       __set_PRIMASK
;;;1263   			ret=ComputeAndReadPageMAC((unsigned char)1,0x00,buf);									//???MAC?buf?,?32???
00009c  4a14              LDR      r2,|L30.240|
00009e  2100              MOVS     r1,#0
0000a0  2001              MOVS     r0,#1
0000a2  f7fffffe          BL       ComputeAndReadPageMAC
0000a6  4914              LDR      r1,|L30.248|
0000a8  7008              STRB     r0,[r1,#0]
;;;1264   			__set_PRIMASK(0);
0000aa  2000              MOVS     r0,#0
0000ac  f7fffffe          BL       __set_PRIMASK
;;;1265   			if((ret!=0xff)&&(ret!=0x00))break;
0000b0  4811              LDR      r0,|L30.248|
0000b2  7800              LDRB     r0,[r0,#0]  ; ret
0000b4  28ff              CMP      r0,#0xff
0000b6  d003              BEQ      |L30.192|
0000b8  480f              LDR      r0,|L30.248|
0000ba  7800              LDRB     r0,[r0,#0]  ; ret
0000bc  b100              CBZ      r0,|L30.192|
0000be  e008              B        |L30.210|
                  |L30.192|
;;;1266   			cnt--;
0000c0  480c              LDR      r0,|L30.244|
0000c2  7800              LDRB     r0,[r0,#0]  ; cnt
0000c4  1e40              SUBS     r0,r0,#1
0000c6  490b              LDR      r1,|L30.244|
0000c8  7008              STRB     r0,[r1,#0]
                  |L30.202|
0000ca  480a              LDR      r0,|L30.244|
0000cc  7800              LDRB     r0,[r0,#0]            ;1260  ; cnt
0000ce  2800              CMP      r0,#0                 ;1260
0000d0  dce1              BGT      |L30.150|
                  |L30.210|
0000d2  bf00              NOP                            ;1265
;;;1267     }   
;;;1268   
;;;1269   	*(pdat+0)=Crc8CheckSum(buf,32);
0000d4  2120              MOVS     r1,#0x20
0000d6  4806              LDR      r0,|L30.240|
0000d8  f7fffffe          BL       Crc8CheckSum
0000dc  7020              STRB     r0,[r4,#0]
;;;1270   	*(pdat+1)=SumCheck(buf,32);
0000de  2120              MOVS     r1,#0x20
0000e0  4803              LDR      r0,|L30.240|
0000e2  f7fffffe          BL       SumCheck
0000e6  7060              STRB     r0,[r4,#1]
;;;1271   		
;;;1272   #endif
;;;1273   		
;;;1274   		
;;;1275   }
0000e8  bd70              POP      {r4-r6,pc}
;;;1276   //======================================================================================================
                          ENDP

0000ea  0000              DCW      0x0000
                  |L30.236|
                          DCD      i
                  |L30.240|
                          DCD      buf
                  |L30.244|
                          DCD      ||cnt||
                  |L30.248|
                          DCD      ||ret||

                          AREA ||i.Write_Dev||, CODE, READONLY, ALIGN=1

                  Write_Dev PROC
;;;726    */
;;;727    uint8_t Write_Dev(uint8_t dat,uint8_t type)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;728    {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
;;;729    	uint8_t i,err,cnt,buf[4],addr;
;;;730    	
;;;731    	if(type==TYPE_EE_ADDR_USED)        addr=EE_DEV_USED;
000008  b90c              CBNZ     r4,|L31.14|
00000a  2520              MOVS     r5,#0x20
00000c  e01a              B        |L31.68|
                  |L31.14|
;;;732    	else if(type==TYPE_EE_ADDR_ADDR0)  addr=EE_DEV_ADDR0;
00000e  2c01              CMP      r4,#1
000010  d101              BNE      |L31.22|
000012  2523              MOVS     r5,#0x23
000014  e016              B        |L31.68|
                  |L31.22|
;;;733    	else if(type==TYPE_EE_ADDR_ADDR1)  addr=EE_DEV_ADDR1;
000016  2c02              CMP      r4,#2
000018  d101              BNE      |L31.30|
00001a  2526              MOVS     r5,#0x26
00001c  e012              B        |L31.68|
                  |L31.30|
;;;734    	else if(type==TYPE_EE_ADDR_MODE)   addr=EE_DEV_MODE;
00001e  2c03              CMP      r4,#3
000020  d101              BNE      |L31.38|
000022  2529              MOVS     r5,#0x29
000024  e00e              B        |L31.68|
                  |L31.38|
;;;735    	else if(type==TYPE_EE_ADDR_PROFILE)addr=EE_DEV_PROFILE;
000026  2c04              CMP      r4,#4
000028  d101              BNE      |L31.46|
00002a  252c              MOVS     r5,#0x2c
00002c  e00a              B        |L31.68|
                  |L31.46|
;;;736    	else if(type==TYPE_EE_ADDR_TYPES)  addr=EE_DEV_TYPES;
00002e  2c06              CMP      r4,#6
000030  d101              BNE      |L31.54|
000032  252f              MOVS     r5,#0x2f
000034  e006              B        |L31.68|
                  |L31.54|
;;;737    	else if(type==TYPE_EE_ADDR_TYPESH)  addr=EE_DEV_TYPESH;
000036  2c07              CMP      r4,#7
000038  d101              BNE      |L31.62|
00003a  2532              MOVS     r5,#0x32
00003c  e002              B        |L31.68|
                  |L31.62|
;;;738    	else                               return RE_ERR;
00003e  20ff              MOVS     r0,#0xff
                  |L31.64|
;;;739    	
;;;740    	cnt=2;
;;;741    	for(i=0;i<3;i++)buf[i]=dat;
;;;742    	
;;;743    	while(cnt>0)
;;;744    	{
;;;745    		I2C_WP_SET(0);
;;;746    		err=WriteDataToFlash(addr,&buf[0],3);
;;;747    		I2C_WP_SET(1);
;;;748    		cnt--;
;;;749    		if(err==0)return RE_OK;
;;;750    	}
;;;751    	return RE_ERR;
;;;752    }
000040  e8bd83f8          POP      {r3-r9,pc}
                  |L31.68|
000044  2702              MOVS     r7,#2                 ;740
000046  2600              MOVS     r6,#0                 ;741
000048  e003              B        |L31.82|
                  |L31.74|
00004a  f80d8006          STRB     r8,[sp,r6]            ;741
00004e  1c70              ADDS     r0,r6,#1              ;741
000050  b2c6              UXTB     r6,r0                 ;741
                  |L31.82|
000052  2e03              CMP      r6,#3                 ;741
000054  dbf9              BLT      |L31.74|
000056  e012              B        |L31.126|
                  |L31.88|
000058  2000              MOVS     r0,#0                 ;745
00005a  f7fffffe          BL       I2C_WP_SET
00005e  2203              MOVS     r2,#3                 ;746
000060  4669              MOV      r1,sp                 ;746
000062  4628              MOV      r0,r5                 ;746
000064  f7fffffe          BL       WriteDataToFlash
000068  4681              MOV      r9,r0                 ;746
00006a  2001              MOVS     r0,#1                 ;747
00006c  f7fffffe          BL       I2C_WP_SET
000070  1e78              SUBS     r0,r7,#1              ;748
000072  b2c7              UXTB     r7,r0                 ;748
000074  f1b90f00          CMP      r9,#0                 ;749
000078  d101              BNE      |L31.126|
00007a  20fe              MOVS     r0,#0xfe              ;749
00007c  e7e0              B        |L31.64|
                  |L31.126|
00007e  2f00              CMP      r7,#0                 ;743
000080  dcea              BGT      |L31.88|
000082  20ff              MOVS     r0,#0xff              ;751
000084  e7dc              B        |L31.64|
;;;753    /*
                          ENDP


                          AREA ||i.Write_Ex_Table||, CODE, READONLY, ALIGN=2

                  Write_Ex_Table PROC
;;;328    
;;;329    uint8_t Write_Ex_Table(uint8_t index)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;330    {
000004  b089              SUB      sp,sp,#0x24
000006  4604              MOV      r4,r0
;;;331    	uint8_t i,sum,*pt,buf[EX_ITEM_NUM],err,cnt;
;;;332    	
;;;333    	if(index>=EX_TABLE_NUM)return RE_ERR;
000008  2c08              CMP      r4,#8
00000a  db03              BLT      |L32.20|
00000c  20ff              MOVS     r0,#0xff
                  |L32.14|
;;;334    	
;;;335    	//=====================================================
;;;336    	//上锁
;;;337    	
;;;338    	Ex_Table.Exchange[index].type=Exchangebuf.type;
;;;339    	Ex_Table.Exchange[index].addr=Exchangebuf.addr;
;;;340    	Ex_Table.Exchange[index].stu=Exchangebuf.stu;
;;;341    	Ex_Table.Exchange[index].wl_addr[0]=Exchangebuf.wl_addr[0];
;;;342    	Ex_Table.Exchange[index].wl_addr[1]=Exchangebuf.wl_addr[1];
;;;343    	Ex_Table.Exchange[index].wl_addr[2]=Exchangebuf.wl_addr[2];
;;;344    	Ex_Table.Exchange[index].channel=Exchangebuf.channel;
;;;345    	Ex_Table.Exchange[index].sync=Exchangebuf.sync;
;;;346    	Ex_Table.Exchange[index].secret=Exchangebuf.secret;
;;;347    
;;;348    	pt=(uint8_t *)(Ex_Table.Exchange+index);
;;;349        sum=0;	
;;;350    	for(i=0;i<EX_ITEM_NUM-1;i++)
;;;351    	{
;;;352    		buf[i]=*(pt+i);
;;;353    		sum=sum+buf[i];
;;;354    	}
;;;355    	buf[EX_ITEM_NUM-1]=sum;
;;;356    	
;;;357    	cnt=2;
;;;358    	while(cnt>0)
;;;359    	{
;;;360    		I2C_WP_SET(0);
;;;361    		err=WriteDataToFlash(EX_TABLE_ADDR+index*(EX_ITEM_NUM),&buf[0],EX_ITEM_NUM);
;;;362    		err=WriteDataToFlash(EX_TABLE_ADDR_BCK+index*(EX_ITEM_NUM),&buf[0],EX_ITEM_NUM);
;;;363    		I2C_WP_SET(1);
;;;364    		cnt--;
;;;365    		if(err==0)break;
;;;366    	}
;;;367    	
;;;368        //====================================================
;;;369    	//解锁
;;;370    	if(err==0)return RE_OK;
;;;371     	else      return RE_ERR;
;;;372    }
00000e  b009              ADD      sp,sp,#0x24
000010  e8bd83f0          POP      {r4-r9,pc}
                  |L32.20|
000014  4843              LDR      r0,|L32.292|
000016  7801              LDRB     r1,[r0,#0]            ;338  ; Exchangebuf
000018  ebc402c4          RSB      r2,r4,r4,LSL #3       ;338
00001c  4842              LDR      r0,|L32.296|
00001e  f8001012          STRB     r1,[r0,r2,LSL #1]     ;338
000022  4840              LDR      r0,|L32.292|
000024  7841              LDRB     r1,[r0,#1]            ;339  ; Exchangebuf
000026  ebc402c4          RSB      r2,r4,r4,LSL #3       ;339
00002a  483f              LDR      r0,|L32.296|
00002c  eb000042          ADD      r0,r0,r2,LSL #1       ;339
000030  7041              STRB     r1,[r0,#1]            ;339
000032  483c              LDR      r0,|L32.292|
000034  7881              LDRB     r1,[r0,#2]            ;340  ; Exchangebuf
000036  ebc402c4          RSB      r2,r4,r4,LSL #3       ;340
00003a  483b              LDR      r0,|L32.296|
00003c  eb000042          ADD      r0,r0,r2,LSL #1       ;340
000040  7081              STRB     r1,[r0,#2]            ;340
000042  4838              LDR      r0,|L32.292|
000044  78c1              LDRB     r1,[r0,#3]            ;341  ; Exchangebuf
000046  ebc402c4          RSB      r2,r4,r4,LSL #3       ;341
00004a  4837              LDR      r0,|L32.296|
00004c  eb000042          ADD      r0,r0,r2,LSL #1       ;341
000050  70c1              STRB     r1,[r0,#3]            ;341
000052  4834              LDR      r0,|L32.292|
000054  7901              LDRB     r1,[r0,#4]            ;342
000056  ebc402c4          RSB      r2,r4,r4,LSL #3       ;342
00005a  4833              LDR      r0,|L32.296|
00005c  eb000042          ADD      r0,r0,r2,LSL #1       ;342
000060  7101              STRB     r1,[r0,#4]            ;342
000062  4830              LDR      r0,|L32.292|
000064  7941              LDRB     r1,[r0,#5]            ;343
000066  ebc402c4          RSB      r2,r4,r4,LSL #3       ;343
00006a  482f              LDR      r0,|L32.296|
00006c  eb000042          ADD      r0,r0,r2,LSL #1       ;343
000070  7141              STRB     r1,[r0,#5]            ;343
000072  482c              LDR      r0,|L32.292|
000074  7981              LDRB     r1,[r0,#6]            ;344  ; Exchangebuf
000076  ebc402c4          RSB      r2,r4,r4,LSL #3       ;344
00007a  482b              LDR      r0,|L32.296|
00007c  eb000042          ADD      r0,r0,r2,LSL #1       ;344
000080  7181              STRB     r1,[r0,#6]            ;344
000082  4828              LDR      r0,|L32.292|
000084  8941              LDRH     r1,[r0,#0xa]          ;345  ; Exchangebuf
000086  ebc402c4          RSB      r2,r4,r4,LSL #3       ;345
00008a  4827              LDR      r0,|L32.296|
00008c  eb000042          ADD      r0,r0,r2,LSL #1       ;345
000090  8141              STRH     r1,[r0,#0xa]          ;345
000092  4824              LDR      r0,|L32.292|
000094  7b01              LDRB     r1,[r0,#0xc]          ;346  ; Exchangebuf
000096  ebc402c4          RSB      r2,r4,r4,LSL #3       ;346
00009a  4823              LDR      r0,|L32.296|
00009c  eb000042          ADD      r0,r0,r2,LSL #1       ;346
0000a0  7301              STRB     r1,[r0,#0xc]          ;346
0000a2  ebc401c4          RSB      r1,r4,r4,LSL #3       ;348
0000a6  4820              LDR      r0,|L32.296|
0000a8  eb000841          ADD      r8,r0,r1,LSL #1       ;348
0000ac  2600              MOVS     r6,#0                 ;349
0000ae  2500              MOVS     r5,#0                 ;350
0000b0  e009              B        |L32.198|
                  |L32.178|
0000b2  f8180005          LDRB     r0,[r8,r5]            ;352
0000b6  a901              ADD      r1,sp,#4              ;352
0000b8  5548              STRB     r0,[r1,r5]            ;352
0000ba  a801              ADD      r0,sp,#4              ;353
0000bc  5d40              LDRB     r0,[r0,r5]            ;353
0000be  4430              ADD      r0,r0,r6              ;353
0000c0  b2c6              UXTB     r6,r0                 ;353
0000c2  1c68              ADDS     r0,r5,#1              ;350
0000c4  b2c5              UXTB     r5,r0                 ;350
                  |L32.198|
0000c6  2d1f              CMP      r5,#0x1f              ;350
0000c8  dbf3              BLT      |L32.178|
0000ca  f88d6023          STRB     r6,[sp,#0x23]         ;355
0000ce  2702              MOVS     r7,#2                 ;357
0000d0  e01d              B        |L32.270|
                  |L32.210|
0000d2  2000              MOVS     r0,#0                 ;360
0000d4  f7fffffe          BL       I2C_WP_SET
0000d8  f44f7180          MOV      r1,#0x100             ;361
0000dc  eb011044          ADD      r0,r1,r4,LSL #5       ;361
0000e0  2220              MOVS     r2,#0x20              ;361
0000e2  a901              ADD      r1,sp,#4              ;361
0000e4  f7fffffe          BL       WriteDataToFlash
0000e8  4681              MOV      r9,r0                 ;361
0000ea  f44f7100          MOV      r1,#0x200             ;362
0000ee  eb011044          ADD      r0,r1,r4,LSL #5       ;362
0000f2  2220              MOVS     r2,#0x20              ;362
0000f4  a901              ADD      r1,sp,#4              ;362
0000f6  f7fffffe          BL       WriteDataToFlash
0000fa  4681              MOV      r9,r0                 ;362
0000fc  2001              MOVS     r0,#1                 ;363
0000fe  f7fffffe          BL       I2C_WP_SET
000102  1e78              SUBS     r0,r7,#1              ;364
000104  b2c7              UXTB     r7,r0                 ;364
000106  f1b90f00          CMP      r9,#0                 ;365
00010a  d100              BNE      |L32.270|
00010c  e001              B        |L32.274|
                  |L32.270|
00010e  2f00              CMP      r7,#0                 ;358
000110  dcdf              BGT      |L32.210|
                  |L32.274|
000112  bf00              NOP                            ;365
000114  f1b90f00          CMP      r9,#0                 ;370
000118  d101              BNE      |L32.286|
00011a  20fe              MOVS     r0,#0xfe              ;370
00011c  e777              B        |L32.14|
                  |L32.286|
00011e  20ff              MOVS     r0,#0xff              ;371
000120  e775              B        |L32.14|
;;;373    
                          ENDP

000122  0000              DCW      0x0000
                  |L32.292|
                          DCD      Exchangebuf
                  |L32.296|
                          DCD      Ex_Table+0x36

                          AREA ||i.Write_Lock_Table||, CODE, READONLY, ALIGN=2

                  Write_Lock_Table PROC
;;;1322   
;;;1323   uint8_t Write_Lock_Table(uint8_t index)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1324   {
000004  b094              SUB      sp,sp,#0x50
000006  4604              MOV      r4,r0
;;;1325   	uint8_t j,i,sum,*pt,buf[LOCK_ALLNUM],err,cnt;
;;;1326   	
;;;1327   	if(index>=LOCK_ITEMNUM)return RE_ERR;
000008  2c10              CMP      r4,#0x10
00000a  db03              BLT      |L33.20|
00000c  20ff              MOVS     r0,#0xff
                  |L33.14|
;;;1328   	
;;;1329   	//=====================================================
;;;1330   	//上锁
;;;1331   	
;;;1332   	if(index==0)
;;;1333   	{			
;;;1334   				for(j=0;j<4;j++)lock.item.addr[j]=LockItem.addr[j];
;;;1335   				for(j=0;j<8;j++)lock.item.key[j]=LockItem.key[j];
;;;1336   				lock.item.stu=LockItem.stu;
;;;1337   				
;;;1338   				lock.item.safe=LockItem.safe;	
;;;1339   				lock.item.secret=LockItem.secret;																			
;;;1340   				lock.item.cardnum=LockItem.cardnum; 
;;;1341   				lock.item.encodenum=LockItem.encodenum;
;;;1342   				lock.item.fingernum=LockItem.fingernum;
;;;1343   				lock.item.sync=LockItem.sync;		
;;;1344   	}
;;;1345   	else
;;;1346   	{
;;;1347   				index=index-1;
;;;1348   				lock.item.Serail[index]=LockItem.Serail[index];
;;;1349   				lock.item.IdType[index]=LockItem.IdType[index];
;;;1350   				lock.item.UserType[index]=LockItem.UserType[index];
;;;1351   				
;;;1352   	}
;;;1353     pt=(uint8_t *)(&lock.item);	
;;;1354     sum=0;	
;;;1355   	for(i=0;i<LOCK_ALLNUM-1;i++)
;;;1356   	{
;;;1357   			buf[i]=*(pt+i);
;;;1358   			sum=sum+buf[i];
;;;1359   	}
;;;1360   	buf[LOCK_ALLNUM-1]=sum;
;;;1361   	
;;;1362   	cnt=2;
;;;1363   	while(cnt>0)
;;;1364   	{
;;;1365   		I2C_WP_SET(0);
;;;1366   		err=WriteDataToFlash(LOCK_TABLE_ADDR+index*(LOCK_ALLNUM),&buf[0],LOCK_ALLNUM);
;;;1367   		err=WriteDataToFlash(LOCK_TABLE_ADDR_BCK+index*(LOCK_ALLNUM),&buf[0],LOCK_ALLNUM);
;;;1368   		I2C_WP_SET(1);
;;;1369   		cnt--;
;;;1370   		if(err==0)break;
;;;1371   	}
;;;1372   	
;;;1373       //====================================================
;;;1374   	//解锁
;;;1375   	if(err==0)return RE_OK;
;;;1376    	else      return RE_ERR;
;;;1377   }
00000e  b014              ADD      sp,sp,#0x50
000010  e8bd87f0          POP      {r4-r10,pc}
                  |L33.20|
000014  2c00              CMP      r4,#0                 ;1332
000016  d139              BNE      |L33.140|
000018  2500              MOVS     r5,#0                 ;1334
00001a  e005              B        |L33.40|
                  |L33.28|
00001c  4849              LDR      r0,|L33.324|
00001e  5d41              LDRB     r1,[r0,r5]            ;1334
000020  4849              LDR      r0,|L33.328|
000022  5541              STRB     r1,[r0,r5]            ;1334
000024  1c68              ADDS     r0,r5,#1              ;1334
000026  b2c5              UXTB     r5,r0                 ;1334
                  |L33.40|
000028  2d04              CMP      r5,#4                 ;1334
00002a  dbf7              BLT      |L33.28|
00002c  2500              MOVS     r5,#0                 ;1335
00002e  e007              B        |L33.64|
                  |L33.48|
000030  4844              LDR      r0,|L33.324|
000032  3009              ADDS     r0,r0,#9              ;1335
000034  5d41              LDRB     r1,[r0,r5]            ;1335
000036  4844              LDR      r0,|L33.328|
000038  3009              ADDS     r0,r0,#9              ;1335
00003a  5541              STRB     r1,[r0,r5]            ;1335
00003c  1c68              ADDS     r0,r5,#1              ;1335
00003e  b2c5              UXTB     r5,r0                 ;1335
                  |L33.64|
000040  2d08              CMP      r5,#8                 ;1335
000042  dbf5              BLT      |L33.48|
000044  483f              LDR      r0,|L33.324|
000046  8a81              LDRH     r1,[r0,#0x14]         ;1336  ; LockItem
000048  483f              LDR      r0,|L33.328|
00004a  380e              SUBS     r0,r0,#0xe            ;1336
00004c  8441              STRH     r1,[r0,#0x22]         ;1336
00004e  483d              LDR      r0,|L33.324|
000050  7941              LDRB     r1,[r0,#5]            ;1338  ; LockItem
000052  483d              LDR      r0,|L33.328|
000054  380e              SUBS     r0,r0,#0xe            ;1338
000056  74c1              STRB     r1,[r0,#0x13]         ;1338
000058  483a              LDR      r0,|L33.324|
00005a  7901              LDRB     r1,[r0,#4]            ;1339  ; LockItem
00005c  483a              LDR      r0,|L33.328|
00005e  380e              SUBS     r0,r0,#0xe            ;1339
000060  7481              STRB     r1,[r0,#0x12]         ;1339
000062  4838              LDR      r0,|L33.324|
000064  7981              LDRB     r1,[r0,#6]            ;1340  ; LockItem
000066  4838              LDR      r0,|L33.328|
000068  380e              SUBS     r0,r0,#0xe            ;1340
00006a  7501              STRB     r1,[r0,#0x14]         ;1340
00006c  4835              LDR      r0,|L33.324|
00006e  79c1              LDRB     r1,[r0,#7]            ;1341  ; LockItem
000070  4835              LDR      r0,|L33.328|
000072  380e              SUBS     r0,r0,#0xe            ;1341
000074  7541              STRB     r1,[r0,#0x15]         ;1341
000076  4833              LDR      r0,|L33.324|
000078  7a01              LDRB     r1,[r0,#8]            ;1342  ; LockItem
00007a  4833              LDR      r0,|L33.328|
00007c  380e              SUBS     r0,r0,#0xe            ;1342
00007e  7581              STRB     r1,[r0,#0x16]         ;1342
000080  4830              LDR      r0,|L33.324|
000082  8a41              LDRH     r1,[r0,#0x12]         ;1343  ; LockItem
000084  4830              LDR      r0,|L33.328|
000086  380e              SUBS     r0,r0,#0xe            ;1343
000088  8401              STRH     r1,[r0,#0x20]         ;1343
00008a  e015              B        |L33.184|
                  |L33.140|
00008c  1e60              SUBS     r0,r4,#1              ;1347
00008e  b2c4              UXTB     r4,r0                 ;1347
000090  482c              LDR      r0,|L33.324|
000092  3016              ADDS     r0,r0,#0x16           ;1348
000094  f8301014          LDRH     r1,[r0,r4,LSL #1]     ;1348
000098  482b              LDR      r0,|L33.328|
00009a  3016              ADDS     r0,r0,#0x16           ;1348
00009c  f8201014          STRH     r1,[r0,r4,LSL #1]     ;1348
0000a0  4828              LDR      r0,|L33.324|
0000a2  3036              ADDS     r0,r0,#0x36           ;1349
0000a4  5d01              LDRB     r1,[r0,r4]            ;1349
0000a6  4828              LDR      r0,|L33.328|
0000a8  3036              ADDS     r0,r0,#0x36           ;1349
0000aa  5501              STRB     r1,[r0,r4]            ;1349
0000ac  4825              LDR      r0,|L33.324|
0000ae  3046              ADDS     r0,r0,#0x46           ;1350
0000b0  5d01              LDRB     r1,[r0,r4]            ;1350
0000b2  4825              LDR      r0,|L33.328|
0000b4  3046              ADDS     r0,r0,#0x46           ;1350
0000b6  5501              STRB     r1,[r0,r4]            ;1350
                  |L33.184|
0000b8  f8df908c          LDR      r9,|L33.328|
0000bc  2700              MOVS     r7,#0                 ;1354
0000be  2600              MOVS     r6,#0                 ;1355
0000c0  e009              B        |L33.214|
                  |L33.194|
0000c2  f8190006          LDRB     r0,[r9,r6]            ;1357
0000c6  f80d0006          STRB     r0,[sp,r6]            ;1357
0000ca  f81d0006          LDRB     r0,[sp,r6]            ;1358
0000ce  4438              ADD      r0,r0,r7              ;1358
0000d0  b2c7              UXTB     r7,r0                 ;1358
0000d2  1c70              ADDS     r0,r6,#1              ;1355
0000d4  b2c6              UXTB     r6,r0                 ;1355
                  |L33.214|
0000d6  2e4f              CMP      r6,#0x4f              ;1355
0000d8  dbf3              BLT      |L33.194|
0000da  f88d704f          STRB     r7,[sp,#0x4f]         ;1360
0000de  f04f0802          MOV      r8,#2                 ;1362
0000e2  e023              B        |L33.300|
                  |L33.228|
0000e4  2000              MOVS     r0,#0                 ;1365
0000e6  f7fffffe          BL       I2C_WP_SET
0000ea  eb040184          ADD      r1,r4,r4,LSL #2       ;1366
0000ee  f44f6280          MOV      r2,#0x400             ;1366
0000f2  eb021001          ADD      r0,r2,r1,LSL #4       ;1366
0000f6  2250              MOVS     r2,#0x50              ;1366
0000f8  4669              MOV      r1,sp                 ;1366
0000fa  f7fffffe          BL       WriteDataToFlash
0000fe  4682              MOV      r10,r0                ;1366
000100  eb040184          ADD      r1,r4,r4,LSL #2       ;1367
000104  f44f62c0          MOV      r2,#0x600             ;1367
000108  eb021001          ADD      r0,r2,r1,LSL #4       ;1367
00010c  2250              MOVS     r2,#0x50              ;1367
00010e  4669              MOV      r1,sp                 ;1367
000110  f7fffffe          BL       WriteDataToFlash
000114  4682              MOV      r10,r0                ;1367
000116  2001              MOVS     r0,#1                 ;1368
000118  f7fffffe          BL       I2C_WP_SET
00011c  f1a80001          SUB      r0,r8,#1              ;1369
000120  f00008ff          AND      r8,r0,#0xff           ;1369
000124  f1ba0f00          CMP      r10,#0                ;1370
000128  d100              BNE      |L33.300|
00012a  e002              B        |L33.306|
                  |L33.300|
00012c  f1b80f00          CMP      r8,#0                 ;1363
000130  dcd8              BGT      |L33.228|
                  |L33.306|
000132  bf00              NOP                            ;1370
000134  f1ba0f00          CMP      r10,#0                ;1375
000138  d101              BNE      |L33.318|
00013a  20fe              MOVS     r0,#0xfe              ;1375
00013c  e767              B        |L33.14|
                  |L33.318|
00013e  20ff              MOVS     r0,#0xff              ;1376
000140  e765              B        |L33.14|
;;;1378   
                          ENDP

000142  0000              DCW      0x0000
                  |L33.324|
                          DCD      LockItem
                  |L33.328|
                          DCD      lock+0xe

                          AREA ||i.Write_Pannel_Table||, CODE, READONLY, ALIGN=2

                  Write_Pannel_Table PROC
;;;469    */
;;;470    uint8_t Write_Pannel_Table(uint8_t index)
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;471    {
000004  4604              MOV      r4,r0
;;;472    
;;;473     	uint8_t i,sum,*pt,buf[KEY_ITEM_NUM],err,cnt;
;;;474     	
;;;475     	if(index>=KEY_NUM)return RE_ERR;
000006  2c08              CMP      r4,#8
000008  db03              BLT      |L34.18|
00000a  20ff              MOVS     r0,#0xff
                  |L34.12|
;;;476     	
;;;477     	//=====================================================
;;;478     	//上锁
;;;479     	
;;;480     	pt=(uint8_t *)(Pannel.item+index);
;;;481      sum=0;	
;;;482     	for(i=0;i<KEY_ITEM_NUM-1;i++)
;;;483     	{
;;;484     		buf[i]=*(pt+i);
;;;485     		sum=sum+buf[i];
;;;486     	}
;;;487     	buf[KEY_ITEM_NUM-1]=sum;
;;;488     	
;;;489     	cnt=2;
;;;490     	while(cnt>0)
;;;491     	{
;;;492     		I2C_WP_SET(0);
;;;493     		err=WriteDataToFlash(EE_PANNEL_ADDR+index*(KEY_ITEM_NUM),&buf[0],KEY_ITEM_NUM);
;;;494     		err=WriteDataToFlash(EE_PANNEL_ADDR_BCK+index*(KEY_ITEM_NUM),&buf[0],KEY_ITEM_NUM);
;;;495     		I2C_WP_SET(1);
;;;496     		cnt--;
;;;497     		if(err==0)break;
;;;498     	}
;;;499     	
;;;500       //====================================================
;;;501     	 //解锁
;;;502     	if(err==0)return RE_OK;
;;;503      else      return RE_ERR;
;;;504    
;;;505    }	
00000c  b004              ADD      sp,sp,#0x10
00000e  e8bd87f0          POP      {r4-r10,pc}
                  |L34.18|
000012  ebc41104          RSB      r1,r4,r4,LSL #4       ;480
000016  481f              LDR      r0,|L34.148|
000018  eb010800          ADD      r8,r1,r0              ;480
00001c  2600              MOVS     r6,#0                 ;481
00001e  2500              MOVS     r5,#0                 ;482
000020  e009              B        |L34.54|
                  |L34.34|
000022  f8180005          LDRB     r0,[r8,r5]            ;484
000026  f80d0005          STRB     r0,[sp,r5]            ;484
00002a  f81d0005          LDRB     r0,[sp,r5]            ;485
00002e  4430              ADD      r0,r0,r6              ;485
000030  b2c6              UXTB     r6,r0                 ;485
000032  1c68              ADDS     r0,r5,#1              ;482
000034  b2c5              UXTB     r5,r0                 ;482
                  |L34.54|
000036  2d0f              CMP      r5,#0xf               ;482
000038  dbf3              BLT      |L34.34|
00003a  f88d600f          STRB     r6,[sp,#0xf]          ;487
00003e  2702              MOVS     r7,#2                 ;489
000040  e01d              B        |L34.126|
                  |L34.66|
000042  2000              MOVS     r0,#0                 ;492
000044  f7fffffe          BL       I2C_WP_SET
000048  f44f6100          MOV      r1,#0x800             ;493
00004c  eb011004          ADD      r0,r1,r4,LSL #4       ;493
000050  2210              MOVS     r2,#0x10              ;493
000052  4669              MOV      r1,sp                 ;493
000054  f7fffffe          BL       WriteDataToFlash
000058  4681              MOV      r9,r0                 ;493
00005a  f44f6140          MOV      r1,#0xc00             ;494
00005e  eb011004          ADD      r0,r1,r4,LSL #4       ;494
000062  2210              MOVS     r2,#0x10              ;494
000064  4669              MOV      r1,sp                 ;494
000066  f7fffffe          BL       WriteDataToFlash
00006a  4681              MOV      r9,r0                 ;494
00006c  2001              MOVS     r0,#1                 ;495
00006e  f7fffffe          BL       I2C_WP_SET
000072  1e78              SUBS     r0,r7,#1              ;496
000074  b2c7              UXTB     r7,r0                 ;496
000076  f1b90f00          CMP      r9,#0                 ;497
00007a  d100              BNE      |L34.126|
00007c  e001              B        |L34.130|
                  |L34.126|
00007e  2f00              CMP      r7,#0                 ;490
000080  dcdf              BGT      |L34.66|
                  |L34.130|
000082  bf00              NOP                            ;497
000084  f1b90f00          CMP      r9,#0                 ;502
000088  d101              BNE      |L34.142|
00008a  20fe              MOVS     r0,#0xfe              ;502
00008c  e7be              B        |L34.12|
                  |L34.142|
00008e  20ff              MOVS     r0,#0xff              ;503
000090  e7bc              B        |L34.12|
;;;506    
                          ENDP

000092  0000              DCW      0x0000
                  |L34.148|
                          DCD      Pannel+0x1

                          AREA ||i.Write_Scene||, CODE, READONLY, ALIGN=2

                  Write_Scene PROC
;;;611    //保存场景
;;;612    void Write_Scene(uint8_t dev_index,uint8_t sc_index)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;613    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;614    	            uint8_t i,cnt;
;;;615    				uint8_t err,sum,buf[SCENE_ITEM_NUM];
;;;616    				uint8_t *pt;
;;;617    				uint16_t start_addr;
;;;618                    											//取得设备对应的地址
;;;619    				start_addr=EE_DEV_SCENE_ADDR+dev_index*DEV_SCENE_SIZE+SCENE_ITEM_NUM*sc_index;															//取得指定场景号的地址
000008  eb0500c5          ADD      r0,r5,r5,LSL #3
00000c  eb001005          ADD      r0,r0,r5,LSL #4
000010  f44f5180          MOV      r1,#0x1000
000014  eb011040          ADD      r0,r1,r0,LSL #5
000018  2110              MOVS     r1,#0x10
00001a  fb010006          MLA      r0,r1,r6,r0
00001e  fa1ff980          UXTH     r9,r0
;;;620    				pt=(uint8_t *)(Scene[dev_index].item+sc_index);
000022  f2401091          MOV      r0,#0x191
000026  4368              MULS     r0,r5,r0
000028  491c              LDR      r1,|L35.156|
00002a  eb010040          ADD      r0,r1,r0,LSL #1
00002e  1c80              ADDS     r0,r0,#2
000030  eb001b06          ADD      r11,r0,r6,LSL #4
;;;621    	   
;;;622    				sum=0;	
000034  f04f0800          MOV      r8,#0
;;;623    				for(i=0;i<SCENE_ITEM_NUM-1;i++)
000038  2400              MOVS     r4,#0
00003a  e00a              B        |L35.82|
                  |L35.60|
;;;624    				{
;;;625    							buf[i]=*(pt+i);
00003c  f81b0004          LDRB     r0,[r11,r4]
000040  f80d0004          STRB     r0,[sp,r4]
;;;626    							sum=sum+buf[i];
000044  f81d0004          LDRB     r0,[sp,r4]
000048  4440              ADD      r0,r0,r8
00004a  f00008ff          AND      r8,r0,#0xff
00004e  1c60              ADDS     r0,r4,#1              ;623
000050  b2c4              UXTB     r4,r0                 ;623
                  |L35.82|
000052  2c0f              CMP      r4,#0xf               ;623
000054  dbf2              BLT      |L35.60|
;;;627    				}
;;;628    				buf[SCENE_ITEM_NUM-1]=sum;
000056  f88d800f          STRB     r8,[sp,#0xf]
;;;629    				
;;;630    				cnt=2;
00005a  2702              MOVS     r7,#2
;;;631    				while(cnt>0)
00005c  e019              B        |L35.146|
                  |L35.94|
;;;632    				{
;;;633    							I2C_WP_SET(0);
00005e  2000              MOVS     r0,#0
000060  f7fffffe          BL       I2C_WP_SET
;;;634    							err=WriteDataToFlash(start_addr,&buf[0],SCENE_ITEM_NUM);
000064  2210              MOVS     r2,#0x10
000066  4669              MOV      r1,sp
000068  4648              MOV      r0,r9
00006a  f7fffffe          BL       WriteDataToFlash
00006e  4682              MOV      r10,r0
;;;635    							err=WriteDataToFlash(start_addr+SCENE_BCK_OFFSET,&buf[0],SCENE_ITEM_NUM);
000070  f5094180          ADD      r1,r9,#0x4000
000074  b288              UXTH     r0,r1
000076  2210              MOVS     r2,#0x10
000078  4669              MOV      r1,sp
00007a  f7fffffe          BL       WriteDataToFlash
00007e  4682              MOV      r10,r0
;;;636    							I2C_WP_SET(1);
000080  2001              MOVS     r0,#1
000082  f7fffffe          BL       I2C_WP_SET
;;;637    							cnt--;
000086  1e78              SUBS     r0,r7,#1
000088  b2c7              UXTB     r7,r0
;;;638    							if(err==0)break;
00008a  f1ba0f00          CMP      r10,#0
00008e  d100              BNE      |L35.146|
000090  e001              B        |L35.150|
                  |L35.146|
000092  2f00              CMP      r7,#0                 ;631
000094  dce3              BGT      |L35.94|
                  |L35.150|
000096  bf00              NOP      
;;;639    				}
;;;640    }
000098  e8bd9fff          POP      {r0-r12,pc}
;;;641    
                          ENDP

                  |L35.156|
                          DCD      Scene

                          AREA ||i.__set_PRIMASK||, CODE, READONLY, ALIGN=1

                  __set_PRIMASK PROC
;;;179     */
;;;180    __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
000000  f3808810          MSR      PRIMASK,r0
;;;181    {
;;;182      register uint32_t __regPriMask         __ASM("primask");
;;;183      __regPriMask = (priMask);
;;;184    }
000004  4770              BX       lr
;;;185    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  buf
                          %        50

                          AREA ||.data||, DATA, ALIGN=0

                  tickbuf
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  i
000008  00                DCB      0x00
                  ||cnt||
000009  00                DCB      0x00
                  ||ret||
00000a  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\Func.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_Func_c_Dev_Init____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_Func_c_Dev_Init____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_Func_c_Dev_Init____REVSH|
#line 128
|__asm___6_Func_c_Dev_Init____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
