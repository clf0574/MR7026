; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\outupt\bsp_timer.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=..\outupt\bsp_timer.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\outupt\bsp_timer.crf ..\..\User\bsp\src\bsp_timer.c]
                          THUMB

                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=1

                  SysTick_Handler PROC
;;;456    */
;;;457    void SysTick_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;458    {
;;;459    	SysTick_ISR();
000002  f7fffffe          BL       SysTick_ISR
;;;460    }
000006  bd10              POP      {r4,pc}
;;;461    
                          ENDP


                          AREA ||i.SysTick_ISR||, CODE, READONLY, ALIGN=2

                  SysTick_ISR PROC
;;;132    extern void bsp_RunPer10ms(void);
;;;133    void SysTick_ISR(void)
000000  b510              PUSH     {r4,lr}
;;;134    {
;;;135    	static uint8_t s_count = 0;
;;;136    	uint8_t i;
;;;137    
;;;138    	/* 每隔1ms进来1次 （仅用于 bsp_DelayMS） */
;;;139    	if (s_uiDelayCount > 0)
000002  481b              LDR      r0,|L2.112|
000004  6800              LDR      r0,[r0,#0]  ; s_uiDelayCount
000006  b140              CBZ      r0,|L2.26|
;;;140    	{
;;;141    		if (--s_uiDelayCount == 0)
000008  4819              LDR      r0,|L2.112|
00000a  6800              LDR      r0,[r0,#0]  ; s_uiDelayCount
00000c  1e40              SUBS     r0,r0,#1
00000e  4918              LDR      r1,|L2.112|
000010  6008              STR      r0,[r1,#0]  ; s_uiDelayCount
000012  d102              BNE      |L2.26|
;;;142    		{
;;;143    			s_ucTimeOutFlag = 1;
000014  2001              MOVS     r0,#1
000016  4917              LDR      r1,|L2.116|
000018  7008              STRB     r0,[r1,#0]
                  |L2.26|
;;;144    		}
;;;145    	}
;;;146    
;;;147    	/* 每隔1ms，对软件定时器的计数器进行减一操作 */
;;;148    	for (i = 0; i < TMR_COUNT; i++)
00001a  2400              MOVS     r4,#0
00001c  e008              B        |L2.48|
                  |L2.30|
;;;149    	{
;;;150    		bsp_SoftTimerDec(&s_tTmr[i]);
00001e  eb040144          ADD      r1,r4,r4,LSL #1
000022  4a15              LDR      r2,|L2.120|
000024  eb020081          ADD      r0,r2,r1,LSL #2
000028  f7fffffe          BL       bsp_SoftTimerDec
00002c  1c60              ADDS     r0,r4,#1              ;148
00002e  b2c4              UXTB     r4,r0                 ;148
                  |L2.48|
000030  2c09              CMP      r4,#9                 ;148
000032  dbf4              BLT      |L2.30|
;;;151    	}
;;;152    
;;;153    	/* 全局运行时间每1ms增1 */
;;;154    	g_iRunTime++;
000034  4811              LDR      r0,|L2.124|
000036  6800              LDR      r0,[r0,#0]  ; g_iRunTime
000038  1c40              ADDS     r0,r0,#1
00003a  4910              LDR      r1,|L2.124|
00003c  6008              STR      r0,[r1,#0]  ; g_iRunTime
;;;155    	if (g_iRunTime == 0x7FFFFFFF)	/* 这个变量是 int32_t 类型，最大数为 0x7FFFFFFF */
00003e  4608              MOV      r0,r1
000040  6800              LDR      r0,[r0,#0]  ; g_iRunTime
000042  f06f4100          MVN      r1,#0x80000000
000046  4288              CMP      r0,r1
000048  d102              BNE      |L2.80|
;;;156    	{
;;;157    		g_iRunTime = 0;
00004a  2000              MOVS     r0,#0
00004c  490b              LDR      r1,|L2.124|
00004e  6008              STR      r0,[r1,#0]  ; g_iRunTime
                  |L2.80|
;;;158    	}
;;;159    
;;;160    	bsp_RunPer1ms();		/* 每隔1ms调用一次此函数，此函数在 bsp.c */
000050  f7fffffe          BL       bsp_RunPer1ms
;;;161    
;;;162    	if (++s_count >= 10)
000054  480a              LDR      r0,|L2.128|
000056  7800              LDRB     r0,[r0,#0]  ; s_count
000058  1c40              ADDS     r0,r0,#1
00005a  b2c0              UXTB     r0,r0
00005c  4908              LDR      r1,|L2.128|
00005e  7008              STRB     r0,[r1,#0]
000060  280a              CMP      r0,#0xa
000062  db03              BLT      |L2.108|
;;;163    	{
;;;164    		s_count = 0;
000064  2000              MOVS     r0,#0
000066  7008              STRB     r0,[r1,#0]
;;;165    
;;;166    		bsp_RunPer10ms();	/* 每隔10ms调用一次此函数，此函数在 bsp.c */
000068  f7fffffe          BL       bsp_RunPer10ms
                  |L2.108|
;;;167    	}
;;;168    	
;;;169    }
00006c  bd10              POP      {r4,pc}
;;;170    
                          ENDP

00006e  0000              DCW      0x0000
                  |L2.112|
                          DCD      s_uiDelayCount
                  |L2.116|
                          DCD      s_ucTimeOutFlag
                  |L2.120|
                          DCD      s_tTmr
                  |L2.124|
                          DCD      g_iRunTime
                  |L2.128|
                          DCD      s_count

                          AREA ||i.TIM2_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM2_IRQHandler PROC
;;;614    #ifdef USE_TIM2
;;;615    void TIM2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;616    #endif
;;;617    
;;;618    #ifdef USE_TIM3
;;;619    void TIM3_IRQHandler(void)
;;;620    #endif
;;;621    
;;;622    #ifdef USE_TIM4
;;;623    void TIM4_IRQHandler(void)
;;;624    #endif
;;;625    
;;;626    #ifdef USE_TIM5
;;;627    void TIM5_IRQHandler(void)
;;;628    #endif
;;;629    {
;;;630        if (TIM_GetITStatus(TIM_HARD, TIM_IT_CC1))
000002  2102              MOVS     r1,#2
000004  0748              LSLS     r0,r1,#29
000006  f7fffffe          BL       TIM_GetITStatus
00000a  b158              CBZ      r0,|L3.36|
;;;631        {
;;;632            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC1);
00000c  2102              MOVS     r1,#2
00000e  0748              LSLS     r0,r1,#29
000010  f7fffffe          BL       TIM_ClearITPendingBit
;;;633            TIM_ITConfig(TIM_HARD, TIM_IT_CC1, DISABLE);	/* 禁能CC1中断 */
000014  2200              MOVS     r2,#0
000016  2102              MOVS     r1,#2
000018  0748              LSLS     r0,r1,#29
00001a  f7fffffe          BL       TIM_ITConfig
;;;634    
;;;635            /* 先关闭中断，再执行回调函数。因为回调函数可能需要重启定时器 */
;;;636            s_TIM_CallBack1();
00001e  481b              LDR      r0,|L3.140|
000020  6800              LDR      r0,[r0,#0]  ; s_TIM_CallBack1
000022  4780              BLX      r0
                  |L3.36|
;;;637        }
;;;638    
;;;639        if (TIM_GetITStatus(TIM_HARD, TIM_IT_CC2))
000024  2104              MOVS     r1,#4
000026  0708              LSLS     r0,r1,#28
000028  f7fffffe          BL       TIM_GetITStatus
00002c  b158              CBZ      r0,|L3.70|
;;;640        {
;;;641            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC2);
00002e  2104              MOVS     r1,#4
000030  0708              LSLS     r0,r1,#28
000032  f7fffffe          BL       TIM_ClearITPendingBit
;;;642            TIM_ITConfig(TIM_HARD, TIM_IT_CC2, DISABLE);	/* 禁能CC2中断 */
000036  2200              MOVS     r2,#0
000038  2104              MOVS     r1,#4
00003a  0708              LSLS     r0,r1,#28
00003c  f7fffffe          BL       TIM_ITConfig
;;;643    
;;;644            /* 先关闭中断，再执行回调函数。因为回调函数可能需要重启定时器 */
;;;645            s_TIM_CallBack2();
000040  4813              LDR      r0,|L3.144|
000042  6800              LDR      r0,[r0,#0]  ; s_TIM_CallBack2
000044  4780              BLX      r0
                  |L3.70|
;;;646        }
;;;647    
;;;648        if (TIM_GetITStatus(TIM_HARD, TIM_IT_CC3))
000046  2108              MOVS     r1,#8
000048  06c8              LSLS     r0,r1,#27
00004a  f7fffffe          BL       TIM_GetITStatus
00004e  b158              CBZ      r0,|L3.104|
;;;649        {
;;;650            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC3);
000050  2108              MOVS     r1,#8
000052  06c8              LSLS     r0,r1,#27
000054  f7fffffe          BL       TIM_ClearITPendingBit
;;;651            TIM_ITConfig(TIM_HARD, TIM_IT_CC3, DISABLE);	/* 禁能CC3中断 */
000058  2200              MOVS     r2,#0
00005a  2108              MOVS     r1,#8
00005c  06c8              LSLS     r0,r1,#27
00005e  f7fffffe          BL       TIM_ITConfig
;;;652    
;;;653            /* 先关闭中断，再执行回调函数。因为回调函数可能需要重启定时器 */
;;;654            s_TIM_CallBack3();
000062  480c              LDR      r0,|L3.148|
000064  6800              LDR      r0,[r0,#0]  ; s_TIM_CallBack3
000066  4780              BLX      r0
                  |L3.104|
;;;655        }
;;;656    
;;;657        if (TIM_GetITStatus(TIM_HARD, TIM_IT_CC4))
000068  2110              MOVS     r1,#0x10
00006a  0688              LSLS     r0,r1,#26
00006c  f7fffffe          BL       TIM_GetITStatus
000070  b158              CBZ      r0,|L3.138|
;;;658        {
;;;659            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC4);
000072  2110              MOVS     r1,#0x10
000074  0688              LSLS     r0,r1,#26
000076  f7fffffe          BL       TIM_ClearITPendingBit
;;;660            TIM_ITConfig(TIM_HARD, TIM_IT_CC4, DISABLE);	/* 禁能CC4中断 */
00007a  2200              MOVS     r2,#0
00007c  2110              MOVS     r1,#0x10
00007e  0688              LSLS     r0,r1,#26
000080  f7fffffe          BL       TIM_ITConfig
;;;661    
;;;662            /* 先关闭中断，再执行回调函数。因为回调函数可能需要重启定时器 */
;;;663            s_TIM_CallBack4();
000084  4804              LDR      r0,|L3.152|
000086  6800              LDR      r0,[r0,#0]  ; s_TIM_CallBack4
000088  4780              BLX      r0
                  |L3.138|
;;;664        }
;;;665    }
00008a  bd10              POP      {r4,pc}
;;;666    
                          ENDP

                  |L3.140|
                          DCD      s_TIM_CallBack1
                  |L3.144|
                          DCD      s_TIM_CallBack2
                  |L3.148|
                          DCD      s_TIM_CallBack3
                  |L3.152|
                          DCD      s_TIM_CallBack4

                          AREA ||i.__set_PRIMASK||, CODE, READONLY, ALIGN=1

                  __set_PRIMASK PROC
;;;179     */
;;;180    __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
000000  f3808810          MSR      PRIMASK,r0
;;;181    {
;;;182      register uint32_t __regPriMask         __ASM("primask");
;;;183      __regPriMask = (priMask);
;;;184    }
000004  4770              BX       lr
;;;185    
                          ENDP


                          AREA ||i.bsp_CheckRunTime||, CODE, READONLY, ALIGN=2

                  bsp_CheckRunTime PROC
;;;425    */
;;;426    int32_t bsp_CheckRunTime(int32_t _LastTime)
000000  b570              PUSH     {r4-r6,lr}
;;;427    {
000002  4604              MOV      r4,r0
;;;428    	int32_t now_time;
;;;429    	int32_t time_diff;
;;;430    
;;;431    	DISABLE_INT();  	/* 关中断 */
000004  2001              MOVS     r0,#1
000006  f7fffffe          BL       __set_PRIMASK
;;;432    
;;;433    	now_time = g_iRunTime;	/* 这个变量在Systick中断中被改写，因此需要关中断进行保护 */
00000a  4807              LDR      r0,|L5.40|
00000c  6806              LDR      r6,[r0,#0]  ; g_iRunTime
;;;434    
;;;435    	ENABLE_INT();  		/* 开中断 */
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       __set_PRIMASK
;;;436    	
;;;437    	if (now_time >= _LastTime)
000014  42a6              CMP      r6,r4
000016  db01              BLT      |L5.28|
;;;438    	{
;;;439    		time_diff = now_time - _LastTime;
000018  1b35              SUBS     r5,r6,r4
00001a  e003              B        |L5.36|
                  |L5.28|
;;;440    	}
;;;441    	else
;;;442    	{
;;;443    		time_diff = 0x7FFFFFFF - _LastTime + now_time;
00001c  f06f4000          MVN      r0,#0x80000000
000020  1b00              SUBS     r0,r0,r4
000022  1985              ADDS     r5,r0,r6
                  |L5.36|
;;;444    	}
;;;445    
;;;446    	return time_diff;
000024  4628              MOV      r0,r5
;;;447    }
000026  bd70              POP      {r4-r6,pc}
;;;448    
                          ENDP

                  |L5.40|
                          DCD      g_iRunTime

                          AREA ||i.bsp_CheckTimer||, CODE, READONLY, ALIGN=2

                  bsp_CheckTimer PROC
;;;378    */
;;;379    uint8_t bsp_CheckTimer(uint8_t _id)
000000  4601              MOV      r1,r0
;;;380    {
;;;381    	if (_id >= TMR_COUNT)
000002  2909              CMP      r1,#9
000004  db01              BLT      |L6.10|
;;;382    	{
;;;383    		return 0;
000006  2000              MOVS     r0,#0
                  |L6.8|
;;;384    	}
;;;385    
;;;386    	if (s_tTmr[_id].Flag == 1)
;;;387    	{
;;;388    		s_tTmr[_id].Flag = 0;
;;;389    		return 1;
;;;390    	}
;;;391    	else
;;;392    	{
;;;393    		return 0;
;;;394    	}
;;;395    }
000008  4770              BX       lr
                  |L6.10|
00000a  eb010041          ADD      r0,r1,r1,LSL #1       ;386
00000e  4a08              LDR      r2,|L6.48|
000010  eb020080          ADD      r0,r2,r0,LSL #2       ;386
000014  7840              LDRB     r0,[r0,#1]            ;386
000016  2801              CMP      r0,#1                 ;386
000018  d108              BNE      |L6.44|
00001a  2000              MOVS     r0,#0                 ;388
00001c  eb010241          ADD      r2,r1,r1,LSL #1       ;388
000020  4b03              LDR      r3,|L6.48|
000022  eb030282          ADD      r2,r3,r2,LSL #2       ;388
000026  7050              STRB     r0,[r2,#1]            ;388
000028  2001              MOVS     r0,#1                 ;389
00002a  e7ed              B        |L6.8|
                  |L6.44|
00002c  2000              MOVS     r0,#0                 ;393
00002e  e7eb              B        |L6.8|
;;;396    
                          ENDP

                  |L6.48|
                          DCD      s_tTmr

                          AREA ||i.bsp_DelayMS||, CODE, READONLY, ALIGN=2

                  bsp_DelayMS PROC
;;;204    */
;;;205    void bsp_DelayMS(uint32_t n)
000000  b510              PUSH     {r4,lr}
;;;206    {
000002  4604              MOV      r4,r0
;;;207    	if (n == 0)
000004  b904              CBNZ     r4,|L7.8|
                  |L7.6|
;;;208    	{
;;;209    		return;
;;;210    	}
;;;211    	else if (n == 1)
;;;212    	{
;;;213    		n = 2;
;;;214    	}
;;;215    
;;;216    	DISABLE_INT();  			/* 关中断 */
;;;217    
;;;218    	s_uiDelayCount = n;
;;;219    	s_ucTimeOutFlag = 0;
;;;220    
;;;221    	ENABLE_INT();  				/* 开中断 */
;;;222    
;;;223    	while (1)
;;;224    	{
;;;225    		bsp_Idle();				/* CPU空闲执行的操作， 见 bsp.c 和 bsp.h 文件 */
;;;226    
;;;227    		/*
;;;228    			等待延迟时间到
;;;229    			注意：编译器认为 s_ucTimeOutFlag = 0，所以可能优化错误，因此 s_ucTimeOutFlag 变量必须申明为 volatile
;;;230    		*/
;;;231    		if (s_ucTimeOutFlag == 1)
;;;232    		{
;;;233    			break;
;;;234    		}
;;;235    	}
;;;236    }
000006  bd10              POP      {r4,pc}
                  |L7.8|
000008  2c01              CMP      r4,#1                 ;211
00000a  d100              BNE      |L7.14|
00000c  2402              MOVS     r4,#2                 ;213
                  |L7.14|
00000e  2001              MOVS     r0,#1                 ;216
000010  f7fffffe          BL       __set_PRIMASK
000014  4809              LDR      r0,|L7.60|
000016  6004              STR      r4,[r0,#0]            ;218  ; s_uiDelayCount
000018  2000              MOVS     r0,#0                 ;219
00001a  4909              LDR      r1,|L7.64|
00001c  7008              STRB     r0,[r1,#0]            ;219
00001e  f7fffffe          BL       __set_PRIMASK
000022  e006              B        |L7.50|
                  |L7.36|
000024  f7fffffe          BL       bsp_Idle
000028  4805              LDR      r0,|L7.64|
00002a  7800              LDRB     r0,[r0,#0]            ;231  ; s_ucTimeOutFlag
00002c  2801              CMP      r0,#1                 ;231
00002e  d100              BNE      |L7.50|
000030  e000              B        |L7.52|
                  |L7.50|
000032  e7f7              B        |L7.36|
                  |L7.52|
000034  bf00              NOP                            ;233
000036  bf00              NOP      
000038  e7e5              B        |L7.6|
;;;237    
                          ENDP

00003a  0000              DCW      0x0000
                  |L7.60|
                          DCD      s_uiDelayCount
                  |L7.64|
                          DCD      s_ucTimeOutFlag

                          AREA ||i.bsp_DelayUS||, CODE, READONLY, ALIGN=2

                  bsp_DelayUS PROC
;;;245    */
;;;246    void bsp_DelayUS(uint32_t n)
000000  b5f0              PUSH     {r4-r7,lr}
;;;247    {
000002  4603              MOV      r3,r0
;;;248        uint32_t ticks;
;;;249        uint32_t told;
;;;250        uint32_t tnow;
;;;251        uint32_t tcnt = 0;
000004  2200              MOVS     r2,#0
;;;252        uint32_t reload;
;;;253           
;;;254    	reload = SysTick->LOAD;                
000006  f04f26e0          MOV      r6,#0xe000e000
00000a  6975              LDR      r5,[r6,#0x14]
;;;255        ticks = n * (SystemCoreClock / 1000000);	 /* 需要的节拍数 */  
00000c  4e0f              LDR      r6,|L8.76|
00000e  6836              LDR      r6,[r6,#0]  ; SystemCoreClock
000010  4f0f              LDR      r7,|L8.80|
000012  fbb6f6f7          UDIV     r6,r6,r7
000016  fb06f403          MUL      r4,r6,r3
;;;256        
;;;257        tcnt = 0;
00001a  bf00              NOP      
;;;258        told = SysTick->VAL;             /* 刚进入时的计数器值 */
00001c  f04f26e0          MOV      r6,#0xe000e000
000020  69b1              LDR      r1,[r6,#0x18]
;;;259    
;;;260        while (1)
000022  e010              B        |L8.70|
                  |L8.36|
;;;261        {
;;;262            tnow = SysTick->VAL;    
000024  f04f26e0          MOV      r6,#0xe000e000
000028  69b0              LDR      r0,[r6,#0x18]
;;;263            if (tnow != told)
00002a  4288              CMP      r0,r1
00002c  d00b              BEQ      |L8.70|
;;;264            {    
;;;265                /* SYSTICK是一个递减的计数器 */    
;;;266                if (tnow < told)
00002e  4288              CMP      r0,r1
000030  d202              BCS      |L8.56|
;;;267                {
;;;268                    tcnt += told - tnow;    
000032  1a0e              SUBS     r6,r1,r0
000034  4432              ADD      r2,r2,r6
000036  e002              B        |L8.62|
                  |L8.56|
;;;269                }
;;;270                /* 重新装载递减 */
;;;271                else
;;;272                {
;;;273                    tcnt += reload - tnow + told;    
000038  1a2e              SUBS     r6,r5,r0
00003a  440e              ADD      r6,r6,r1
00003c  4432              ADD      r2,r2,r6
                  |L8.62|
;;;274                }        
;;;275                told = tnow;
00003e  4601              MOV      r1,r0
;;;276    
;;;277                /* 时间超过/等于要延迟的时间,则退出 */
;;;278                if (tcnt >= ticks)
000040  42a2              CMP      r2,r4
000042  d300              BCC      |L8.70|
;;;279                {
;;;280                	break;
000044  e000              B        |L8.72|
                  |L8.70|
000046  e7ed              B        |L8.36|
                  |L8.72|
000048  bf00              NOP      
;;;281                }
;;;282            }  
;;;283        }
;;;284    } 
00004a  bdf0              POP      {r4-r7,pc}
;;;285    
                          ENDP

                  |L8.76|
                          DCD      SystemCoreClock
                  |L8.80|
                          DCD      0x000f4240

                          AREA ||i.bsp_GetRunTime||, CODE, READONLY, ALIGN=2

                  bsp_GetRunTime PROC
;;;404    */
;;;405    int32_t bsp_GetRunTime(void)
000000  b510              PUSH     {r4,lr}
;;;406    {
;;;407    	int32_t runtime;
;;;408    
;;;409    	DISABLE_INT();  	/* 关中断 */
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       __set_PRIMASK
;;;410    
;;;411    	runtime = g_iRunTime;	/* 这个变量在Systick中断中被改写，因此需要关中断进行保护 */
000008  4803              LDR      r0,|L9.24|
00000a  6804              LDR      r4,[r0,#0]  ; g_iRunTime
;;;412    
;;;413    	ENABLE_INT();  		/* 开中断 */
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       __set_PRIMASK
;;;414    
;;;415    	return runtime;
000012  4620              MOV      r0,r4
;;;416    }
000014  bd10              POP      {r4,pc}
;;;417    
                          ENDP

000016  0000              DCW      0x0000
                  |L9.24|
                          DCD      g_iRunTime

                          AREA ||i.bsp_InitHardTimer||, CODE, READONLY, ALIGN=2

                  bsp_InitHardTimer PROC
;;;471    #if defined (USE_TIM2) || defined (USE_TIM3)  || defined (USE_TIM4)	|| defined (USE_TIM5)
;;;472    void bsp_InitHardTimer(void)
000000  b57f              PUSH     {r0-r6,lr}
;;;473    {
;;;474    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;475    	uint32_t usPeriod;
;;;476    	uint16_t usPrescaler;
;;;477    	uint32_t uiTIMxCLK;
;;;478    
;;;479      	/* 使能TIM时钟 */
;;;480    	RCC_APB1PeriphClockCmd(TIM_HARD_RCC, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;481    
;;;482        /*-----------------------------------------------------------------------
;;;483    		system_stm32f4xx.c 文件中 void SetSysClock(void) 函数对时钟的配置如下：
;;;484    
;;;485    		HCLK = SYSCLK / 1     (AHB1Periph)
;;;486    		PCLK2 = HCLK / 2      (APB2Periph)
;;;487    		PCLK1 = HCLK / 4      (APB1Periph)
;;;488    
;;;489    		因为APB1 prescaler != 1, 所以 APB1上的TIMxCLK = PCLK1 x 2 = SystemCoreClock / 2;
;;;490    		因为APB2 prescaler != 1, 所以 APB2上的TIMxCLK = PCLK2 x 2 = SystemCoreClock;
;;;491    
;;;492    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM7, TIM12, TIM13,TIM14
;;;493    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;494    
;;;495    	----------------------------------------------------------------------- */
;;;496    	uiTIMxCLK = SystemCoreClock / 2;
00000a  4815              LDR      r0,|L10.96|
00000c  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00000e  0846              LSRS     r6,r0,#1
;;;497    
;;;498    	usPrescaler = uiTIMxCLK / 1000000 ;	/* 分频到周期 1us */
000010  4814              LDR      r0,|L10.100|
000012  fbb6f0f0          UDIV     r0,r6,r0
000016  b285              UXTH     r5,r0
;;;499    	
;;;500    #if defined (USE_TIM2) || defined (USE_TIM5) 
;;;501    	//usPeriod = 0xFFFFFFFF;	/* 407支持32位定时器 */
;;;502    	usPeriod = 0xFFFF;	/* 103支持16位 */
000018  f64f74ff          MOV      r4,#0xffff
;;;503    #else
;;;504    	usPeriod = 0xFFFF;
;;;505    #endif
;;;506    	/* Time base configuration */
;;;507    	TIM_TimeBaseStructure.TIM_Period = usPeriod;
00001c  f8ad4008          STRH     r4,[sp,#8]
;;;508    	TIM_TimeBaseStructure.TIM_Prescaler = usPrescaler;
000020  f8ad5004          STRH     r5,[sp,#4]
;;;509    	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
000024  2000              MOVS     r0,#0
000026  f8ad000a          STRH     r0,[sp,#0xa]
;;;510    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
00002a  f8ad0006          STRH     r0,[sp,#6]
;;;511    
;;;512    	TIM_TimeBaseInit(TIM_HARD, &TIM_TimeBaseStructure);
00002e  a901              ADD      r1,sp,#4
000030  f04f4080          MOV      r0,#0x40000000
000034  f7fffffe          BL       TIM_TimeBaseInit
;;;513    
;;;514    	//TIM_ARRPreloadConfig(TIMx, ENABLE);
;;;515    
;;;516    	/* TIMx enable counter */
;;;517    	TIM_Cmd(TIM_HARD, ENABLE);
000038  2101              MOVS     r1,#1
00003a  0788              LSLS     r0,r1,#30
00003c  f7fffffe          BL       TIM_Cmd
;;;518    
;;;519    	/* 配置TIM定时中断 (Update) */
;;;520    	{
;;;521    		NVIC_InitTypeDef NVIC_InitStructure;	/* 中断结构体在 misc.h 中定义 */
;;;522    
;;;523    		NVIC_InitStructure.NVIC_IRQChannel = TIM_HARD_IRQn;
000040  201c              MOVS     r0,#0x1c
000042  f88d0000          STRB     r0,[sp,#0]
;;;524    
;;;525    		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 4;	/* 比串口优先级低 */
000046  2004              MOVS     r0,#4
000048  f88d0001          STRB     r0,[sp,#1]
;;;526    		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
00004c  2000              MOVS     r0,#0
00004e  f88d0002          STRB     r0,[sp,#2]
;;;527    		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000052  2001              MOVS     r0,#1
000054  f88d0003          STRB     r0,[sp,#3]
;;;528    		NVIC_Init(&NVIC_InitStructure);
000058  4668              MOV      r0,sp
00005a  f7fffffe          BL       NVIC_Init
;;;529    	}
;;;530    }
00005e  bd7f              POP      {r0-r6,pc}
;;;531    
                          ENDP

                  |L10.96|
                          DCD      SystemCoreClock
                  |L10.100|
                          DCD      0x000f4240

                          AREA ||i.bsp_InitTimer||, CODE, READONLY, ALIGN=2

                  bsp_InitTimer PROC
;;;90     */
;;;91     void bsp_InitTimer(void)
000000  b570              PUSH     {r4-r6,lr}
;;;92     {
;;;93     	uint8_t i;
;;;94     
;;;95     	/* 清零所有的软件定时器 */
;;;96     	for (i = 0; i < TMR_COUNT; i++)
000002  2400              MOVS     r4,#0
000004  e016              B        |L11.52|
                  |L11.6|
;;;97     	{
;;;98     		s_tTmr[i].Count = 0;
000006  2000              MOVS     r0,#0
000008  eb040144          ADD      r1,r4,r4,LSL #1
00000c  4a20              LDR      r2,|L11.144|
00000e  eb020181          ADD      r1,r2,r1,LSL #2
000012  6048              STR      r0,[r1,#4]
;;;99     		s_tTmr[i].PreLoad = 0;
000014  eb040144          ADD      r1,r4,r4,LSL #1
000018  eb020181          ADD      r1,r2,r1,LSL #2
00001c  6088              STR      r0,[r1,#8]
;;;100    		s_tTmr[i].Flag = 0;
00001e  eb040144          ADD      r1,r4,r4,LSL #1
000022  eb020181          ADD      r1,r2,r1,LSL #2
000026  7048              STRB     r0,[r1,#1]
;;;101    		s_tTmr[i].Mode = TMR_ONCE_MODE;	/* 缺省是1次性工作模式 */
000028  eb040144          ADD      r1,r4,r4,LSL #1
00002c  f8020021          STRB     r0,[r2,r1,LSL #2]
000030  1c60              ADDS     r0,r4,#1              ;96
000032  b2c4              UXTB     r4,r0                 ;96
                  |L11.52|
000034  2c09              CMP      r4,#9                 ;96
000036  dbe6              BLT      |L11.6|
;;;102    	}
;;;103    
;;;104    	/*
;;;105    		配置systic中断周期为1ms，并启动systick中断。
;;;106    
;;;107        	SystemCoreClock 是固件中定义的系统内核时钟，对于STM32F4XX,一般为 168MHz
;;;108    
;;;109        	SysTick_Config() 函数的形参表示内核时钟多少个周期后触发一次Systick定时中断.
;;;110    	    	-- SystemCoreClock / 1000  表示定时频率为 1000Hz， 也就是定时周期为  1ms
;;;111    	    	-- SystemCoreClock / 500   表示定时频率为 500Hz，  也就是定时周期为  2ms
;;;112    	    	-- SystemCoreClock / 2000  表示定时频率为 2000Hz， 也就是定时周期为  500us
;;;113    
;;;114        	对于常规的应用，我们一般取定时周期1ms。对于低速CPU或者低功耗应用，可以设置定时周期为 10ms
;;;115        */
;;;116    	SysTick_Config(SystemCoreClock / 1000);
000038  4816              LDR      r0,|L11.148|
00003a  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00003c  f44f727a          MOV      r2,#0x3e8
000040  fbb0f1f2          UDIV     r1,r0,r2
000044  f1b17f80          CMP      r1,#0x1000000
000048  d300              BCC      |L11.76|
00004a  e01d              B        |L11.136|
                  |L11.76|
00004c  f021407f          BIC      r0,r1,#0xff000000
000050  1e40              SUBS     r0,r0,#1
000052  f04f22e0          MOV      r2,#0xe000e000
000056  6150              STR      r0,[r2,#0x14]
000058  1750              ASRS     r0,r2,#29
00005a  220f              MOVS     r2,#0xf
00005c  2800              CMP      r0,#0
00005e  da07              BGE      |L11.112|
000060  0713              LSLS     r3,r2,#28
000062  0e1e              LSRS     r6,r3,#24
000064  4b0c              LDR      r3,|L11.152|
000066  f000050f          AND      r5,r0,#0xf
00006a  1f2d              SUBS     r5,r5,#4
00006c  555e              STRB     r6,[r3,r5]
00006e  e003              B        |L11.120|
                  |L11.112|
000070  0713              LSLS     r3,r2,#28
000072  0e1d              LSRS     r5,r3,#24
000074  4b09              LDR      r3,|L11.156|
000076  541d              STRB     r5,[r3,r0]
                  |L11.120|
000078  bf00              NOP      
00007a  2000              MOVS     r0,#0
00007c  f04f22e0          MOV      r2,#0xe000e000
000080  6190              STR      r0,[r2,#0x18]
000082  2007              MOVS     r0,#7
000084  6110              STR      r0,[r2,#0x10]
000086  bf00              NOP      
                  |L11.136|
;;;117    	
;;;118    #if defined (USE_TIM2) || defined (USE_TIM3)  || defined (USE_TIM4)	|| defined (USE_TIM5)
;;;119    	bsp_InitHardTimer();
000088  f7fffffe          BL       bsp_InitHardTimer
;;;120    #endif
;;;121    }
00008c  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP

00008e  0000              DCW      0x0000
                  |L11.144|
                          DCD      s_tTmr
                  |L11.148|
                          DCD      SystemCoreClock
                  |L11.152|
                          DCD      0xe000ed18
                  |L11.156|
                          DCD      0xe000e400

                          AREA ||i.bsp_SoftTimerDec||, CODE, READONLY, ALIGN=1

                  bsp_SoftTimerDec PROC
;;;178    */
;;;179    static void bsp_SoftTimerDec(SOFT_TMR *_tmr)
000000  6841              LDR      r1,[r0,#4]
;;;180    {
;;;181    	if (_tmr->Count > 0)
000002  b151              CBZ      r1,|L12.26|
;;;182    	{
;;;183    		/* 如果定时器变量减到1则设置定时器到达标志 */
;;;184    		if (--_tmr->Count == 0)
000004  6841              LDR      r1,[r0,#4]
000006  1e49              SUBS     r1,r1,#1
000008  6041              STR      r1,[r0,#4]
00000a  d106              BNE      |L12.26|
;;;185    		{
;;;186    			_tmr->Flag = 1;
00000c  2101              MOVS     r1,#1
00000e  7041              STRB     r1,[r0,#1]
;;;187    
;;;188    			/* 如果是自动模式，则自动重装计数器 */
;;;189    			if(_tmr->Mode == TMR_AUTO_MODE)
000010  7801              LDRB     r1,[r0,#0]
000012  2901              CMP      r1,#1
000014  d101              BNE      |L12.26|
;;;190    			{
;;;191    				_tmr->Count = _tmr->PreLoad;
000016  6881              LDR      r1,[r0,#8]
000018  6041              STR      r1,[r0,#4]
                  |L12.26|
;;;192    			}
;;;193    		}
;;;194    	}
;;;195    }
00001a  4770              BX       lr
;;;196    
                          ENDP


                          AREA ||i.bsp_StartAutoTimer||, CODE, READONLY, ALIGN=2

                  bsp_StartAutoTimer PROC
;;;324    */
;;;325    void bsp_StartAutoTimer(uint8_t _id, uint32_t _period)
000000  b570              PUSH     {r4-r6,lr}
;;;326    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;327    	if (_id >= TMR_COUNT)
000006  2c09              CMP      r4,#9
000008  db01              BLT      |L13.14|
;;;328    	{
;;;329    		/* 打印出错的源代码文件名、函数名称 */
;;;330    		//BSP_Printf("Error: file %s, function %s()\r\n", __FILE__, __FUNCTION__);
;;;331    		while(1); /* 参数异常，死机等待看门狗复位 */
00000a  bf00              NOP      
                  |L13.12|
00000c  e7fe              B        |L13.12|
                  |L13.14|
;;;332    	}
;;;333    
;;;334    	DISABLE_INT();  		/* 关中断 */
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       __set_PRIMASK
;;;335    
;;;336    	s_tTmr[_id].Count = _period;			/* 实时计数器初值 */
000014  eb040044          ADD      r0,r4,r4,LSL #1
000018  490c              LDR      r1,|L13.76|
00001a  eb010080          ADD      r0,r1,r0,LSL #2
00001e  6045              STR      r5,[r0,#4]
;;;337    	s_tTmr[_id].PreLoad = _period;		/* 计数器自动重装值，仅自动模式起作用 */
000020  eb040044          ADD      r0,r4,r4,LSL #1
000024  eb010080          ADD      r0,r1,r0,LSL #2
000028  6085              STR      r5,[r0,#8]
;;;338    	s_tTmr[_id].Flag = 0;				/* 定时时间到标志 */
00002a  2000              MOVS     r0,#0
00002c  eb040144          ADD      r1,r4,r4,LSL #1
000030  4a06              LDR      r2,|L13.76|
000032  eb020181          ADD      r1,r2,r1,LSL #2
000036  7048              STRB     r0,[r1,#1]
;;;339    	s_tTmr[_id].Mode = TMR_AUTO_MODE;	/* 自动工作模式 */
000038  2001              MOVS     r0,#1
00003a  eb040144          ADD      r1,r4,r4,LSL #1
00003e  f8020021          STRB     r0,[r2,r1,LSL #2]
;;;340    
;;;341    	ENABLE_INT();  			/* 开中断 */
000042  2000              MOVS     r0,#0
000044  f7fffffe          BL       __set_PRIMASK
;;;342    }
000048  bd70              POP      {r4-r6,pc}
;;;343    
                          ENDP

00004a  0000              DCW      0x0000
                  |L13.76|
                          DCD      s_tTmr

                          AREA ||i.bsp_StartHardTimer||, CODE, READONLY, ALIGN=2

                  bsp_StartHardTimer PROC
;;;544    */
;;;545    void bsp_StartHardTimer(uint8_t _CC, uint32_t _uiTimeOut, void * _pCallBack)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;546    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;547        uint32_t cnt_now;
;;;548        uint32_t cnt_tar;
;;;549    
;;;550        /*
;;;551            执行下面这个语句，时长 = 18us (通过逻辑分析仪测量IO翻转)
;;;552            bsp_StartTimer2(3, 500, (void *)test1);
;;;553        */
;;;554        if (_uiTimeOut < 5)
00000a  2f05              CMP      r7,#5
00000c  d300              BCC      |L14.16|
;;;555        {
;;;556            ;
;;;557        }
;;;558        else
;;;559        {
;;;560            _uiTimeOut -= 5;
00000e  1f7f              SUBS     r7,r7,#5
                  |L14.16|
;;;561        }
;;;562    
;;;563        cnt_now = TIM_GetCounter(TIM_HARD);    	/* 读取当前的计数器值 */
000010  f04f4080          MOV      r0,#0x40000000
000014  f7fffffe          BL       TIM_GetCounter
000018  4680              MOV      r8,r0
;;;564        cnt_tar = cnt_now + _uiTimeOut;			/* 计算捕获的计数器值 */
00001a  eb080607          ADD      r6,r8,r7
;;;565        if (_CC == 1)
00001e  2c01              CMP      r4,#1
000020  d10f              BNE      |L14.66|
;;;566        {
;;;567            s_TIM_CallBack1 = (void (*)(void))_pCallBack;
000022  4825              LDR      r0,|L14.184|
000024  6005              STR      r5,[r0,#0]  ; s_TIM_CallBack1
;;;568    
;;;569            TIM_SetCompare1(TIM_HARD, cnt_tar);      	/* 设置捕获比较计数器CC1 */
000026  b2b1              UXTH     r1,r6
000028  07a0              LSLS     r0,r4,#30
00002a  f7fffffe          BL       TIM_SetCompare1
;;;570            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC1);
00002e  2102              MOVS     r1,#2
000030  0748              LSLS     r0,r1,#29
000032  f7fffffe          BL       TIM_ClearITPendingBit
;;;571    		TIM_ITConfig(TIM_HARD, TIM_IT_CC1, ENABLE);	/* 使能CC1中断 */
000036  2201              MOVS     r2,#1
000038  2102              MOVS     r1,#2
00003a  0748              LSLS     r0,r1,#29
00003c  f7fffffe          BL       TIM_ITConfig
000040  e038              B        |L14.180|
                  |L14.66|
;;;572    
;;;573        }
;;;574        else if (_CC == 2)
000042  2c02              CMP      r4,#2
000044  d10f              BNE      |L14.102|
;;;575        {
;;;576    		s_TIM_CallBack2 = (void (*)(void))_pCallBack;
000046  481d              LDR      r0,|L14.188|
000048  6005              STR      r5,[r0,#0]  ; s_TIM_CallBack2
;;;577    
;;;578            TIM_SetCompare2(TIM_HARD, cnt_tar);      	/* 设置捕获比较计数器CC2 */
00004a  b2b1              UXTH     r1,r6
00004c  0760              LSLS     r0,r4,#29
00004e  f7fffffe          BL       TIM_SetCompare2
;;;579    		TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC2);
000052  2104              MOVS     r1,#4
000054  0708              LSLS     r0,r1,#28
000056  f7fffffe          BL       TIM_ClearITPendingBit
;;;580    		TIM_ITConfig(TIM_HARD, TIM_IT_CC2, ENABLE);	/* 使能CC2中断 */
00005a  2201              MOVS     r2,#1
00005c  2104              MOVS     r1,#4
00005e  0708              LSLS     r0,r1,#28
000060  f7fffffe          BL       TIM_ITConfig
000064  e026              B        |L14.180|
                  |L14.102|
;;;581        }
;;;582        else if (_CC == 3)
000066  2c03              CMP      r4,#3
000068  d110              BNE      |L14.140|
;;;583        {
;;;584            s_TIM_CallBack3 = (void (*)(void))_pCallBack;
00006a  4815              LDR      r0,|L14.192|
00006c  6005              STR      r5,[r0,#0]  ; s_TIM_CallBack3
;;;585    
;;;586            TIM_SetCompare3(TIM_HARD, cnt_tar);      	/* 设置捕获比较计数器CC3 */
00006e  b2b1              UXTH     r1,r6
000070  f04f4080          MOV      r0,#0x40000000
000074  f7fffffe          BL       TIM_SetCompare3
;;;587            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC3);
000078  2108              MOVS     r1,#8
00007a  06c8              LSLS     r0,r1,#27
00007c  f7fffffe          BL       TIM_ClearITPendingBit
;;;588    		TIM_ITConfig(TIM_HARD, TIM_IT_CC3, ENABLE);	/* 使能CC3中断 */
000080  2201              MOVS     r2,#1
000082  2108              MOVS     r1,#8
000084  06c8              LSLS     r0,r1,#27
000086  f7fffffe          BL       TIM_ITConfig
00008a  e013              B        |L14.180|
                  |L14.140|
;;;589        }
;;;590        else if (_CC == 4)
00008c  2c04              CMP      r4,#4
00008e  d10f              BNE      |L14.176|
;;;591        {
;;;592            s_TIM_CallBack4 = (void (*)(void))_pCallBack;
000090  480c              LDR      r0,|L14.196|
000092  6005              STR      r5,[r0,#0]  ; s_TIM_CallBack4
;;;593    
;;;594            TIM_SetCompare4(TIM_HARD, cnt_tar);      	/* 设置捕获比较计数器CC4 */
000094  b2b1              UXTH     r1,r6
000096  0720              LSLS     r0,r4,#28
000098  f7fffffe          BL       TIM_SetCompare4
;;;595    		TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC4);
00009c  2110              MOVS     r1,#0x10
00009e  0688              LSLS     r0,r1,#26
0000a0  f7fffffe          BL       TIM_ClearITPendingBit
;;;596    		TIM_ITConfig(TIM_HARD, TIM_IT_CC4, ENABLE);	/* 使能CC4中断 */
0000a4  2201              MOVS     r2,#1
0000a6  2110              MOVS     r1,#0x10
0000a8  0688              LSLS     r0,r1,#26
0000aa  f7fffffe          BL       TIM_ITConfig
0000ae  e001              B        |L14.180|
                  |L14.176|
;;;597        }
;;;598    	else
;;;599        {
;;;600            return;
;;;601        }
;;;602    }
0000b0  e8bd81f0          POP      {r4-r8,pc}
                  |L14.180|
0000b4  bf00              NOP      
0000b6  e7fb              B        |L14.176|
;;;603    #endif
                          ENDP

                  |L14.184|
                          DCD      s_TIM_CallBack1
                  |L14.188|
                          DCD      s_TIM_CallBack2
                  |L14.192|
                          DCD      s_TIM_CallBack3
                  |L14.196|
                          DCD      s_TIM_CallBack4

                          AREA ||i.bsp_StartTimer||, CODE, READONLY, ALIGN=2

                  bsp_StartTimer PROC
;;;295    */
;;;296    void bsp_StartTimer(uint8_t _id, uint32_t _period)
000000  b570              PUSH     {r4-r6,lr}
;;;297    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;298    	if (_id >= TMR_COUNT)
000006  2c09              CMP      r4,#9
000008  db00              BLT      |L15.12|
                  |L15.10|
;;;299    	{
;;;300    		/* 打印出错的源代码文件名、函数名称 */
;;;301    		//BSP_Printf("Error: file %s, function %s()\r\n", __FILE__, __FUNCTION__);
;;;302    		//while(1); /* 参数异常，死机等待看门狗复位 */
;;;303    		return;
;;;304    	}
;;;305    
;;;306    	DISABLE_INT();  			/* 关中断 */
;;;307    
;;;308    	s_tTmr[_id].Count = _period;		/* 实时计数器初值 */
;;;309    	s_tTmr[_id].PreLoad = _period;		/* 计数器自动重装值，仅自动模式起作用 */
;;;310    	s_tTmr[_id].Flag = 0;				/* 定时时间到标志 */
;;;311    	s_tTmr[_id].Mode = TMR_ONCE_MODE;	/* 1次性工作模式 */
;;;312    
;;;313    	ENABLE_INT();  				/* 开中断 */
;;;314    }
00000a  bd70              POP      {r4-r6,pc}
                  |L15.12|
00000c  2001              MOVS     r0,#1                 ;306
00000e  f7fffffe          BL       __set_PRIMASK
000012  eb040044          ADD      r0,r4,r4,LSL #1       ;308
000016  490c              LDR      r1,|L15.72|
000018  eb010080          ADD      r0,r1,r0,LSL #2       ;308
00001c  6045              STR      r5,[r0,#4]            ;308
00001e  eb040044          ADD      r0,r4,r4,LSL #1       ;309
000022  eb010080          ADD      r0,r1,r0,LSL #2       ;309
000026  6085              STR      r5,[r0,#8]            ;309
000028  2000              MOVS     r0,#0                 ;310
00002a  eb040144          ADD      r1,r4,r4,LSL #1       ;310
00002e  4a06              LDR      r2,|L15.72|
000030  eb020181          ADD      r1,r2,r1,LSL #2       ;310
000034  7048              STRB     r0,[r1,#1]            ;310
000036  eb040144          ADD      r1,r4,r4,LSL #1       ;311
00003a  f8020021          STRB     r0,[r2,r1,LSL #2]     ;311
00003e  f7fffffe          BL       __set_PRIMASK
000042  bf00              NOP      
000044  e7e1              B        |L15.10|
;;;315    
                          ENDP

000046  0000              DCW      0x0000
                  |L15.72|
                          DCD      s_tTmr

                          AREA ||i.bsp_StopTimer||, CODE, READONLY, ALIGN=2

                  bsp_StopTimer PROC
;;;351    */
;;;352    void bsp_StopTimer(uint8_t _id)
000000  b510              PUSH     {r4,lr}
;;;353    {
000002  4604              MOV      r4,r0
;;;354    	if (_id >= TMR_COUNT)
000004  2c09              CMP      r4,#9
000006  db01              BLT      |L16.12|
;;;355    	{
;;;356    		/* 打印出错的源代码文件名、函数名称 */
;;;357    		//BSP_Printf("Error: file %s, function %s()\r\n", __FILE__, __FUNCTION__);
;;;358    		while(1); /* 参数异常，死机等待看门狗复位 */
000008  bf00              NOP      
                  |L16.10|
00000a  e7fe              B        |L16.10|
                  |L16.12|
;;;359    	}
;;;360    
;;;361    	DISABLE_INT();  	/* 关中断 */
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       __set_PRIMASK
;;;362    
;;;363    	s_tTmr[_id].Count = 0;				/* 实时计数器初值 */
000012  2000              MOVS     r0,#0
000014  eb040144          ADD      r1,r4,r4,LSL #1
000018  4a07              LDR      r2,|L16.56|
00001a  eb020181          ADD      r1,r2,r1,LSL #2
00001e  6048              STR      r0,[r1,#4]
;;;364    	s_tTmr[_id].Flag = 0;				/* 定时时间到标志 */
000020  eb040144          ADD      r1,r4,r4,LSL #1
000024  eb020181          ADD      r1,r2,r1,LSL #2
000028  7048              STRB     r0,[r1,#1]
;;;365    	s_tTmr[_id].Mode = TMR_ONCE_MODE;	/* 自动工作模式 */
00002a  eb040144          ADD      r1,r4,r4,LSL #1
00002e  f8020021          STRB     r0,[r2,r1,LSL #2]
;;;366    
;;;367    	ENABLE_INT();  		/* 开中断 */
000032  f7fffffe          BL       __set_PRIMASK
;;;368    }
000036  bd10              POP      {r4,pc}
;;;369    
                          ENDP

                  |L16.56|
                          DCD      s_tTmr

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  s_tTmr
                          %        108

                          AREA ||.data||, DATA, ALIGN=2

                  s_uiDelayCount
                          DCD      0x00000000
                  s_ucTimeOutFlag
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  g_iRunTime
                          DCD      0x00000000
                  s_count
00000c  00000000          DCB      0x00,0x00,0x00,0x00
                  s_TIM_CallBack1
                          DCD      0x00000000
                  s_TIM_CallBack2
                          DCD      0x00000000
                  s_TIM_CallBack3
                          DCD      0x00000000
                  s_TIM_CallBack4
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_timer.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_bsp_timer_c_95bb07ef____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_bsp_timer_c_95bb07ef____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_bsp_timer_c_95bb07ef____REVSH|
#line 128
|__asm___11_bsp_timer_c_95bb07ef____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
