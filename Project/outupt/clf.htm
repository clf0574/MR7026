<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\outupt\clf.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\outupt\clf.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Thu Mar 29 15:13:48 2018
<BR><P>
<H3>Maximum Stack Usage =        352 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Dev_Init &rArr; Read_Lock_Table &rArr; Init_Lock_Table &rArr; Write_Lock_Table &rArr; WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3c]">AppTask_Run</a> from main.o(i.AppTask_Run) referenced from main.o(i.main)
 <LI><a href="#[3a]">AppTask_WirelessRecv</a> from main.o(i.AppTask_WirelessRecv) referenced from main.o(i.main)
 <LI><a href="#[3b]">AppTask_WirelessSend</a> from main.o(i.AppTask_WirelessSend) referenced from main.o(i.main)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3d]">Check_Frame_Interval</a> from main.o(i.Check_Frame_Interval) referenced from main.o(i.Check_Frame_Interval)
 <LI><a href="#[3d]">Check_Frame_Interval</a> from main.o(i.Check_Frame_Interval) referenced from main.o(i.main)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">IsKeyDown1</a> from bsp_key.o(i.IsKeyDown1) referenced from bsp_key.o(i.bsp_InitKeyVar)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from bsp_timer.o(i.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from bsp_timer.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from bsp_usart.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[35]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[39]">taskRxProcess</a> from main.o(i.taskRxProcess) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[114]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[40]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[115]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[116]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[117]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[118]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[119]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_Date
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[11c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>A7129_Cal</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, bsp_a7139.o(i.A7129_Cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = A7129_Cal &rArr; A7129_ReadPageA &rArr; A7129_ReadReg &rArr; Set_SDIO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Err_State
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Delay10us
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_WriteReg
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_ReadReg
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_ReadPageA
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRF
</UL>

<P><STRONG><a name="[47]"></a>A7129_Config</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, bsp_a7139.o(i.A7129_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = A7129_Config &rArr; A7129_ReadReg &rArr; Set_SDIO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Err_State
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_WriteReg
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_WritePageB
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_WritePageA
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRF
</UL>

<P><STRONG><a name="[46]"></a>A7129_ReadPageA</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_a7139.o(i.A7129_ReadPageA))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = A7129_ReadPageA &rArr; A7129_ReadReg &rArr; Set_SDIO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_WriteReg
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_Cal
</UL>

<P><STRONG><a name="[44]"></a>A7129_ReadReg</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, bsp_a7139.o(i.A7129_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = A7129_ReadReg &rArr; Set_SDIO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDIO_Direction
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_NOP
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_ReadPageA
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_Config
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_Cal
</UL>

<P><STRONG><a name="[4f]"></a>A7129_WriteFIFO</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bsp_a7139.o(i.A7129_WriteFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = A7129_WriteFIFO &rArr; StrobeCMD
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrobeCMD
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TX1
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TX
</UL>

<P><STRONG><a name="[52]"></a>A7129_WriteID</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, bsp_a7139.o(i.A7129_WriteID))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = A7129_WriteID &rArr; ByteRead &rArr; Set_SDIO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Err_State
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRF
</UL>

<P><STRONG><a name="[48]"></a>A7129_WritePageA</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_a7139.o(i.A7129_WritePageA))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = A7129_WritePageA &rArr; A7129_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TX1
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TX
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSSS_MODE
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_Config
</UL>

<P><STRONG><a name="[49]"></a>A7129_WritePageB</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_a7139.o(i.A7129_WritePageB))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = A7129_WritePageB &rArr; A7129_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSSS_MODE
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_Config
</UL>

<P><STRONG><a name="[42]"></a>A7129_WriteReg</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, bsp_a7139.o(i.A7129_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = A7129_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_NOP
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_WritePageB
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_WritePageA
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_ReadPageA
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_Config
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_Cal
</UL>

<P><STRONG><a name="[43]"></a>A7139_Delay10us</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, bsp_a7139.o(i.A7139_Delay10us))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = A7139_Delay10us
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_NOP
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRF
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TX1
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TX
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPacket
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_Cal
</UL>

<P><STRONG><a name="[106]"></a>AppTask_BusMonitor</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, main.o(i.AppTask_BusMonitor))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer1ms
</UL>

<P><STRONG><a name="[54]"></a>AppTask_RivalrySend</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.AppTask_RivalrySend))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AppTask_RivalrySend &rArr; IT1_SendData &rArr; GetRandTime &rArr; Get_SerialNum
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hSCH_Dispatch_Tasks
</UL>

<P><STRONG><a name="[68]"></a>Bsp_Get_UsartData</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_usart.o(i.Bsp_Get_UsartData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_Get_UsartData
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Frame_Interval
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>ByteRead</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bsp_a7139.o(i.ByteRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ByteRead &rArr; Set_SDIO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDIO_Direction
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_NOP
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPacket
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_WriteID
</UL>

<P><STRONG><a name="[51]"></a>ByteSend</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bsp_a7139.o(i.ByteSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ByteSend
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_NOP
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPacket
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_WriteID
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_WriteFIFO
</UL>

<P><STRONG><a name="[3d]"></a>Check_Frame_Interval</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(i.Check_Frame_Interval))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Check_Frame_Interval &rArr; bsp_StartHardTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StartHardTimer
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_UsartData
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.Check_Frame_Interval)
<LI> main.o(i.main)
</UL>
<P><STRONG><a name="[bc]"></a>Check_SelfSend</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, func.o(i.Check_SelfSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Check_SelfSend
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_SendData
</UL>

<P><STRONG><a name="[e0]"></a>Check_Wireless_Addr</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, app_wireless.o(i.Check_Wireless_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Check_Wireless_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
</UL>

<P><STRONG><a name="[e1]"></a>Check_WlLock_Addr</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, app_wireless.o(i.Check_WlLock_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Check_WlLock_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
</UL>

<P><STRONG><a name="[e5]"></a>CompareSync</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, func.o(i.CompareSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompareSync
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
</UL>

<P><STRONG><a name="[6a]"></a>ComposePacket</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, func.o(i.ComposePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ComposePacket &rArr; InfoDecode
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InfoDecode
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
</UL>

<P><STRONG><a name="[6c]"></a>ComposePacketFromDS28E02</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, func.o(i.ComposePacketFromDS28E02))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ComposePacketFromDS28E02 &rArr; GetSecret &rArr; Secret_Verify &rArr; ComputeAndReadPageMAC &rArr; write_byte &rArr; write_bit &rArr; One_Wire_IO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InfoEncode
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InfoDecode
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecret
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
</UL>

<P><STRONG><a name="[6f]"></a>ComputeAndReadPageMAC</STRONG> (Thumb, 274 bytes, Stack size 80 bytes, bsp_ds28e11.o(i.ComputeAndReadPageMAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ComputeAndReadPageMAC &rArr; write_byte &rArr; write_bit &rArr; One_Wire_IO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_byte
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ow_reset
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;docrc16
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Secret_Verify
</UL>

<P><STRONG><a name="[81]"></a>Crc8CheckSum</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, func.o(i.Crc8CheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Crc8CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Secret_Verify
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Lock_Action
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Dev_Action
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Control_IR
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Turn_DataLoad
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Sensor_DataLoad
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_RS485_StuLoad
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_RS485_Report
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Load_RS485_InfoReport
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Load_RS485_Ack
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_LoadInfo_Report
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Key_DataLoad
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_IrSetup_Report
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_IrDel_Report
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_IR_UnLoadToWireless
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_BroadCast
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Dev_StuLoad
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Dev_Declare
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_DevPara_Report
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_ParseFrame
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Lock_DataLoad
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_IR_LoadToWireless
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Dev_Register
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
</UL>

<P><STRONG><a name="[75]"></a>DSSS_MODE</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, bsp_a7139.o(i.DSSS_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DSSS_MODE &rArr; A7129_WritePageB &rArr; A7129_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_WritePageB
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_WritePageA
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRF
</UL>

<P><STRONG><a name="[76]"></a>DeQueueBuf</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, my_queue_chl.o(i.DeQueueBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DeQueueBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrChannelBIT
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Send
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_SendData
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>Delay_us</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_ds28e11.o(i.Delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RomID
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeAndReadPageMAC
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ow_reset
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMemory
</UL>

<P><STRONG><a name="[78]"></a>Dev_Init</STRONG> (Thumb, 488 bytes, Stack size 32 bytes, func.o(i.Dev_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Dev_Init &rArr; Read_Lock_Table &rArr; Init_Lock_Table &rArr; Write_Lock_Table &rArr; WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RomID
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Pannel_Table
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Lock_Table
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ex_Table
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Dev
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Dev
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQueueBUF
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc8CheckSum
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegTimeClr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Pannel_Table
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Lock_Table
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ex_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>DlyEvent_handle</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, func.o(i.DlyEvent_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DlyEvent_handle &rArr; bsp_StartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_Date
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_CMD
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Run
</UL>

<P><STRONG><a name="[83]"></a>EnQueueBuf</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, my_queue_chl.o(i.EnQueueBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EnQueueBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChannelBIT
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Lock_Action
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Dev_Action
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Control_IR
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Turn_DataLoad
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Sensor_DataLoad
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_RS485_StuLoad
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_RS485_Report
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Load_RS485_InfoReport
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_LoadInfo_Report
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Key_DataLoad
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_IrSetup_Report
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_IrDel_Report
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_IR_UnLoadToWireless
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_BroadCast
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Dev_StuLoad
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Dev_Declare
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_DevPara_Report
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Lock_DataLoad
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_IR_LoadToWireless
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Dev_Register
</UL>

<P><STRONG><a name="[45]"></a>Err_State</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_a7139.o(i.Err_State))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_WriteID
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_Config
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_Cal
</UL>

<P><STRONG><a name="[8e]"></a>GPIO_Init</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_IO_SET
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitKeyHard
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitLed
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_EepromInit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRF
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init28E11Hard
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;One_Wire_IO_Direction
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDIO_Direction
</UL>

<P><STRONG><a name="[ee]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_EepromInit
</UL>

<P><STRONG><a name="[4e]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rbyte
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecAck
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDown1
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TX1
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TX
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RX
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_ReadReg
</UL>

<P><STRONG><a name="[4a]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WP_SET
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_wbyte
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rbyte
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendAck
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecAck
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NoAck
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRF
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ow_reset
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrobeCMD
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPacket
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_WriteReg
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_WriteID
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_WriteFIFO
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_ReadReg
</UL>

<P><STRONG><a name="[4b]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WP_SET
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_wbyte
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rbyte
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendAck
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecAck
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NoAck
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRF
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ow_reset
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrobeCMD
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPacket
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_WriteReg
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_WriteID
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_WriteFIFO
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_ReadReg
</UL>

<P><STRONG><a name="[9a]"></a>GetQueue_InQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, my_queue_chl.o(i.GetQueue_InQ))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Lock_Action
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Dev_Action
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Control_IR
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Turn_DataLoad
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Sensor_DataLoad
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_RS485_StuLoad
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_RS485_Report
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Load_RS485_InfoReport
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_LoadInfo_Report
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Key_DataLoad
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_IrSetup_Report
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_IrDel_Report
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_IR_UnLoadToWireless
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_BroadCast
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Dev_StuLoad
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Dev_Declare
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_DevPara_Report
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Lock_DataLoad
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_IR_LoadToWireless
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Dev_Register
</UL>

<P><STRONG><a name="[85]"></a>GetQueue_OutQ</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, my_queue_chl.o(i.GetQueue_OutQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetQueue_OutQ
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsQueueBufEmpty
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FoundChannelBIT
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Send
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_SendData
</UL>

<P><STRONG><a name="[88]"></a>GetRandTime</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, func.o(i.GetRandTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetRandTime &rArr; Get_SerialNum
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_SendData
</UL>

<P><STRONG><a name="[6d]"></a>GetSecret</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, func.o(i.GetSecret))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GetSecret &rArr; Secret_Verify &rArr; ComputeAndReadPageMAC &rArr; write_byte &rArr; write_bit &rArr; One_Wire_IO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Secret_Verify
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComposePacketFromDS28E02
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlLock_Learn_Finish
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Learn_Finish
</UL>

<P><STRONG><a name="[80]"></a>Get_SerialNum</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, func.o(i.Get_SerialNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_SerialNum
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRandTime
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>I2C_SDA_IO_SET</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bsp_eeprom.o(i.I2C_SDA_IO_SET))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rbyte
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecAck
</UL>

<P><STRONG><a name="[92]"></a>I2C_WP_SET</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_eeprom.o(i.I2C_WP_SET))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_WP_SET
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Pannel_Table
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Lock_Table
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Ex_Table
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Dev
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_EepromInit
</UL>

<P><STRONG><a name="[95]"></a>IT1_AddressSetting</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, app_it1.o(i.IT1_AddressSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = IT1_AddressSetting &rArr; Write_Ex_Table &rArr; WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Ex_Table
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Dev
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Dev_Action
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQueueBUF
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Load_RS485_Ack
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegTimeClr
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_Modfiy
</UL>

<P><STRONG><a name="[99]"></a>IT1_DevPara_Report</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, app_it1.o(i.IT1_DevPara_Report))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IT1_DevPara_Report &rArr; EnQueueBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueue_InQ
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueueBuf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc8CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_ParseFrame
</UL>

<P><STRONG><a name="[9b]"></a>IT1_Dev_Declare</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, app_it1.o(i.IT1_Dev_Declare))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IT1_Dev_Declare &rArr; EnQueueBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueue_InQ
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueueBuf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc8CheckSum
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Wireless2RS485
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_Setup
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Learn_Finish
</UL>

<P><STRONG><a name="[59]"></a>IT1_Dev_Register</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, app_it1.o(i.IT1_Dev_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IT1_Dev_Register &rArr; EnQueueBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueue_InQ
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueueBuf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc8CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Run
</UL>

<P><STRONG><a name="[9d]"></a>IT1_Dev_StuLoad</STRONG> (Thumb, 606 bytes, Stack size 32 bytes, app_it1.o(i.IT1_Dev_StuLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IT1_Dev_StuLoad &rArr; EnQueueBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueue_InQ
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueueBuf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc8CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_Date
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Dlytime_Handle
</UL>

<P><STRONG><a name="[64]"></a>IT1_Dlytime_Handle</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, app_it1.o(i.IT1_Dlytime_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IT1_Dlytime_Handle &rArr; IT1_Dev_StuLoad &rArr; EnQueueBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_CheckTimer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Dev_StuLoad
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Lock_DataLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Run
</UL>

<P><STRONG><a name="[9f]"></a>IT1_Function_BroadCast</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, app_it1.o(i.IT1_Function_BroadCast))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IT1_Function_BroadCast &rArr; IT1_Lock_DataLoad &rArr; EnQueueBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQueueBUF
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueue_InQ
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueueBuf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc8CheckSum
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Load_RS485_Ack
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegTimeClr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Lock_DataLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_ParseFrame
</UL>

<P><STRONG><a name="[a0]"></a>IT1_Function_CMD</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, app_it1.o(i.IT1_Function_CMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IT1_Function_CMD &rArr; IT1_Lock_DataLoad &rArr; EnQueueBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Load_RS485_InfoReport
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Load_RS485_Ack
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Lock_DataLoad
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DlyEvent_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_ParseFrame
</UL>

<P><STRONG><a name="[a2]"></a>IT1_Function_Date</STRONG> (Thumb, 1152 bytes, Stack size 48 bytes, app_it1.o(i.IT1_Function_Date))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = IT1_Function_Date &rArr; Write_Lock_Table &rArr; WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wl_wakeup_frame
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Lock_Table
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Lock_Action
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Key_En
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Key_Dis
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_RS485_Report
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Load_RS485_Ack
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Dev_StuLoad
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Lock_DataLoad
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DlyEvent_handle
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_ParseFrame
</UL>

<P><STRONG><a name="[ab]"></a>IT1_Function_Modfiy</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, app_it1.o(i.IT1_Function_Modfiy))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = IT1_Function_Modfiy &rArr; IT1_AddressSetting &rArr; Write_Ex_Table &rArr; WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Modify_Type
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Load_RS485_Ack
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_AddressSetting
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_ParseFrame
</UL>

<P><STRONG><a name="[ad]"></a>IT1_Function_Setup</STRONG> (Thumb, 438 bytes, Stack size 40 bytes, app_it1.o(i.IT1_Function_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = IT1_Function_Setup &rArr; Write_Lock_Table &rArr; WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Lock_Table
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Ex_Table
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_RS4852Wireless
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Load_RS485_Ack
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Dev_Declare
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Lock_DataLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_ParseFrame
</UL>

<P><STRONG><a name="[af]"></a>IT1_IR_DEL</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, app_it1.o(i.IT1_IR_DEL))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IT1_IR_DEL &rArr; IT1_IR_UnLoadToWireless &rArr; EnQueueBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Load_RS485_Ack
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_IR_UnLoadToWireless
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_ParseFrame
</UL>

<P><STRONG><a name="[58]"></a>IT1_IR_LoadToWireless</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, app_it1.o(i.IT1_IR_LoadToWireless))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IT1_IR_LoadToWireless &rArr; EnQueueBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SumCheck
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueue_InQ
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueueBuf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc8CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_IR_Setup
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Run
</UL>

<P><STRONG><a name="[b2]"></a>IT1_IR_Setup</STRONG> (Thumb, 448 bytes, Stack size 16 bytes, app_it1.o(i.IT1_IR_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IT1_IR_Setup &rArr; IT1_IR_LoadToWireless &rArr; EnQueueBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Load_RS485_Ack
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_IR_LoadToWireless
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_ParseFrame
</UL>

<P><STRONG><a name="[b0]"></a>IT1_IR_UnLoadToWireless</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, app_it1.o(i.IT1_IR_UnLoadToWireless))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IT1_IR_UnLoadToWireless &rArr; EnQueueBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SumCheck
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueue_InQ
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueueBuf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc8CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_IR_DEL
</UL>

<P><STRONG><a name="[b3]"></a>IT1_IrDel_Report</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, app_it1.o(i.IT1_IrDel_Report))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IT1_IrDel_Report &rArr; EnQueueBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueue_InQ
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueueBuf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc8CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
</UL>

<P><STRONG><a name="[b4]"></a>IT1_IrSetup_Report</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, app_it1.o(i.IT1_IrSetup_Report))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IT1_IrSetup_Report &rArr; EnQueueBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueue_InQ
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueueBuf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc8CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
</UL>

<P><STRONG><a name="[b5]"></a>IT1_Key_DataLoad</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, app_it1.o(i.IT1_Key_DataLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IT1_Key_DataLoad &rArr; EnQueueBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueue_InQ
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueueBuf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc8CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_hanndle
</UL>

<P><STRONG><a name="[5e]"></a>IT1_LearnLock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_it1.o(i.IT1_LearnLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IT1_LearnLock &rArr; Led_set
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Run
</UL>

<P><STRONG><a name="[b6]"></a>IT1_LoadInfo_Report</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, app_it1.o(i.IT1_LoadInfo_Report))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IT1_LoadInfo_Report &rArr; EnQueueBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueue_InQ
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueueBuf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc8CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_ParseFrame
</UL>

<P><STRONG><a name="[98]"></a>IT1_Load_RS485_Ack</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, app_it1.o(i.IT1_Load_RS485_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IT1_Load_RS485_Ack &rArr; Crc8CheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc8CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_IR_Setup
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_IR_DEL
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_Setup
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_Modfiy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_Date
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_CMD
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_BroadCast
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_AddressSetting
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_ParseFrame
</UL>

<P><STRONG><a name="[a1]"></a>IT1_Load_RS485_InfoReport</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, app_it1.o(i.IT1_Load_RS485_InfoReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IT1_Load_RS485_InfoReport &rArr; EnQueueBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueue_InQ
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueueBuf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc8CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_CMD
</UL>

<P><STRONG><a name="[5a]"></a>IT1_Lock_DataLoad</STRONG> (Thumb, 476 bytes, Stack size 24 bytes, app_it1.o(i.IT1_Lock_DataLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IT1_Lock_DataLoad &rArr; EnQueueBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueue_InQ
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueueBuf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc8CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_Setup
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_Date
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_CMD
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_BroadCast
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Dlytime_Handle
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Run
</UL>

<P><STRONG><a name="[ac]"></a>IT1_Modify_Type</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, app_it1.o(i.IT1_Modify_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = IT1_Modify_Type &rArr; Write_Dev &rArr; WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Dev
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegTimeClr
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_Modfiy
</UL>

<P><STRONG><a name="[b8]"></a>IT1_PROGRAM_Uadata</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, app_it1.o(i.IT1_PROGRAM_Uadata))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_ParseFrame
</UL>

<P><STRONG><a name="[b7]"></a>IT1_ParseFrame</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, app_it1.o(i.IT1_ParseFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = IT1_ParseFrame &rArr; IT1_Function_Date &rArr; Write_Lock_Table &rArr; WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Control_IR
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc8CheckSum
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_PROGRAM_Uadata
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Load_RS485_Ack
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_LoadInfo_Report
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_IR_Setup
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_IR_DEL
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_Setup
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_Modfiy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_Date
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_CMD
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_BroadCast
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_DevPara_Report
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_set
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskRxProcess
</UL>

<P><STRONG><a name="[ba]"></a>IT1_PraseASK</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, app_it1.o(i.IT1_PraseASK))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IT1_PraseASK &rArr; Led_set
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQueueBUF
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_set
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_SendData
</UL>

<P><STRONG><a name="[ae]"></a>IT1_RS4852Wireless</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, app_it1.o(i.IT1_RS4852Wireless))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_Setup
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
</UL>

<P><STRONG><a name="[a5]"></a>IT1_RS485_Report</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, app_it1.o(i.IT1_RS485_Report))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IT1_RS485_Report &rArr; EnQueueBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueue_InQ
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueueBuf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc8CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_Date
</UL>

<P><STRONG><a name="[bb]"></a>IT1_RS485_StuLoad</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, app_it1.o(i.IT1_RS485_StuLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IT1_RS485_StuLoad &rArr; EnQueueBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueue_InQ
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueueBuf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc8CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
</UL>

<P><STRONG><a name="[55]"></a>IT1_SendData</STRONG> (Thumb, 676 bytes, Stack size 16 bytes, app_it1.o(i.IT1_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IT1_SendData &rArr; GetRandTime &rArr; Get_SerialNum
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRandTime
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueue_OutQ
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeQueueBuf
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SelfSend
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_PraseASK
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_RivalrySend
</UL>

<P><STRONG><a name="[bd]"></a>IT1_Sensor_DataLoad</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, app_it1.o(i.IT1_Sensor_DataLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IT1_Sensor_DataLoad &rArr; EnQueueBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueue_InQ
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueueBuf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc8CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
</UL>

<P><STRONG><a name="[be]"></a>IT1_Turn_DataLoad</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, app_it1.o(i.IT1_Turn_DataLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IT1_Turn_DataLoad &rArr; EnQueueBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueue_InQ
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueueBuf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc8CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_hanndle
</UL>

<P><STRONG><a name="[9c]"></a>IT1_Wireless2RS485</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, app_it1.o(i.IT1_Wireless2RS485))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Dev_Declare
</UL>

<P><STRONG><a name="[5c]"></a>IWDG_Feed</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_iwdg.o(i.IWDG_Feed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWDG_Feed
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_Date
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Pannel_Table
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Run
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TX1
</UL>

<P><STRONG><a name="[bf]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>

<P><STRONG><a name="[6b]"></a>InfoDecode</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, func.o(i.InfoDecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InfoDecode
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComposePacketFromDS28E02
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComposePacket
</UL>

<P><STRONG><a name="[6e]"></a>InfoEncode</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, func.o(i.InfoEncode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InfoEncode
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComposePacketFromDS28E02
</UL>

<P><STRONG><a name="[7f]"></a>InitQueueBUF</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, my_queue_chl.o(i.InitQueueBUF))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_PraseASK
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_BroadCast
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_AddressSetting
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
</UL>

<P><STRONG><a name="[61]"></a>Init_Ex_Table</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, func.o(i.Init_Ex_Table))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Init_Ex_Table &rArr; Write_Ex_Table &rArr; WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Ex_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Run
</UL>

<P><STRONG><a name="[62]"></a>Init_Lock_Table</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, func.o(i.Init_Lock_Table))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Init_Lock_Table &rArr; Write_Lock_Table &rArr; WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Lock_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Lock_Table
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Run
</UL>

<P><STRONG><a name="[60]"></a>Init_Pannel_Table</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, func.o(i.Init_Pannel_Table))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Init_Pannel_Table &rArr; Write_Pannel_Table &rArr; WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Pannel_Table
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Run
</UL>

<P><STRONG><a name="[c1]"></a>Ir_Config_Add</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, func.o(i.Ir_Config_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Ir_Config_Add &rArr; Write_Pannel_Table &rArr; WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Pannel_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
</UL>

<P><STRONG><a name="[c2]"></a>Ir_Config_Del</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, func.o(i.Ir_Config_Del))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Ir_Config_Del &rArr; Write_Pannel_Table &rArr; WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Pannel_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
</UL>

<P><STRONG><a name="[86]"></a>IsQueueBufEmpty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, my_queue_chl.o(i.IsQueueBufEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueue_OutQ
</UL>

<P><STRONG><a name="[63]"></a>Led_set</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, bsp_led.o(i.Led_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Led_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_PraseASK
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_Setup
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_ParseFrame
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_LearnLock
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Run
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlLock_Learn_Finish
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Learn_Finish
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>Msg_hanndle</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, func.o(i.Msg_hanndle))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Msg_hanndle &rArr; IT1_Turn_DataLoad &rArr; EnQueueBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetMsg
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Turn_DataLoad
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Key_DataLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Run
</UL>

<P><STRONG><a name="[4c]"></a>My_NOP</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_a7139.o(i.My_NOP))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RX
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrobeCMD
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Delay10us
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_WriteReg
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_ReadReg
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[fd]"></a>NVIC_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitHardTimer
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[f0]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[110]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>One_Wire_IO_Direction</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bsp_ds28e11.o(i.One_Wire_IO_Direction))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = One_Wire_IO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ow_reset
</UL>

<P><STRONG><a name="[c6]"></a>Pannel_Table_Refresh</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, func.o(i.Pannel_Table_Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Pannel_Table_Refresh &rArr; Write_Pannel_Table &rArr; WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Pannel_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
</UL>

<P><STRONG><a name="[fa]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitHardTimer
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[c5]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitKeyHard
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitLed
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_EepromInit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRF
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init28E11Hard
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;One_Wire_IO_Direction
</UL>

<P><STRONG><a name="[dd]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[c7]"></a>RF_RX</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bsp_a7139.o(i.RF_RX))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RF_RX &rArr; RxPacket &rArr; ByteRead &rArr; Set_SDIO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPacket
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_NOP
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
</UL>

<P><STRONG><a name="[c9]"></a>RF_TX</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, bsp_a7139.o(i.RF_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RF_TX &rArr; A7129_WritePageA &rArr; A7129_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrobeCMD
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Delay10us
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_WritePageA
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_WriteFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Send
</UL>

<P><STRONG><a name="[ca]"></a>RF_TX1</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, bsp_a7139.o(i.RF_TX1))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RF_TX1 &rArr; A7129_WritePageA &rArr; A7129_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrobeCMD
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Delay10us
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_WritePageA
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_WriteFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wl_wakeup_frame
</UL>

<P><STRONG><a name="[a8]"></a>RS485_Send</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, bsp_usart.o(i.RS485_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RS485_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_Date
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_SendData
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskRxProcess
</UL>

<P><STRONG><a name="[cd]"></a>ReadDataFromFlash</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, bsp_eeprom.o(i.ReadDataFromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ReadDataFromFlash &rArr; I2C_rbyte &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_wbyte
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rbyte
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendAck
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecAck
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NoAck
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Pannel_Table
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Lock_Table
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ex_Table
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Dev
</UL>

<P><STRONG><a name="[ce]"></a>ReadWriteScratchpad</STRONG> (Thumb, 288 bytes, Stack size 72 bytes, bsp_ds28e11.o(i.ReadWriteScratchpad))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ReadWriteScratchpad &rArr; write_byte &rArr; write_bit &rArr; One_Wire_IO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_byte
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ow_reset
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;docrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Secret_Verify
</UL>

<P><STRONG><a name="[79]"></a>Read_Dev</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, func.o(i.Read_Dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Read_Dev &rArr; Write_Dev &rArr; WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromFlash
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Dev
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
</UL>

<P><STRONG><a name="[7c]"></a>Read_Ex_Table</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, func.o(i.Read_Ex_Table))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Read_Ex_Table &rArr; Write_Ex_Table &rArr; WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromFlash
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Ex_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
</UL>

<P><STRONG><a name="[7d]"></a>Read_Lock_Table</STRONG> (Thumb, 226 bytes, Stack size 112 bytes, func.o(i.Read_Lock_Table))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Read_Lock_Table &rArr; Init_Lock_Table &rArr; Write_Lock_Table &rArr; WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromFlash
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Lock_Table
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Lock_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
</UL>

<P><STRONG><a name="[7e]"></a>Read_Pannel_Table</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, func.o(i.Read_Pannel_Table))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Read_Pannel_Table &rArr; Write_Pannel_Table &rArr; WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromFlash
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Pannel_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
</UL>

<P><STRONG><a name="[7b]"></a>Read_RomID</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bsp_ds28e11.o(i.Read_RomID))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Read_RomID &rArr; write_byte &rArr; write_bit &rArr; One_Wire_IO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_byte
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ow_reset
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dowcrc
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
</UL>

<P><STRONG><a name="[5f]"></a>RegTimeClr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, func.o(i.RegTimeClr))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Modify_Type
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_BroadCast
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_AddressSetting
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Run
</UL>

<P><STRONG><a name="[a4]"></a>Remote_Key_Dis</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, func.o(i.Remote_Key_Dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Remote_Key_Dis &rArr; Write_Pannel_Table &rArr; WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Pannel_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_Date
</UL>

<P><STRONG><a name="[a3]"></a>Remote_Key_En</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, func.o(i.Remote_Key_En))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Remote_Key_En &rArr; Write_Pannel_Table &rArr; WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Pannel_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_Date
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Learn_Finish
</UL>

<P><STRONG><a name="[c8]"></a>RxPacket</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, bsp_a7139.o(i.RxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RxPacket &rArr; ByteRead &rArr; Set_SDIO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrobeCMD
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Delay10us
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RX
</UL>

<P><STRONG><a name="[89]"></a>Secret_Verify</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, func.o(i.Secret_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Secret_Verify &rArr; ComputeAndReadPageMAC &rArr; write_byte &rArr; write_bit &rArr; One_Wire_IO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteScratchpad
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeAndReadPageMAC
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SumCheck
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc8CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecret
</UL>

<P><STRONG><a name="[4d]"></a>Set_SDIO_Direction</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp_a7139.o(i.Set_SDIO_Direction))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Set_SDIO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_ReadReg
</UL>

<P><STRONG><a name="[50]"></a>StrobeCMD</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bsp_a7139.o(i.StrobeCMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StrobeCMD
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_NOP
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRF
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TX1
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TX
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPacket
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_WriteFIFO
</UL>

<P><STRONG><a name="[b1]"></a>SumCheck</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_wireless.o(i.SumCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SumCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Secret_Verify
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Lock_Action
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Dev_Action
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Control_IR
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_IR_UnLoadToWireless
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_IR_LoadToWireless
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_timer.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; SysTick_ISR &rArr; bsp_RunPer1ms &rArr; hSCH_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>SysTick_ISR</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, bsp_timer.o(i.SysTick_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_ISR &rArr; bsp_RunPer1ms &rArr; hSCH_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SoftTimerDec
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer1ms
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer10ms
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, bsp_timer.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StartHardTimer
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[fc]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitHardTimer
</UL>

<P><STRONG><a name="[107]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StartHardTimer
</UL>

<P><STRONG><a name="[d7]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StartHardTimer
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StartHardTimer
</UL>

<P><STRONG><a name="[109]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare2))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StartHardTimer
</UL>

<P><STRONG><a name="[10a]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare3))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StartHardTimer
</UL>

<P><STRONG><a name="[10b]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare4))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StartHardTimer
</UL>

<P><STRONG><a name="[fb]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitHardTimer
</UL>

<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bsp_usart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[103]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[102]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[cc]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send
</UL>

<P><STRONG><a name="[da]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[dc]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[db]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[cb]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>Wireless_Control_IR</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, app_wireless.o(i.Wireless_Control_IR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Wireless_Control_IR &rArr; EnQueueBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SumCheck
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueue_InQ
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueueBuf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc8CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_ParseFrame
</UL>

<P><STRONG><a name="[96]"></a>Wireless_Dev_Action</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, app_wireless.o(i.Wireless_Dev_Action))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Wireless_Dev_Action &rArr; EnQueueBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SumCheck
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueue_InQ
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueueBuf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc8CheckSum
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Send_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_AddressSetting
</UL>

<P><STRONG><a name="[df]"></a>Wireless_Learn_Finish</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, app_wireless.o(i.Wireless_Learn_Finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Wireless_Learn_Finish &rArr; GetSecret &rArr; Secret_Verify &rArr; ComputeAndReadPageMAC &rArr; write_byte &rArr; write_bit &rArr; One_Wire_IO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecret
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Ex_Table
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Key_En
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Dev_Declare
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_set
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
</UL>

<P><STRONG><a name="[aa]"></a>Wireless_Lock_Action</STRONG> (Thumb, 504 bytes, Stack size 24 bytes, app_wireless.o(i.Wireless_Lock_Action))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Wireless_Lock_Action &rArr; EnQueueBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SumCheck
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueue_InQ
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueueBuf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc8CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_Date
</UL>

<P><STRONG><a name="[66]"></a>Wireless_Recv</STRONG> (Thumb, 2690 bytes, Stack size 88 bytes, app_wireless.o(i.Wireless_Recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Wireless_Recv &rArr; ComposePacketFromDS28E02 &rArr; GetSecret &rArr; Secret_Verify &rArr; ComputeAndReadPageMAC &rArr; write_byte &rArr; write_bit &rArr; One_Wire_IO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pannel_Table_Refresh
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ir_Config_Del
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ir_Config_Add
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComposePacketFromDS28E02
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComposePacket
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareSync
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Lock_Table
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SumCheck
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueue_OutQ
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeQueueBuf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc8CheckSum
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Turn_DataLoad
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Sensor_DataLoad
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_RS485_StuLoad
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_RS4852Wireless
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Key_DataLoad
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_IrSetup_Report
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_IrDel_Report
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Lock_DataLoad
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DlyEvent_handle
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_PutMsg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRF
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RX
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlLock_Learn_Finish
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv_IsRun
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv_Disable
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Learn_Finish
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_WlLock_Addr
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Wireless_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_WirelessRecv
</UL>

<P><STRONG><a name="[e3]"></a>Wireless_Recv_Disable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_wireless.o(i.Wireless_Recv_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Wireless_Recv_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
</UL>

<P><STRONG><a name="[e2]"></a>Wireless_Recv_IsRun</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, app_wireless.o(i.Wireless_Recv_IsRun))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
</UL>

<P><STRONG><a name="[67]"></a>Wireless_Send</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, app_wireless.o(i.Wireless_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Wireless_Send &rArr; bsp_InitRF &rArr; A7129_Cal &rArr; A7129_ReadPageA &rArr; A7129_ReadReg &rArr; Set_SDIO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueue_OutQ
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeQueueBuf
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRF
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TX
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_WirelessSend
</UL>

<P><STRONG><a name="[de]"></a>Wireless_Send_Check</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_wireless.o(i.Wireless_Send_Check))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Dev_Action
</UL>

<P><STRONG><a name="[e6]"></a>WlLock_Learn_Finish</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, app_wireless.o(i.WlLock_Learn_Finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = WlLock_Learn_Finish &rArr; Write_Lock_Table &rArr; WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecret
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Lock_Table
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_set
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
</UL>

<P><STRONG><a name="[e8]"></a>WriteDataToFlash</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, bsp_eeprom.o(i.WriteDataToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_delay10ms
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_wbyte
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecAck
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Pannel_Table
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Lock_Table
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Ex_Table
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Dev
</UL>

<P><STRONG><a name="[ea]"></a>WriteMemory</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, bsp_ds28e11.o(i.WriteMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = WriteMemory &rArr; write_byte &rArr; write_bit &rArr; One_Wire_IO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_byte
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ow_reset
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;docrc16
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init28E11Var
</UL>

<P><STRONG><a name="[7a]"></a>Write_Dev</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, func.o(i.Write_Dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Write_Dev &rArr; WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToFlash
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WP_SET
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Dev
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Modify_Type
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_AddressSetting
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
</UL>

<P><STRONG><a name="[97]"></a>Write_Ex_Table</STRONG> (Thumb, 290 bytes, Stack size 64 bytes, func.o(i.Write_Ex_Table))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Write_Ex_Table &rArr; WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToFlash
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WP_SET
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ex_Table
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_Setup
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_AddressSetting
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ex_Table
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Learn_Finish
</UL>

<P><STRONG><a name="[a7]"></a>Write_Lock_Table</STRONG> (Thumb, 322 bytes, Stack size 112 bytes, func.o(i.Write_Lock_Table))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Write_Lock_Table &rArr; WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToFlash
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WP_SET
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Lock_Table
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_Setup
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_Date
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Lock_Table
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlLock_Learn_Finish
</UL>

<P><STRONG><a name="[c0]"></a>Write_Pannel_Table</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, func.o(i.Write_Pannel_Table))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Write_Pannel_Table &rArr; WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToFlash
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WP_SET
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Pannel_Table
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pannel_Table_Refresh
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ir_Config_Del
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ir_Config_Add
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Key_En
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Key_Dis
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Pannel_Table
</UL>

<P><STRONG><a name="[11f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[120]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[121]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[9e]"></a>bsp_CheckTimer</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, bsp_timer.o(i.bsp_CheckTimer))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Dlytime_Handle
</UL>

<P><STRONG><a name="[101]"></a>bsp_ClearMsg</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_msg.o(i.bsp_ClearMsg))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitMsg
</UL>

<P><STRONG><a name="[ed]"></a>bsp_EepromInit</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, bsp_eeprom.o(i.bsp_EepromInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_EepromInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WP_SET
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[5d]"></a>bsp_GetKey</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, bsp_key.o(i.bsp_GetKey))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Run
</UL>

<P><STRONG><a name="[c3]"></a>bsp_GetMsg</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, bsp_msg.o(i.bsp_GetMsg))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_hanndle
</UL>

<P><STRONG><a name="[ef]"></a>bsp_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp.o(i.bsp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bsp_Init &rArr; bsp_Init28E11 &rArr; bsp_Init28E11Var &rArr; WriteMemory &rArr; write_byte &rArr; write_bit &rArr; One_Wire_IO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitTimer
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitMsg
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitLed
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitKey
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init28E11
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_EepromInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRF
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>bsp_Init28E11</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_ds28e11.o(i.bsp_Init28E11))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bsp_Init28E11 &rArr; bsp_Init28E11Var &rArr; WriteMemory &rArr; write_byte &rArr; write_bit &rArr; One_Wire_IO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init28E11Var
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init28E11Hard
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[f7]"></a>bsp_Init28E11Hard</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp_ds28e11.o(i.bsp_Init28E11Hard))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_Init28E11Hard &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init28E11
</UL>

<P><STRONG><a name="[f8]"></a>bsp_Init28E11Var</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bsp_ds28e11.o(i.bsp_Init28E11Var))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bsp_Init28E11Var &rArr; WriteMemory &rArr; write_byte &rArr; write_bit &rArr; One_Wire_IO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init28E11
</UL>

<P><STRONG><a name="[f9]"></a>bsp_InitHardTimer</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, bsp_timer.o(i.bsp_InitHardTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bsp_InitHardTimer &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitTimer
</UL>

<P><STRONG><a name="[f3]"></a>bsp_InitKey</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_key.o(i.bsp_InitKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_InitKey &rArr; bsp_InitKeyHard &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitKeyVar
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitKeyHard
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[f1]"></a>bsp_InitLed</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, bsp_led.o(i.bsp_InitLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_InitLed &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOn
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[f5]"></a>bsp_InitMsg</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, bsp_msg.o(i.bsp_InitMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bsp_InitMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ClearMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[e7]"></a>bsp_InitRF</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, bsp_a7139.o(i.bsp_InitRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bsp_InitRF &rArr; A7129_Cal &rArr; A7129_ReadPageA &rArr; A7129_ReadReg &rArr; Set_SDIO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrobeCMD
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSSS_MODE
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Delay10us
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_WriteID
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_Config
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7129_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wl_wakeup_frame
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Send
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
</UL>

<P><STRONG><a name="[f4]"></a>bsp_InitTimer</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, bsp_timer.o(i.bsp_InitTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsp_InitTimer &rArr; bsp_InitHardTimer &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitHardTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[f2]"></a>bsp_InitUart</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, bsp_usart.o(i.bsp_InitUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = bsp_InitUart &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[56]"></a>bsp_KeyScan</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_key.o(i.bsp_KeyScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_KeyScan &rArr; bsp_DetectKey
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectKey
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Run
</UL>

<P><STRONG><a name="[10f]"></a>bsp_LedOff</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp_led.o(i.bsp_LedOff))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_run
</UL>

<P><STRONG><a name="[100]"></a>bsp_LedOn</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp_led.o(i.bsp_LedOn))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_run
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitLed
</UL>

<P><STRONG><a name="[ec]"></a>bsp_PutKey</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bsp_key.o(i.bsp_PutKey))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectKey
</UL>

<P><STRONG><a name="[e4]"></a>bsp_PutMsg</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bsp_msg.o(i.bsp_PutMsg))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
</UL>

<P><STRONG><a name="[d6]"></a>bsp_RunPer10ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(i.bsp_RunPer10ms))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
</UL>

<P><STRONG><a name="[d5]"></a>bsp_RunPer1ms</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp.o(i.bsp_RunPer1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_RunPer1ms &rArr; hSCH_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_BusMonitor
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hSCH_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
</UL>

<P><STRONG><a name="[69]"></a>bsp_StartHardTimer</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, bsp_timer.o(i.bsp_StartHardTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_StartHardTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Frame_Interval
</UL>

<P><STRONG><a name="[82]"></a>bsp_StartTimer</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bsp_timer.o(i.bsp_StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_StartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DlyEvent_handle
</UL>

<P><STRONG><a name="[73]"></a>docrc16</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, bsp_ds28e11.o(i.docrc16))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteScratchpad
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeAndReadPageMAC
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMemory
</UL>

<P><STRONG><a name="[cf]"></a>dowcrc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_ds28e11.o(i.dowcrc))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RomID
</UL>

<P><STRONG><a name="[111]"></a>hSCH_Add_Task</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, time_triggered.o(i.hSCH_Add_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hSCH_Add_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10d]"></a>hSCH_Dispatch_Tasks</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, time_triggered.o(i.hSCH_Dispatch_Tasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hSCH_Dispatch_Tasks &rArr; AppTask_RivalrySend &rArr; IT1_SendData &rArr; GetRandTime &rArr; Get_SerialNum
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_RivalrySend
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hSCH_Task_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10e]"></a>hSCH_Task_Delete</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, time_triggered.o(i.hSCH_Task_Delete))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hSCH_Dispatch_Tasks
</UL>

<P><STRONG><a name="[105]"></a>hSCH_Update</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, time_triggered.o(i.hSCH_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hSCH_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer1ms
</UL>

<P><STRONG><a name="[57]"></a>led_run</STRONG> (Thumb, 354 bytes, Stack size 4 bytes, bsp_led.o(i.led_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = led_run
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOn
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOff
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Run
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = main &rArr; Dev_Init &rArr; Read_Lock_Table &rArr; Init_Lock_Table &rArr; Write_Lock_Table &rArr; WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hSCH_Dispatch_Tasks
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hSCH_Add_Task
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StartHardTimer
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[70]"></a>ow_reset</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bsp_ds28e11.o(i.ow_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ow_reset &rArr; One_Wire_IO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;One_Wire_IO_Direction
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RomID
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteScratchpad
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeAndReadPageMAC
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMemory
</UL>

<P><STRONG><a name="[112]"></a>read_bit</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, bsp_ds28e11.o(i.read_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_byte
</UL>

<P><STRONG><a name="[72]"></a>read_byte</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bsp_ds28e11.o(i.read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read_byte &rArr; read_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RomID
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteScratchpad
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeAndReadPageMAC
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMemory
</UL>

<P><STRONG><a name="[a9]"></a>wl_wakeup_frame</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_wireless.o(i.wl_wakeup_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wl_wakeup_frame &rArr; bsp_InitRF &rArr; A7129_Cal &rArr; A7129_ReadPageA &rArr; A7129_ReadReg &rArr; Set_SDIO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRF
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TX1
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Function_Date
</UL>

<P><STRONG><a name="[113]"></a>write_bit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bsp_ds28e11.o(i.write_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = write_bit &rArr; One_Wire_IO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;One_Wire_IO_Direction
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte
</UL>

<P><STRONG><a name="[71]"></a>write_byte</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_ds28e11.o(i.write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = write_byte &rArr; write_bit &rArr; One_Wire_IO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RomID
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWriteScratchpad
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeAndReadPageMAC
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMemory
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3c]"></a>AppTask_Run</STRONG> (Thumb, 620 bytes, Stack size 24 bytes, main.o(i.AppTask_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = AppTask_Run &rArr; Init_Lock_Table &rArr; Write_Lock_Table &rArr; WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_run
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_KeyScan
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetKey
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegTimeClr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_hanndle
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_set
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Pannel_Table
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Lock_Table
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ex_Table
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Lock_DataLoad
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_LearnLock
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_IR_LoadToWireless
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Dlytime_Handle
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_Dev_Register
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DlyEvent_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[3a]"></a>AppTask_WirelessRecv</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.AppTask_WirelessRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = AppTask_WirelessRecv &rArr; Wireless_Recv &rArr; ComposePacketFromDS28E02 &rArr; GetSecret &rArr; Secret_Verify &rArr; ComputeAndReadPageMAC &rArr; write_byte &rArr; write_bit &rArr; One_Wire_IO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[3b]"></a>AppTask_WirelessSend</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.AppTask_WirelessSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AppTask_WirelessSend &rArr; Wireless_Send &rArr; bsp_InitRF &rArr; A7129_Cal &rArr; A7129_ReadPageA &rArr; A7129_ReadReg &rArr; Set_SDIO_Direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[39]"></a>taskRxProcess</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(i.taskRxProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = taskRxProcess &rArr; IT1_ParseFrame &rArr; IT1_Function_Date &rArr; Write_Lock_Table &rArr; WriteDataToFlash &rArr; I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IT1_ParseFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[d0]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, func.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Secret_Verify
</UL>

<P><STRONG><a name="[77]"></a>ClrChannelBIT</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, my_queue_chl.o(i.ClrChannelBIT))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeQueueBuf
</UL>

<P><STRONG><a name="[87]"></a>FoundChannelBIT</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, my_queue_chl.o(i.FoundChannelBIT))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueue_OutQ
</UL>

<P><STRONG><a name="[84]"></a>SetChannelBIT</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, my_queue_chl.o(i.SetChannelBIT))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueueBuf
</UL>

<P><STRONG><a name="[38]"></a>IsKeyDown1</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_key.o(i.IsKeyDown1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsKeyDown1
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_key.o(i.bsp_InitKeyVar)
</UL>
<P><STRONG><a name="[eb]"></a>bsp_DetectKey</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, bsp_key.o(i.bsp_DetectKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_DetectKey
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_PutKey
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_KeyScan
</UL>

<P><STRONG><a name="[ff]"></a>bsp_InitKeyHard</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp_key.o(i.bsp_InitKeyHard))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_InitKeyHard &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitKey
</UL>

<P><STRONG><a name="[fe]"></a>bsp_InitKeyVar</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, bsp_key.o(i.bsp_InitKeyVar))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitKey
</UL>

<P><STRONG><a name="[10c]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_timer.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StartTimer
</UL>

<P><STRONG><a name="[d4]"></a>bsp_SoftTimerDec</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bsp_timer.o(i.bsp_SoftTimerDec))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
</UL>

<P><STRONG><a name="[8a]"></a>I2C_NoAck</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_eeprom.o(i.I2C_NoAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_NoAck
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_nop
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromFlash
</UL>

<P><STRONG><a name="[8c]"></a>I2C_RecAck</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, bsp_eeprom.o(i.I2C_RecAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_RecAck &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_IO_SET
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_nop
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToFlash
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromFlash
</UL>

<P><STRONG><a name="[8f]"></a>I2C_SendAck</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_eeprom.o(i.I2C_SendAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_SendAck
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_nop
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromFlash
</UL>

<P><STRONG><a name="[90]"></a>I2C_Start</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp_eeprom.o(i.I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_nop
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToFlash
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromFlash
</UL>

<P><STRONG><a name="[91]"></a>I2C_Stop</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp_eeprom.o(i.I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_nop
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToFlash
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromFlash
</UL>

<P><STRONG><a name="[93]"></a>I2C_rbyte</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bsp_eeprom.o(i.I2C_rbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_rbyte &rArr; I2C_SDA_IO_SET &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_IO_SET
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_nop
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromFlash
</UL>

<P><STRONG><a name="[94]"></a>I2C_wbyte</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, bsp_eeprom.o(i.I2C_wbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_wbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_nop
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToFlash
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromFlash
</UL>

<P><STRONG><a name="[8b]"></a>delay_nop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_eeprom.o(i.delay_nop))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_wbyte
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rbyte
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendAck
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecAck
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NoAck
</UL>

<P><STRONG><a name="[e9]"></a>eep_delay10ms</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bsp_eeprom.o(i.eep_delay10ms))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToFlash
</UL>

<P><STRONG><a name="[d1]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[d2]"></a>SetSysClockTo72</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
